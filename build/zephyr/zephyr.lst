
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	c8 a3 00 20 c1 bb 00 00 a7 22 01 00 95 bb 00 00     ... ....."......
    8010:	95 bb 00 00 95 bb 00 00 95 bb 00 00 95 bb 00 00     ................
	...
    802c:	f1 b4 00 00 95 bb 00 00 00 00 00 00 91 b4 00 00     ................
    803c:	95 bb 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8050:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8060:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8070:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8080:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8090:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    80a0:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    80b0:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    80c0:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    80d0:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    80e0:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    80f0:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8100:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8110:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8120:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8130:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8140:	75 b5 00 00 75 b5 00 00 75 b5 00 00 75 b5 00 00     u...u...u...u...
    8150:	75 b5 00 00                                         u...

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295
    8164:	f04f 30ff 	movne.w	r0, #4294967295
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    818c:	4607      	mov	r7, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8194:	4615      	mov	r5, r2
    8196:	463c      	mov	r4, r7
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c5 	bne.w	832a <__udivmoddi4+0x1a2>
    81a0:	4282      	cmp	r2, r0
    81a2:	fab2 f782 	clz	r7, r2
    81a6:	d946      	bls.n	8236 <__udivmoddi4+0xae>
    81a8:	b14f      	cbz	r7, 81be <__udivmoddi4+0x36>
    81aa:	f1c7 0e20 	rsb	lr, r7, #32
    81ae:	fa00 f307 	lsl.w	r3, r0, r7
    81b2:	40bd      	lsls	r5, r7
    81b4:	fa24 fe0e 	lsr.w	lr, r4, lr
    81b8:	40bc      	lsls	r4, r7
    81ba:	ea4e 0c03 	orr.w	ip, lr, r3
    81be:	ea4f 4815 	mov.w	r8, r5, lsr #16
    81c2:	fa1f fe85 	uxth.w	lr, r5
    81c6:	0c22      	lsrs	r2, r4, #16
    81c8:	fbbc f9f8 	udiv	r9, ip, r8
    81cc:	fb08 c319 	mls	r3, r8, r9, ip
    81d0:	fb09 fa0e 	mul.w	sl, r9, lr
    81d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    81d8:	459a      	cmp	sl, r3
    81da:	d928      	bls.n	822e <__udivmoddi4+0xa6>
    81dc:	18eb      	adds	r3, r5, r3
    81de:	f109 30ff 	add.w	r0, r9, #4294967295
    81e2:	d204      	bcs.n	81ee <__udivmoddi4+0x66>
    81e4:	459a      	cmp	sl, r3
    81e6:	d902      	bls.n	81ee <__udivmoddi4+0x66>
    81e8:	f1a9 0002 	sub.w	r0, r9, #2
    81ec:	442b      	add	r3, r5
    81ee:	eba3 030a 	sub.w	r3, r3, sl
    81f2:	b2a4      	uxth	r4, r4
    81f4:	fbb3 f2f8 	udiv	r2, r3, r8
    81f8:	fb08 3312 	mls	r3, r8, r2, r3
    81fc:	fb02 fe0e 	mul.w	lr, r2, lr
    8200:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8204:	45a6      	cmp	lr, r4
    8206:	d914      	bls.n	8232 <__udivmoddi4+0xaa>
    8208:	192c      	adds	r4, r5, r4
    820a:	f102 33ff 	add.w	r3, r2, #4294967295
    820e:	d203      	bcs.n	8218 <__udivmoddi4+0x90>
    8210:	45a6      	cmp	lr, r4
    8212:	d901      	bls.n	8218 <__udivmoddi4+0x90>
    8214:	1e93      	subs	r3, r2, #2
    8216:	442c      	add	r4, r5
    8218:	eba4 040e 	sub.w	r4, r4, lr
    821c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8220:	b11e      	cbz	r6, 822a <__udivmoddi4+0xa2>
    8222:	40fc      	lsrs	r4, r7
    8224:	2300      	movs	r3, #0
    8226:	6034      	str	r4, [r6, #0]
    8228:	6073      	str	r3, [r6, #4]
    822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    822e:	4648      	mov	r0, r9
    8230:	e7dd      	b.n	81ee <__udivmoddi4+0x66>
    8232:	4613      	mov	r3, r2
    8234:	e7f0      	b.n	8218 <__udivmoddi4+0x90>
    8236:	b902      	cbnz	r2, 823a <__udivmoddi4+0xb2>
    8238:	deff      	udf	#255	; 0xff
    823a:	bb87      	cbnz	r7, 829e <__udivmoddi4+0x116>
    823c:	1a83      	subs	r3, r0, r2
    823e:	2101      	movs	r1, #1
    8240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8244:	b2aa      	uxth	r2, r5
    8246:	0c20      	lsrs	r0, r4, #16
    8248:	fbb3 fcfe 	udiv	ip, r3, lr
    824c:	fb0e 331c 	mls	r3, lr, ip, r3
    8250:	fb0c f802 	mul.w	r8, ip, r2
    8254:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8258:	4598      	cmp	r8, r3
    825a:	d962      	bls.n	8322 <__udivmoddi4+0x19a>
    825c:	18eb      	adds	r3, r5, r3
    825e:	f10c 30ff 	add.w	r0, ip, #4294967295
    8262:	d204      	bcs.n	826e <__udivmoddi4+0xe6>
    8264:	4598      	cmp	r8, r3
    8266:	d902      	bls.n	826e <__udivmoddi4+0xe6>
    8268:	f1ac 0002 	sub.w	r0, ip, #2
    826c:	442b      	add	r3, r5
    826e:	eba3 0308 	sub.w	r3, r3, r8
    8272:	b2a4      	uxth	r4, r4
    8274:	fbb3 fcfe 	udiv	ip, r3, lr
    8278:	fb0e 331c 	mls	r3, lr, ip, r3
    827c:	fb0c f202 	mul.w	r2, ip, r2
    8280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8284:	42a2      	cmp	r2, r4
    8286:	d94e      	bls.n	8326 <__udivmoddi4+0x19e>
    8288:	192c      	adds	r4, r5, r4
    828a:	f10c 33ff 	add.w	r3, ip, #4294967295
    828e:	d204      	bcs.n	829a <__udivmoddi4+0x112>
    8290:	42a2      	cmp	r2, r4
    8292:	d902      	bls.n	829a <__udivmoddi4+0x112>
    8294:	f1ac 0302 	sub.w	r3, ip, #2
    8298:	442c      	add	r4, r5
    829a:	1aa4      	subs	r4, r4, r2
    829c:	e7be      	b.n	821c <__udivmoddi4+0x94>
    829e:	f1c7 0c20 	rsb	ip, r7, #32
    82a2:	40bd      	lsls	r5, r7
    82a4:	fa00 f307 	lsl.w	r3, r0, r7
    82a8:	fa20 f80c 	lsr.w	r8, r0, ip
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	fa24 fc0c 	lsr.w	ip, r4, ip
    82b4:	40bc      	lsls	r4, r7
    82b6:	ea4c 0203 	orr.w	r2, ip, r3
    82ba:	b2ab      	uxth	r3, r5
    82bc:	fbb8 fcfe 	udiv	ip, r8, lr
    82c0:	0c11      	lsrs	r1, r2, #16
    82c2:	fb0e 801c 	mls	r0, lr, ip, r8
    82c6:	fb0c f903 	mul.w	r9, ip, r3
    82ca:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    82ce:	4581      	cmp	r9, r0
    82d0:	d923      	bls.n	831a <__udivmoddi4+0x192>
    82d2:	1828      	adds	r0, r5, r0
    82d4:	f10c 31ff 	add.w	r1, ip, #4294967295
    82d8:	d204      	bcs.n	82e4 <__udivmoddi4+0x15c>
    82da:	4581      	cmp	r9, r0
    82dc:	d902      	bls.n	82e4 <__udivmoddi4+0x15c>
    82de:	f1ac 0102 	sub.w	r1, ip, #2
    82e2:	4428      	add	r0, r5
    82e4:	eba0 0009 	sub.w	r0, r0, r9
    82e8:	b292      	uxth	r2, r2
    82ea:	fbb0 fcfe 	udiv	ip, r0, lr
    82ee:	fb0e 001c 	mls	r0, lr, ip, r0
    82f2:	fb0c f803 	mul.w	r8, ip, r3
    82f6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    82fa:	4598      	cmp	r8, r3
    82fc:	d90f      	bls.n	831e <__udivmoddi4+0x196>
    82fe:	18eb      	adds	r3, r5, r3
    8300:	f10c 32ff 	add.w	r2, ip, #4294967295
    8304:	d204      	bcs.n	8310 <__udivmoddi4+0x188>
    8306:	4598      	cmp	r8, r3
    8308:	d902      	bls.n	8310 <__udivmoddi4+0x188>
    830a:	f1ac 0202 	sub.w	r2, ip, #2
    830e:	442b      	add	r3, r5
    8310:	eba3 0308 	sub.w	r3, r3, r8
    8314:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    8318:	e792      	b.n	8240 <__udivmoddi4+0xb8>
    831a:	4661      	mov	r1, ip
    831c:	e7e2      	b.n	82e4 <__udivmoddi4+0x15c>
    831e:	4662      	mov	r2, ip
    8320:	e7f6      	b.n	8310 <__udivmoddi4+0x188>
    8322:	4660      	mov	r0, ip
    8324:	e7a3      	b.n	826e <__udivmoddi4+0xe6>
    8326:	4663      	mov	r3, ip
    8328:	e7b7      	b.n	829a <__udivmoddi4+0x112>
    832a:	4283      	cmp	r3, r0
    832c:	d905      	bls.n	833a <__udivmoddi4+0x1b2>
    832e:	b10e      	cbz	r6, 8334 <__udivmoddi4+0x1ac>
    8330:	e9c6 7000 	strd	r7, r0, [r6]
    8334:	2100      	movs	r1, #0
    8336:	4608      	mov	r0, r1
    8338:	e777      	b.n	822a <__udivmoddi4+0xa2>
    833a:	fab3 f183 	clz	r1, r3
    833e:	b981      	cbnz	r1, 8362 <__udivmoddi4+0x1da>
    8340:	4283      	cmp	r3, r0
    8342:	d301      	bcc.n	8348 <__udivmoddi4+0x1c0>
    8344:	42ba      	cmp	r2, r7
    8346:	d80a      	bhi.n	835e <__udivmoddi4+0x1d6>
    8348:	1abc      	subs	r4, r7, r2
    834a:	eb60 0303 	sbc.w	r3, r0, r3
    834e:	2001      	movs	r0, #1
    8350:	469c      	mov	ip, r3
    8352:	2e00      	cmp	r6, #0
    8354:	d067      	beq.n	8426 <__udivmoddi4+0x29e>
    8356:	e9c6 4c00 	strd	r4, ip, [r6]
    835a:	2100      	movs	r1, #0
    835c:	e765      	b.n	822a <__udivmoddi4+0xa2>
    835e:	4608      	mov	r0, r1
    8360:	e7f7      	b.n	8352 <__udivmoddi4+0x1ca>
    8362:	f1c1 0c20 	rsb	ip, r1, #32
    8366:	408b      	lsls	r3, r1
    8368:	fa02 f501 	lsl.w	r5, r2, r1
    836c:	fa22 f40c 	lsr.w	r4, r2, ip
    8370:	fa20 fb0c 	lsr.w	fp, r0, ip
    8374:	fa27 f20c 	lsr.w	r2, r7, ip
    8378:	408f      	lsls	r7, r1
    837a:	431c      	orrs	r4, r3
    837c:	fa00 f301 	lsl.w	r3, r0, r1
    8380:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8384:	4313      	orrs	r3, r2
    8386:	fa1f fe84 	uxth.w	lr, r4
    838a:	0c1a      	lsrs	r2, r3, #16
    838c:	fbbb f8f9 	udiv	r8, fp, r9
    8390:	fb09 bb18 	mls	fp, r9, r8, fp
    8394:	fb08 fa0e 	mul.w	sl, r8, lr
    8398:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    839c:	4592      	cmp	sl, r2
    839e:	d93e      	bls.n	841e <__udivmoddi4+0x296>
    83a0:	18a2      	adds	r2, r4, r2
    83a2:	f108 30ff 	add.w	r0, r8, #4294967295
    83a6:	d204      	bcs.n	83b2 <__udivmoddi4+0x22a>
    83a8:	4592      	cmp	sl, r2
    83aa:	d902      	bls.n	83b2 <__udivmoddi4+0x22a>
    83ac:	f1a8 0002 	sub.w	r0, r8, #2
    83b0:	4422      	add	r2, r4
    83b2:	eba2 020a 	sub.w	r2, r2, sl
    83b6:	b29b      	uxth	r3, r3
    83b8:	fbb2 f8f9 	udiv	r8, r2, r9
    83bc:	fb09 2218 	mls	r2, r9, r8, r2
    83c0:	fb08 fe0e 	mul.w	lr, r8, lr
    83c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    83c8:	4596      	cmp	lr, r2
    83ca:	d92a      	bls.n	8422 <__udivmoddi4+0x29a>
    83cc:	18a2      	adds	r2, r4, r2
    83ce:	f108 33ff 	add.w	r3, r8, #4294967295
    83d2:	d204      	bcs.n	83de <__udivmoddi4+0x256>
    83d4:	4596      	cmp	lr, r2
    83d6:	d902      	bls.n	83de <__udivmoddi4+0x256>
    83d8:	f1a8 0302 	sub.w	r3, r8, #2
    83dc:	4422      	add	r2, r4
    83de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83e2:	eba2 020e 	sub.w	r2, r2, lr
    83e6:	fba0 9305 	umull	r9, r3, r0, r5
    83ea:	429a      	cmp	r2, r3
    83ec:	46ce      	mov	lr, r9
    83ee:	4698      	mov	r8, r3
    83f0:	d302      	bcc.n	83f8 <__udivmoddi4+0x270>
    83f2:	d106      	bne.n	8402 <__udivmoddi4+0x27a>
    83f4:	454f      	cmp	r7, r9
    83f6:	d204      	bcs.n	8402 <__udivmoddi4+0x27a>
    83f8:	3801      	subs	r0, #1
    83fa:	ebb9 0e05 	subs.w	lr, r9, r5
    83fe:	eb63 0804 	sbc.w	r8, r3, r4
    8402:	b186      	cbz	r6, 8426 <__udivmoddi4+0x29e>
    8404:	ebb7 030e 	subs.w	r3, r7, lr
    8408:	eb62 0708 	sbc.w	r7, r2, r8
    840c:	fa07 fc0c 	lsl.w	ip, r7, ip
    8410:	40cb      	lsrs	r3, r1
    8412:	40cf      	lsrs	r7, r1
    8414:	ea4c 0303 	orr.w	r3, ip, r3
    8418:	e9c6 3700 	strd	r3, r7, [r6]
    841c:	e79d      	b.n	835a <__udivmoddi4+0x1d2>
    841e:	4640      	mov	r0, r8
    8420:	e7c7      	b.n	83b2 <__udivmoddi4+0x22a>
    8422:	4643      	mov	r3, r8
    8424:	e7db      	b.n	83de <__udivmoddi4+0x256>
    8426:	4631      	mov	r1, r6
    8428:	e6ff      	b.n	822a <__udivmoddi4+0xa2>
	...

0000842c <status_cb>:
static struct gpio_callback callback[4];
static enum usb_dc_status_code usb_status;

static void status_cb(enum usb_dc_status_code status, const uint8_t *param)
{
	usb_status = status;
    842c:	4b01      	ldr	r3, [pc, #4]	; (8434 <status_cb+0x8>)
    842e:	7018      	strb	r0, [r3, #0]
}
    8430:	4770      	bx	lr
    8432:	bf00      	nop
    8434:	200098a4 	.word	0x200098a4

00008438 <one_button>:

static void one_button(const struct device *gpio, struct gpio_callback *cb,
			uint32_t pins)
{
    8438:	b5b0      	push	{r4, r5, r7, lr}
	int ret;
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    843a:	4c1b      	ldr	r4, [pc, #108]	; (84a8 <one_button+0x70>)
{
    843c:	4605      	mov	r5, r0
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    843e:	79e3      	ldrb	r3, [r4, #7]

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		if (usb_status == USB_DC_SUSPEND) {
    8440:	4b1a      	ldr	r3, [pc, #104]	; (84ac <one_button+0x74>)
{
    8442:	af00      	add	r7, sp, #0
		if (usb_status == USB_DC_SUSPEND) {
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	2b05      	cmp	r3, #5
    8448:	d103      	bne.n	8452 <one_button+0x1a>
			usb_wakeup_request();
    844a:	f002 fa9b 	bl	a984 <usb_wakeup_request>

	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
		status[KEYPAD_BTN_CODE_REPORT_POS] = state;
		k_sem_give(&sem);
	}
}
    844e:	46bd      	mov	sp, r7
    8450:	bdb0      	pop	{r4, r5, r7, pc}
	ret = gpio_pin_get(gpio, sw0.pin);
    8452:	2117      	movs	r1, #23
    8454:	f009 f844 	bl	114e0 <gpio_pin_get>
	if (ret < 0) {
    8458:	1e03      	subs	r3, r0, #0
    845a:	da16      	bge.n	848a <one_button+0x52>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
    845c:	466c      	mov	r4, sp
    845e:	b08a      	sub	sp, #40	; 0x28
    8460:	466a      	mov	r2, sp
    8462:	6829      	ldr	r1, [r5, #0]
    8464:	4812      	ldr	r0, [pc, #72]	; (84b0 <one_button+0x78>)
    8466:	e9c2 0105 	strd	r0, r1, [r2, #20]
    846a:	2117      	movs	r1, #23
    846c:	e9c2 1307 	strd	r1, r3, [r2, #28]
    8470:	2302      	movs	r3, #2
    8472:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    8476:	4b0f      	ldr	r3, [pc, #60]	; (84b4 <one_button+0x7c>)
    8478:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    847c:	480e      	ldr	r0, [pc, #56]	; (84b8 <one_button+0x80>)
    847e:	f842 3f10 	str.w	r3, [r2, #16]!
    8482:	f009 f841 	bl	11508 <z_log_msg_static_create.constprop.0>
    8486:	46a5      	mov	sp, r4
		return;
    8488:	e7e1      	b.n	844e <one_button+0x16>
	if (def_val[0] != (uint8_t)ret) {
    848a:	4a0c      	ldr	r2, [pc, #48]	; (84bc <one_button+0x84>)
    848c:	b2db      	uxtb	r3, r3
    848e:	7810      	ldrb	r0, [r2, #0]
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    8490:	79e2      	ldrb	r2, [r4, #7]
		state = HID_KBD_MODIFIER_NONE;
    8492:	4298      	cmp	r0, r3
    8494:	bf14      	ite	ne
    8496:	2315      	movne	r3, #21
    8498:	2300      	moveq	r3, #0
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    849a:	4293      	cmp	r3, r2
    849c:	d0d7      	beq.n	844e <one_button+0x16>
		status[KEYPAD_BTN_CODE_REPORT_POS] = state;
    849e:	71e3      	strb	r3, [r4, #7]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    84a0:	4807      	ldr	r0, [pc, #28]	; (84c0 <one_button+0x88>)
    84a2:	f008 f8cf 	bl	10644 <z_impl_k_sem_give>
}
    84a6:	e7d2      	b.n	844e <one_button+0x16>
    84a8:	2000989c 	.word	0x2000989c
    84ac:	200098a4 	.word	0x200098a4
    84b0:	00013880 	.word	0x00013880
    84b4:	01000005 	.word	0x01000005
    84b8:	00013554 	.word	0x00013554
    84bc:	20009898 	.word	0x20009898
    84c0:	20008138 	.word	0x20008138

000084c4 <four_button>:
	}
}

static void four_button(const struct device *gpio, struct gpio_callback *cb,
			 uint32_t pins)
{
    84c4:	b5b0      	push	{r4, r5, r7, lr}
	int ret;
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    84c6:	4c1b      	ldr	r4, [pc, #108]	; (8534 <four_button+0x70>)
{
    84c8:	4605      	mov	r5, r0
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    84ca:	79e3      	ldrb	r3, [r4, #7]

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		if (usb_status == USB_DC_SUSPEND) {
    84cc:	4b1a      	ldr	r3, [pc, #104]	; (8538 <four_button+0x74>)
{
    84ce:	af00      	add	r7, sp, #0
		if (usb_status == USB_DC_SUSPEND) {
    84d0:	781b      	ldrb	r3, [r3, #0]
    84d2:	2b05      	cmp	r3, #5
    84d4:	d103      	bne.n	84de <four_button+0x1a>
			usb_wakeup_request();
    84d6:	f002 fa55 	bl	a984 <usb_wakeup_request>

	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
		status[KEYPAD_BTN_CODE_REPORT_POS] = state;
		k_sem_give(&sem);
	}
}
    84da:	46bd      	mov	sp, r7
    84dc:	bdb0      	pop	{r4, r5, r7, pc}
	ret = gpio_pin_get(gpio, sw3.pin);
    84de:	2109      	movs	r1, #9
    84e0:	f008 fffe 	bl	114e0 <gpio_pin_get>
	if (ret < 0) {
    84e4:	1e03      	subs	r3, r0, #0
    84e6:	da16      	bge.n	8516 <four_button+0x52>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
    84e8:	466c      	mov	r4, sp
    84ea:	b08a      	sub	sp, #40	; 0x28
    84ec:	466a      	mov	r2, sp
    84ee:	6829      	ldr	r1, [r5, #0]
    84f0:	4812      	ldr	r0, [pc, #72]	; (853c <four_button+0x78>)
    84f2:	e9c2 0105 	strd	r0, r1, [r2, #20]
    84f6:	2109      	movs	r1, #9
    84f8:	e9c2 1307 	strd	r1, r3, [r2, #28]
    84fc:	2302      	movs	r3, #2
    84fe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    8502:	4b0f      	ldr	r3, [pc, #60]	; (8540 <four_button+0x7c>)
    8504:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    8508:	480e      	ldr	r0, [pc, #56]	; (8544 <four_button+0x80>)
    850a:	f842 3f10 	str.w	r3, [r2, #16]!
    850e:	f008 fffb 	bl	11508 <z_log_msg_static_create.constprop.0>
    8512:	46a5      	mov	sp, r4
		return;
    8514:	e7e1      	b.n	84da <four_button+0x16>
	if (def_val[3] != (uint8_t)ret) {
    8516:	4a0c      	ldr	r2, [pc, #48]	; (8548 <four_button+0x84>)
    8518:	b2db      	uxtb	r3, r3
    851a:	78d0      	ldrb	r0, [r2, #3]
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    851c:	79e2      	ldrb	r2, [r4, #7]
		state = HID_KBD_MODIFIER_NONE;
    851e:	4298      	cmp	r0, r3
    8520:	bf14      	ite	ne
    8522:	230b      	movne	r3, #11
    8524:	2300      	moveq	r3, #0
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    8526:	4293      	cmp	r3, r2
    8528:	d0d7      	beq.n	84da <four_button+0x16>
		status[KEYPAD_BTN_CODE_REPORT_POS] = state;
    852a:	71e3      	strb	r3, [r4, #7]
	z_impl_k_sem_give(sem);
    852c:	4807      	ldr	r0, [pc, #28]	; (854c <four_button+0x88>)
    852e:	f008 f889 	bl	10644 <z_impl_k_sem_give>
}
    8532:	e7d2      	b.n	84da <four_button+0x16>
    8534:	2000989c 	.word	0x2000989c
    8538:	200098a4 	.word	0x200098a4
    853c:	00013880 	.word	0x00013880
    8540:	01000005 	.word	0x01000005
    8544:	00013554 	.word	0x00013554
    8548:	20009898 	.word	0x20009898
    854c:	20008138 	.word	0x20008138

00008550 <three_button>:
{
    8550:	b5b0      	push	{r4, r5, r7, lr}
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    8552:	4c1b      	ldr	r4, [pc, #108]	; (85c0 <three_button+0x70>)
{
    8554:	4605      	mov	r5, r0
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    8556:	79e3      	ldrb	r3, [r4, #7]
		if (usb_status == USB_DC_SUSPEND) {
    8558:	4b1a      	ldr	r3, [pc, #104]	; (85c4 <three_button+0x74>)
{
    855a:	af00      	add	r7, sp, #0
		if (usb_status == USB_DC_SUSPEND) {
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	2b05      	cmp	r3, #5
    8560:	d103      	bne.n	856a <three_button+0x1a>
			usb_wakeup_request();
    8562:	f002 fa0f 	bl	a984 <usb_wakeup_request>
}
    8566:	46bd      	mov	sp, r7
    8568:	bdb0      	pop	{r4, r5, r7, pc}
	ret = gpio_pin_get(gpio, sw2.pin);
    856a:	2108      	movs	r1, #8
    856c:	f008 ffb8 	bl	114e0 <gpio_pin_get>
	if (ret < 0) {
    8570:	1e03      	subs	r3, r0, #0
    8572:	da16      	bge.n	85a2 <three_button+0x52>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
    8574:	466c      	mov	r4, sp
    8576:	b08a      	sub	sp, #40	; 0x28
    8578:	466a      	mov	r2, sp
    857a:	6829      	ldr	r1, [r5, #0]
    857c:	4812      	ldr	r0, [pc, #72]	; (85c8 <three_button+0x78>)
    857e:	e9c2 0105 	strd	r0, r1, [r2, #20]
    8582:	2108      	movs	r1, #8
    8584:	e9c2 1307 	strd	r1, r3, [r2, #28]
    8588:	2302      	movs	r3, #2
    858a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    858e:	4b0f      	ldr	r3, [pc, #60]	; (85cc <three_button+0x7c>)
    8590:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    8594:	480e      	ldr	r0, [pc, #56]	; (85d0 <three_button+0x80>)
    8596:	f842 3f10 	str.w	r3, [r2, #16]!
    859a:	f008 ffb5 	bl	11508 <z_log_msg_static_create.constprop.0>
    859e:	46a5      	mov	sp, r4
		return;
    85a0:	e7e1      	b.n	8566 <three_button+0x16>
	if (def_val[2] != (uint8_t)ret) {
    85a2:	4a0c      	ldr	r2, [pc, #48]	; (85d4 <three_button+0x84>)
    85a4:	b2db      	uxtb	r3, r3
    85a6:	7890      	ldrb	r0, [r2, #2]
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    85a8:	79e2      	ldrb	r2, [r4, #7]
		state = HID_KBD_MODIFIER_NONE;
    85aa:	4298      	cmp	r0, r3
    85ac:	bf14      	ite	ne
    85ae:	2306      	movne	r3, #6
    85b0:	2300      	moveq	r3, #0
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    85b2:	4293      	cmp	r3, r2
    85b4:	d0d7      	beq.n	8566 <three_button+0x16>
		status[KEYPAD_BTN_CODE_REPORT_POS] = state;
    85b6:	71e3      	strb	r3, [r4, #7]
	z_impl_k_sem_give(sem);
    85b8:	4807      	ldr	r0, [pc, #28]	; (85d8 <three_button+0x88>)
    85ba:	f008 f843 	bl	10644 <z_impl_k_sem_give>
}
    85be:	e7d2      	b.n	8566 <three_button+0x16>
    85c0:	2000989c 	.word	0x2000989c
    85c4:	200098a4 	.word	0x200098a4
    85c8:	00013880 	.word	0x00013880
    85cc:	01000005 	.word	0x01000005
    85d0:	00013554 	.word	0x00013554
    85d4:	20009898 	.word	0x20009898
    85d8:	20008138 	.word	0x20008138

000085dc <two_button>:
{
    85dc:	b5b0      	push	{r4, r5, r7, lr}
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    85de:	4c1b      	ldr	r4, [pc, #108]	; (864c <two_button+0x70>)
{
    85e0:	4605      	mov	r5, r0
	uint8_t state = status[KEYPAD_BTN_CODE_REPORT_POS];
    85e2:	79e3      	ldrb	r3, [r4, #7]
		if (usb_status == USB_DC_SUSPEND) {
    85e4:	4b1a      	ldr	r3, [pc, #104]	; (8650 <two_button+0x74>)
{
    85e6:	af00      	add	r7, sp, #0
		if (usb_status == USB_DC_SUSPEND) {
    85e8:	781b      	ldrb	r3, [r3, #0]
    85ea:	2b05      	cmp	r3, #5
    85ec:	d103      	bne.n	85f6 <two_button+0x1a>
			usb_wakeup_request();
    85ee:	f002 f9c9 	bl	a984 <usb_wakeup_request>
}
    85f2:	46bd      	mov	sp, r7
    85f4:	bdb0      	pop	{r4, r5, r7, pc}
	ret = gpio_pin_get(gpio, sw1.pin);
    85f6:	2118      	movs	r1, #24
    85f8:	f008 ff72 	bl	114e0 <gpio_pin_get>
	if (ret < 0) {
    85fc:	1e03      	subs	r3, r0, #0
    85fe:	da16      	bge.n	862e <two_button+0x52>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
    8600:	466c      	mov	r4, sp
    8602:	b08a      	sub	sp, #40	; 0x28
    8604:	466a      	mov	r2, sp
    8606:	6829      	ldr	r1, [r5, #0]
    8608:	4812      	ldr	r0, [pc, #72]	; (8654 <two_button+0x78>)
    860a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    860e:	2118      	movs	r1, #24
    8610:	e9c2 1307 	strd	r1, r3, [r2, #28]
    8614:	2302      	movs	r3, #2
    8616:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    861a:	4b0f      	ldr	r3, [pc, #60]	; (8658 <two_button+0x7c>)
    861c:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    8620:	480e      	ldr	r0, [pc, #56]	; (865c <two_button+0x80>)
    8622:	f842 3f10 	str.w	r3, [r2, #16]!
    8626:	f008 ff6f 	bl	11508 <z_log_msg_static_create.constprop.0>
    862a:	46a5      	mov	sp, r4
		return;
    862c:	e7e1      	b.n	85f2 <two_button+0x16>
	if (def_val[1] != (uint8_t)ret) {
    862e:	4a0c      	ldr	r2, [pc, #48]	; (8660 <two_button+0x84>)
    8630:	b2db      	uxtb	r3, r3
    8632:	7850      	ldrb	r0, [r2, #1]
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    8634:	79e2      	ldrb	r2, [r4, #7]
		state = HID_KBD_MODIFIER_NONE;
    8636:	4298      	cmp	r0, r3
    8638:	bf14      	ite	ne
    863a:	230c      	movne	r3, #12
    863c:	2300      	moveq	r3, #0
	if (status[KEYPAD_BTN_CODE_REPORT_POS] != state) {
    863e:	4293      	cmp	r3, r2
    8640:	d0d7      	beq.n	85f2 <two_button+0x16>
		status[KEYPAD_BTN_CODE_REPORT_POS] = state;
    8642:	71e3      	strb	r3, [r4, #7]
	z_impl_k_sem_give(sem);
    8644:	4807      	ldr	r0, [pc, #28]	; (8664 <two_button+0x88>)
    8646:	f007 fffd 	bl	10644 <z_impl_k_sem_give>
}
    864a:	e7d2      	b.n	85f2 <two_button+0x16>
    864c:	2000989c 	.word	0x2000989c
    8650:	200098a4 	.word	0x200098a4
    8654:	00013880 	.word	0x00013880
    8658:	01000005 	.word	0x01000005
    865c:	00013554 	.word	0x00013554
    8660:	20009898 	.word	0x20009898
    8664:	20008138 	.word	0x20008138

00008668 <callbacks_configure>:

int callbacks_configure(const struct gpio_dt_spec *spec,
			gpio_callback_handler_t handler,
			struct gpio_callback *callback, uint8_t *val)
{
    8668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *gpio = spec->port;
    866c:	6805      	ldr	r5, [r0, #0]
{
    866e:	4680      	mov	r8, r0
    8670:	468a      	mov	sl, r1
    8672:	4691      	mov	r9, r2
    8674:	469b      	mov	fp, r3
    8676:	af00      	add	r7, sp, #0
	gpio_pin_t pin = spec->pin;
	int ret;

	if (gpio == NULL) {
    8678:	b925      	cbnz	r5, 8684 <callbacks_configure+0x1c>
		/* Optional GPIO is missing. */
		return 0;
    867a:	2400      	movs	r4, #0
			gpio->name, pin, ret);
		return ret;
	}

	return 0;
}
    867c:	4620      	mov	r0, r4
    867e:	46bd      	mov	sp, r7
    8680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gpio_pin_t pin = spec->pin;
    8684:	7906      	ldrb	r6, [r0, #4]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    8686:	4628      	mov	r0, r5
    8688:	f00a fa59 	bl	12b3e <z_device_is_ready>
	if (!device_is_ready(gpio)) {
    868c:	b9a0      	cbnz	r0, 86b8 <callbacks_configure+0x50>
		LOG_ERR("GPIO port %s is not ready", gpio->name);
    868e:	466c      	mov	r4, sp
    8690:	b088      	sub	sp, #32
    8692:	466a      	mov	r2, sp
    8694:	682b      	ldr	r3, [r5, #0]
    8696:	4933      	ldr	r1, [pc, #204]	; (8764 <callbacks_configure+0xfc>)
    8698:	4833      	ldr	r0, [pc, #204]	; (8768 <callbacks_configure+0x100>)
    869a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    869e:	2302      	movs	r3, #2
    86a0:	7713      	strb	r3, [r2, #28]
    86a2:	4b32      	ldr	r3, [pc, #200]	; (876c <callbacks_configure+0x104>)
    86a4:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    86a8:	f842 3f10 	str.w	r3, [r2, #16]!
    86ac:	f008 ff2c 	bl	11508 <z_log_msg_static_create.constprop.0>
    86b0:	46a5      	mov	sp, r4
		return -ENODEV;
    86b2:	f06f 0412 	mvn.w	r4, #18
    86b6:	e7e1      	b.n	867c <callbacks_configure+0x14>
	ret = gpio_pin_configure_dt(spec, GPIO_INPUT);
    86b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    86bc:	4640      	mov	r0, r8
    86be:	f008 fef9 	bl	114b4 <gpio_pin_configure_dt>
	if (ret < 0) {
    86c2:	1e04      	subs	r4, r0, #0
    86c4:	da15      	bge.n	86f2 <callbacks_configure+0x8a>
		LOG_ERR("Failed to configure port %s pin %u, error: %d",
    86c6:	682b      	ldr	r3, [r5, #0]
    86c8:	466d      	mov	r5, sp
    86ca:	b08a      	sub	sp, #40	; 0x28
    86cc:	466a      	mov	r2, sp
    86ce:	4928      	ldr	r1, [pc, #160]	; (8770 <callbacks_configure+0x108>)
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
    86d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    86d4:	2302      	movs	r3, #2
    86d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    86da:	4b26      	ldr	r3, [pc, #152]	; (8774 <callbacks_configure+0x10c>)
    86dc:	e9c2 6407 	strd	r6, r4, [r2, #28]
    86e0:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    86e4:	4820      	ldr	r0, [pc, #128]	; (8768 <callbacks_configure+0x100>)
    86e6:	f842 3f10 	str.w	r3, [r2, #16]!
    86ea:	f008 ff0d 	bl	11508 <z_log_msg_static_create.constprop.0>
    86ee:	46ad      	mov	sp, r5
		return ret;
    86f0:	e7c4      	b.n	867c <callbacks_configure+0x14>
	ret = gpio_pin_get(gpio, pin);
    86f2:	4631      	mov	r1, r6
    86f4:	4628      	mov	r0, r5
    86f6:	f008 fef3 	bl	114e0 <gpio_pin_get>
	if (ret < 0) {
    86fa:	1e04      	subs	r4, r0, #0
    86fc:	da05      	bge.n	870a <callbacks_configure+0xa2>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
    86fe:	682b      	ldr	r3, [r5, #0]
    8700:	466d      	mov	r5, sp
    8702:	b08a      	sub	sp, #40	; 0x28
    8704:	466a      	mov	r2, sp
    8706:	491c      	ldr	r1, [pc, #112]	; (8778 <callbacks_configure+0x110>)
    8708:	e7e2      	b.n	86d0 <callbacks_configure+0x68>
	gpio_init_callback(callback, handler, BIT(pin));
    870a:	2201      	movs	r2, #1
	*val = (uint8_t)ret;
    870c:	f88b 4000 	strb.w	r4, [fp]
	gpio_init_callback(callback, handler, BIT(pin));
    8710:	fa02 f306 	lsl.w	r3, r2, r6
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
    8714:	f8c9 3008 	str.w	r3, [r9, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    8718:	68ab      	ldr	r3, [r5, #8]
	callback->handler = handler;
    871a:	f8c9 a004 	str.w	sl, [r9, #4]
	if (api->manage_callback == NULL) {
    871e:	69db      	ldr	r3, [r3, #28]
    8720:	b153      	cbz	r3, 8738 <callbacks_configure+0xd0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    8722:	4649      	mov	r1, r9
    8724:	4628      	mov	r0, r5
    8726:	4798      	blx	r3
	if (ret < 0) {
    8728:	1e04      	subs	r4, r0, #0
    872a:	da08      	bge.n	873e <callbacks_configure+0xd6>
		LOG_ERR("Failed to add the callback for port %s pin %u, "
    872c:	682b      	ldr	r3, [r5, #0]
    872e:	466d      	mov	r5, sp
    8730:	b08a      	sub	sp, #40	; 0x28
    8732:	466a      	mov	r2, sp
    8734:	4911      	ldr	r1, [pc, #68]	; (877c <callbacks_configure+0x114>)
    8736:	e7cb      	b.n	86d0 <callbacks_configure+0x68>
		return -ENOTSUP;
    8738:	f06f 0485 	mvn.w	r4, #133	; 0x85
    873c:	e7f6      	b.n	872c <callbacks_configure+0xc4>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    873e:	f8d8 0000 	ldr.w	r0, [r8]
    8742:	f898 1004 	ldrb.w	r1, [r8, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    8746:	6883      	ldr	r3, [r0, #8]
    8748:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    874c:	699c      	ldr	r4, [r3, #24]
    874e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
    8752:	47a0      	blx	r4
	if (ret < 0) {
    8754:	1e04      	subs	r4, r0, #0
    8756:	da90      	bge.n	867a <callbacks_configure+0x12>
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
    8758:	682b      	ldr	r3, [r5, #0]
    875a:	466d      	mov	r5, sp
    875c:	b08a      	sub	sp, #40	; 0x28
    875e:	466a      	mov	r2, sp
    8760:	4907      	ldr	r1, [pc, #28]	; (8780 <callbacks_configure+0x118>)
    8762:	e7b5      	b.n	86d0 <callbacks_configure+0x68>
    8764:	000138b5 	.word	0x000138b5
    8768:	00013554 	.word	0x00013554
    876c:	01000003 	.word	0x01000003
    8770:	000138cf 	.word	0x000138cf
    8774:	01000005 	.word	0x01000005
    8778:	00013880 	.word	0x00013880
    877c:	000138fd 	.word	0x000138fd
    8780:	00013936 	.word	0x00013936

00008784 <main>:

void main(void)
{
    8784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8788:	b088      	sub	sp, #32
	LOG_INF("Starting application");
    878a:	466d      	mov	r5, sp
{
    878c:	af00      	add	r7, sp, #0
	LOG_INF("Starting application");
    878e:	2602      	movs	r6, #2
    8790:	4b6f      	ldr	r3, [pc, #444]	; (8950 <main+0x1cc>)
    8792:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8796:	486f      	ldr	r0, [pc, #444]	; (8954 <main+0x1d0>)
    8798:	f107 0218 	add.w	r2, r7, #24
    879c:	61fb      	str	r3, [r7, #28]
    879e:	61be      	str	r6, [r7, #24]
    87a0:	f008 feb2 	bl	11508 <z_log_msg_static_create.constprop.0>

	int ret;
	uint8_t report[8] = { 0x00 };
    87a4:	2300      	movs	r3, #0
    87a6:	e9c7 3300 	strd	r3, r3, [r7]
    87aa:	4c6b      	ldr	r4, [pc, #428]	; (8958 <main+0x1d4>)
    87ac:	4620      	mov	r0, r4
    87ae:	f00a f9c6 	bl	12b3e <z_device_is_ready>
	const struct device *hid_dev;

	if (!device_is_ready(led0.port)) {
    87b2:	b998      	cbnz	r0, 87dc <main+0x58>
	if (!device_is_ready(led2.port)) {
		LOG_ERR("LED device %s is not ready", led2.port->name);
		return;
	}
	if (!device_is_ready(led3.port)) {
		LOG_ERR("LED device %s is not ready", led3.port->name);
    87b4:	b088      	sub	sp, #32
    87b6:	6823      	ldr	r3, [r4, #0]
    87b8:	466a      	mov	r2, sp
    87ba:	4968      	ldr	r1, [pc, #416]	; (895c <main+0x1d8>)
    87bc:	7716      	strb	r6, [r2, #28]
    87be:	e9c2 1305 	strd	r1, r3, [r2, #20]
    87c2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    87c6:	4b66      	ldr	r3, [pc, #408]	; (8960 <main+0x1dc>)
    87c8:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Failed to configure the LED pin, error: %d", ret);
		return;
	}
	ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT);
	if (ret < 0) {
		LOG_ERR("Failed to configure the LED pin, error: %d", ret);
    87cc:	4861      	ldr	r0, [pc, #388]	; (8954 <main+0x1d0>)
    87ce:	f008 fe9b 	bl	11508 <z_log_msg_static_create.constprop.0>
    87d2:	46ad      	mov	sp, r5
		ret = gpio_pin_toggle(led0.port, led0.pin);
		if (ret < 0) {
			LOG_ERR("Failed to toggle the LED pin, error: %d", ret);
		}
	}
    87d4:	3720      	adds	r7, #32
    87d6:	46bd      	mov	sp, r7
    87d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87dc:	4620      	mov	r0, r4
    87de:	f00a f9ae 	bl	12b3e <z_device_is_ready>
	if (!device_is_ready(led1.port)) {
    87e2:	2800      	cmp	r0, #0
    87e4:	d0e6      	beq.n	87b4 <main+0x30>
    87e6:	4620      	mov	r0, r4
    87e8:	f00a f9a9 	bl	12b3e <z_device_is_ready>
	if (!device_is_ready(led2.port)) {
    87ec:	2800      	cmp	r0, #0
    87ee:	d0e1      	beq.n	87b4 <main+0x30>
    87f0:	4620      	mov	r0, r4
    87f2:	f00a f9a4 	bl	12b3e <z_device_is_ready>
	if (!device_is_ready(led3.port)) {
    87f6:	2800      	cmp	r0, #0
    87f8:	d0dc      	beq.n	87b4 <main+0x30>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    87fa:	485a      	ldr	r0, [pc, #360]	; (8964 <main+0x1e0>)
    87fc:	f007 fba8 	bl	ff50 <z_impl_device_get_binding>
	if (hid_dev == NULL) {
    8800:	4680      	mov	r8, r0
    8802:	b950      	cbnz	r0, 881a <main+0x96>
		LOG_ERR("Cannot get USB HID Device");
    8804:	4b58      	ldr	r3, [pc, #352]	; (8968 <main+0x1e4>)
    8806:	e9c7 6306 	strd	r6, r3, [r7, #24]
		LOG_ERR("Failed to enable USB");
    880a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    880e:	4851      	ldr	r0, [pc, #324]	; (8954 <main+0x1d0>)
    8810:	f107 0218 	add.w	r2, r7, #24
    8814:	f008 fe78 	bl	11508 <z_log_msg_static_create.constprop.0>
		return;
    8818:	e7dc      	b.n	87d4 <main+0x50>
	ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT);
    881a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    881e:	4853      	ldr	r0, [pc, #332]	; (896c <main+0x1e8>)
    8820:	f008 fe48 	bl	114b4 <gpio_pin_configure_dt>
	if (ret < 0) {
    8824:	2800      	cmp	r0, #0
    8826:	da0a      	bge.n	883e <main+0xba>
		LOG_ERR("Failed to configure the LED pin, error: %d", ret);
    8828:	b088      	sub	sp, #32
    882a:	466a      	mov	r2, sp
    882c:	4b50      	ldr	r3, [pc, #320]	; (8970 <main+0x1ec>)
    882e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8832:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8836:	2303      	movs	r3, #3
    8838:	f842 3f10 	str.w	r3, [r2, #16]!
    883c:	e7c6      	b.n	87cc <main+0x48>
	ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT);
    883e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8842:	484c      	ldr	r0, [pc, #304]	; (8974 <main+0x1f0>)
    8844:	f008 fe36 	bl	114b4 <gpio_pin_configure_dt>
	if (ret < 0) {
    8848:	2800      	cmp	r0, #0
    884a:	dbed      	blt.n	8828 <main+0xa4>
	ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT);
    884c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8850:	4849      	ldr	r0, [pc, #292]	; (8978 <main+0x1f4>)
    8852:	f008 fe2f 	bl	114b4 <gpio_pin_configure_dt>
	if (ret < 0) {
    8856:	2800      	cmp	r0, #0
    8858:	dbe6      	blt.n	8828 <main+0xa4>
	ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT);
    885a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    885e:	4847      	ldr	r0, [pc, #284]	; (897c <main+0x1f8>)
    8860:	f008 fe28 	bl	114b4 <gpio_pin_configure_dt>
	if (ret < 0) {
    8864:	2800      	cmp	r0, #0
    8866:	dbdf      	blt.n	8828 <main+0xa4>
	if (callbacks_configure(&sw0, &one_button, &callback[0], &def_val[0])) {
    8868:	4b45      	ldr	r3, [pc, #276]	; (8980 <main+0x1fc>)
    886a:	4a46      	ldr	r2, [pc, #280]	; (8984 <main+0x200>)
    886c:	4946      	ldr	r1, [pc, #280]	; (8988 <main+0x204>)
    886e:	4847      	ldr	r0, [pc, #284]	; (898c <main+0x208>)
    8870:	f7ff fefa 	bl	8668 <callbacks_configure>
    8874:	b120      	cbz	r0, 8880 <main+0xfc>
		LOG_ERR("Failed configuring one button callback.");
    8876:	4b46      	ldr	r3, [pc, #280]	; (8990 <main+0x20c>)
		LOG_ERR("Failed to enable USB");
    8878:	61fb      	str	r3, [r7, #28]
    887a:	2302      	movs	r3, #2
    887c:	61bb      	str	r3, [r7, #24]
    887e:	e7c4      	b.n	880a <main+0x86>
	if (callbacks_configure(&sw1, &two_button, &callback[1], &def_val[1])) {
    8880:	4b44      	ldr	r3, [pc, #272]	; (8994 <main+0x210>)
    8882:	4a45      	ldr	r2, [pc, #276]	; (8998 <main+0x214>)
    8884:	4945      	ldr	r1, [pc, #276]	; (899c <main+0x218>)
    8886:	4846      	ldr	r0, [pc, #280]	; (89a0 <main+0x21c>)
    8888:	f7ff feee 	bl	8668 <callbacks_configure>
    888c:	b108      	cbz	r0, 8892 <main+0x10e>
		LOG_ERR("Failed configuring two button callback.");
    888e:	4b45      	ldr	r3, [pc, #276]	; (89a4 <main+0x220>)
    8890:	e7f2      	b.n	8878 <main+0xf4>
	if (callbacks_configure(&sw2, &three_button, &callback[2], &def_val[2])) {
    8892:	4b45      	ldr	r3, [pc, #276]	; (89a8 <main+0x224>)
    8894:	4a45      	ldr	r2, [pc, #276]	; (89ac <main+0x228>)
    8896:	4946      	ldr	r1, [pc, #280]	; (89b0 <main+0x22c>)
    8898:	4846      	ldr	r0, [pc, #280]	; (89b4 <main+0x230>)
    889a:	f7ff fee5 	bl	8668 <callbacks_configure>
    889e:	b108      	cbz	r0, 88a4 <main+0x120>
		LOG_ERR("Failed configuring three button callback.");
    88a0:	4b45      	ldr	r3, [pc, #276]	; (89b8 <main+0x234>)
    88a2:	e7e9      	b.n	8878 <main+0xf4>
	if (callbacks_configure(&sw3, &four_button, &callback[3], &def_val[3])) {
    88a4:	4b45      	ldr	r3, [pc, #276]	; (89bc <main+0x238>)
    88a6:	4a46      	ldr	r2, [pc, #280]	; (89c0 <main+0x23c>)
    88a8:	4946      	ldr	r1, [pc, #280]	; (89c4 <main+0x240>)
    88aa:	4847      	ldr	r0, [pc, #284]	; (89c8 <main+0x244>)
    88ac:	f7ff fedc 	bl	8668 <callbacks_configure>
    88b0:	4603      	mov	r3, r0
    88b2:	b108      	cbz	r0, 88b8 <main+0x134>
		LOG_ERR("Failed configuring four button callback.");
    88b4:	4b45      	ldr	r3, [pc, #276]	; (89cc <main+0x248>)
    88b6:	e7df      	b.n	8878 <main+0xf4>
	usb_hid_register_device(hid_dev, hid_report_desc, 
    88b8:	223f      	movs	r2, #63	; 0x3f
    88ba:	4640      	mov	r0, r8
    88bc:	4944      	ldr	r1, [pc, #272]	; (89d0 <main+0x24c>)
    88be:	f003 fd53 	bl	c368 <usb_hid_register_device>
	usb_hid_init(hid_dev);
    88c2:	4640      	mov	r0, r8
    88c4:	f009 fd5f 	bl	12386 <usb_hid_init>
	ret = usb_enable(status_cb);
    88c8:	4842      	ldr	r0, [pc, #264]	; (89d4 <main+0x250>)
    88ca:	f002 f893 	bl	a9f4 <usb_enable>
	if (ret != 0) {
    88ce:	2800      	cmp	r0, #0
    88d0:	d13b      	bne.n	894a <main+0x1c6>
	return z_impl_k_sem_take(sem, timeout);
    88d2:	4e41      	ldr	r6, [pc, #260]	; (89d8 <main+0x254>)
		report[KEYPAD_BTN_CODE_REPORT_POS] = status[KEYPAD_BTN_CODE_REPORT_POS];
    88d4:	4d41      	ldr	r5, [pc, #260]	; (89dc <main+0x258>)
			LOG_ERR("HID write error, %d", ret);
    88d6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 89e0 <main+0x25c>
    88da:	f04f 32ff 	mov.w	r2, #4294967295
    88de:	f04f 33ff 	mov.w	r3, #4294967295
    88e2:	4630      	mov	r0, r6
    88e4:	f007 fece 	bl	10684 <z_impl_k_sem_take>
		report[KEYPAD_BTN_CODE_REPORT_POS] = status[KEYPAD_BTN_CODE_REPORT_POS];
    88e8:	79eb      	ldrb	r3, [r5, #7]
		ret = hid_int_ep_write(hid_dev, report, sizeof(report), NULL);
    88ea:	2208      	movs	r2, #8
		report[KEYPAD_BTN_CODE_REPORT_POS] = status[KEYPAD_BTN_CODE_REPORT_POS];
    88ec:	71fb      	strb	r3, [r7, #7]
		ret = hid_int_ep_write(hid_dev, report, sizeof(report), NULL);
    88ee:	4639      	mov	r1, r7
    88f0:	2300      	movs	r3, #0
    88f2:	4640      	mov	r0, r8
    88f4:	f003 fd4e 	bl	c394 <hid_int_ep_write>
		if (ret) {
    88f8:	b170      	cbz	r0, 8918 <main+0x194>
			LOG_ERR("HID write error, %d", ret);
    88fa:	46ea      	mov	sl, sp
    88fc:	b088      	sub	sp, #32
    88fe:	b088      	sub	sp, #32
    8900:	466a      	mov	r2, sp
    8902:	2303      	movs	r3, #3
    8904:	e9c2 9005 	strd	r9, r0, [r2, #20]
    8908:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    890c:	4811      	ldr	r0, [pc, #68]	; (8954 <main+0x1d0>)
    890e:	f842 3f10 	str.w	r3, [r2, #16]!
    8912:	f008 fdf9 	bl	11508 <z_log_msg_static_create.constprop.0>
    8916:	46d5      	mov	sp, sl
	return api->port_toggle_bits(port, pins);
    8918:	68a3      	ldr	r3, [r4, #8]
    891a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    891e:	695b      	ldr	r3, [r3, #20]
    8920:	480d      	ldr	r0, [pc, #52]	; (8958 <main+0x1d4>)
    8922:	4798      	blx	r3
		if (ret < 0) {
    8924:	2800      	cmp	r0, #0
    8926:	dad8      	bge.n	88da <main+0x156>
			LOG_ERR("Failed to toggle the LED pin, error: %d", ret);
    8928:	46ea      	mov	sl, sp
    892a:	b088      	sub	sp, #32
    892c:	b088      	sub	sp, #32
    892e:	466a      	mov	r2, sp
    8930:	4b2c      	ldr	r3, [pc, #176]	; (89e4 <main+0x260>)
    8932:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8936:	e9c2 3005 	strd	r3, r0, [r2, #20]
    893a:	2303      	movs	r3, #3
    893c:	4805      	ldr	r0, [pc, #20]	; (8954 <main+0x1d0>)
    893e:	f842 3f10 	str.w	r3, [r2, #16]!
    8942:	f008 fde1 	bl	11508 <z_log_msg_static_create.constprop.0>
    8946:	46d5      	mov	sp, sl
	while (true) {
    8948:	e7c7      	b.n	88da <main+0x156>
		LOG_ERR("Failed to enable USB");
    894a:	4b27      	ldr	r3, [pc, #156]	; (89e8 <main+0x264>)
    894c:	e794      	b.n	8878 <main+0xf4>
    894e:	bf00      	nop
    8950:	00013972 	.word	0x00013972
    8954:	00013554 	.word	0x00013554
    8958:	00013250 	.word	0x00013250
    895c:	00013987 	.word	0x00013987
    8960:	01000003 	.word	0x01000003
    8964:	000139a2 	.word	0x000139a2
    8968:	000139a8 	.word	0x000139a8
    896c:	000135d8 	.word	0x000135d8
    8970:	000139c2 	.word	0x000139c2
    8974:	000135e0 	.word	0x000135e0
    8978:	000135e8 	.word	0x000135e8
    897c:	000135f0 	.word	0x000135f0
    8980:	20009898 	.word	0x20009898
    8984:	20008940 	.word	0x20008940
    8988:	00008439 	.word	0x00008439
    898c:	000135f8 	.word	0x000135f8
    8990:	000139ed 	.word	0x000139ed
    8994:	20009899 	.word	0x20009899
    8998:	2000894c 	.word	0x2000894c
    899c:	000085dd 	.word	0x000085dd
    89a0:	00013600 	.word	0x00013600
    89a4:	00013a15 	.word	0x00013a15
    89a8:	2000989a 	.word	0x2000989a
    89ac:	20008958 	.word	0x20008958
    89b0:	00008551 	.word	0x00008551
    89b4:	00013608 	.word	0x00013608
    89b8:	00013a3d 	.word	0x00013a3d
    89bc:	2000989b 	.word	0x2000989b
    89c0:	20008964 	.word	0x20008964
    89c4:	000084c5 	.word	0x000084c5
    89c8:	00013610 	.word	0x00013610
    89cc:	00013a67 	.word	0x00013a67
    89d0:	00013ae6 	.word	0x00013ae6
    89d4:	0000842d 	.word	0x0000842d
    89d8:	20008138 	.word	0x20008138
    89dc:	2000989c 	.word	0x2000989c
    89e0:	00013aa5 	.word	0x00013aa5
    89e4:	00013ab9 	.word	0x00013ab9
    89e8:	00013a90 	.word	0x00013a90

000089ec <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    89ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89f0:	b093      	sub	sp, #76	; 0x4c
    89f2:	4604      	mov	r4, r0
    89f4:	461f      	mov	r7, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    89f6:	468b      	mov	fp, r1
{
    89f8:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    89fc:	9201      	str	r2, [sp, #4]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    89fe:	b949      	cbnz	r1, 8a14 <cbprintf_package_convert+0x28>
	buf += ros_nbr;
    8a00:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8a02:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    8a04:	7880      	ldrb	r0, [r0, #2]
    8a06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8a0a:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    8a0c:	45b3      	cmp	fp, r6
    8a0e:	d318      	bcc.n	8a42 <cbprintf_package_convert+0x56>
	return (size_t)(uintptr_t)(buf - start);
    8a10:	eba0 0b04 	sub.w	fp, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    8a14:	78a5      	ldrb	r5, [r4, #2]
    8a16:	9503      	str	r5, [sp, #12]
	ro_cpy = ros_nbr &&
    8a18:	b1e5      	cbz	r5, 8a54 <cbprintf_package_convert+0x68>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
    8a1a:	f00a 0301 	and.w	r3, sl, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    8a1e:	78e2      	ldrb	r2, [r4, #3]
    8a20:	9202      	str	r2, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
    8a22:	b112      	cbz	r2, 8a2a <cbprintf_package_convert+0x3e>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    8a24:	f01a 0f02 	tst.w	sl, #2
    8a28:	d116      	bne.n	8a58 <cbprintf_package_convert+0x6c>
    8a2a:	b9ab      	cbnz	r3, 8a58 <cbprintf_package_convert+0x6c>
		if (cb) {
    8a2c:	9b01      	ldr	r3, [sp, #4]
    8a2e:	b11b      	cbz	r3, 8a38 <cbprintf_package_convert+0x4c>
			cb(in_packaged, in_len, ctx);
    8a30:	463a      	mov	r2, r7
    8a32:	4659      	mov	r1, fp
    8a34:	4620      	mov	r0, r4
    8a36:	4798      	blx	r3
		}

		return in_len;
    8a38:	465e      	mov	r6, fp

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    8a3a:	4630      	mov	r0, r6
    8a3c:	b013      	add	sp, #76	; 0x4c
    8a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    8a42:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    8a44:	4628      	mov	r0, r5
    8a46:	f009 fc64 	bl	12312 <strlen>
    8a4a:	3001      	adds	r0, #1
    8a4c:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
    8a4e:	f10b 0b01 	add.w	fp, fp, #1
    8a52:	e7db      	b.n	8a0c <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
    8a54:	462b      	mov	r3, r5
    8a56:	e7e2      	b.n	8a1e <cbprintf_package_convert+0x32>
	args_size = in_desc->len * sizeof(int);
    8a58:	f894 9000 	ldrb.w	r9, [r4]
    8a5c:	ea4f 0289 	mov.w	r2, r9, lsl #2
    8a60:	9204      	str	r2, [sp, #16]
	if (cb == NULL) {
    8a62:	9a01      	ldr	r2, [sp, #4]
	uint8_t *str_pos = &buf[args_size];
    8a64:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	if (cb == NULL) {
    8a68:	2a00      	cmp	r2, #0
    8a6a:	d15a      	bne.n	8b22 <cbprintf_package_convert+0x136>
		out_len = (int)in_len;
    8a6c:	465e      	mov	r6, fp
		if (ro_cpy) {
    8a6e:	b393      	cbz	r3, 8ad6 <cbprintf_package_convert+0xea>
	size_t strl_cnt = 0;
    8a70:	4617      	mov	r7, r2
    8a72:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
    8a74:	45a9      	cmp	r9, r5
    8a76:	d11c      	bne.n	8ab2 <cbprintf_package_convert+0xc6>
		bool drop_ro_str_pos = !(flags &
    8a78:	464d      	mov	r5, r9
    8a7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    8a7e:	f8df c234 	ldr.w	ip, [pc, #564]	; 8cb4 <cbprintf_package_convert+0x2c8>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    8a82:	498d      	ldr	r1, [pc, #564]	; (8cb8 <cbprintf_package_convert+0x2cc>)
		bool drop_ro_str_pos = !(flags &
    8a84:	f00a 0b05 	and.w	fp, sl, #5
		for (int i = 0; i < rws_nbr; i++) {
    8a88:	44c8      	add	r8, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    8a8a:	f00a 0202 	and.w	r2, sl, #2
		for (int i = 0; i < rws_nbr; i++) {
    8a8e:	45a8      	cmp	r8, r5
    8a90:	d0d3      	beq.n	8a3a <cbprintf_package_convert+0x4e>
			const char *str = *(const char **)&buf32[*str_pos];
    8a92:	f815 0b01 	ldrb.w	r0, [r5], #1
    8a96:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    8a9a:	4560      	cmp	r0, ip
    8a9c:	d324      	bcc.n	8ae8 <cbprintf_package_convert+0xfc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    8a9e:	4288      	cmp	r0, r1
    8aa0:	d222      	bcs.n	8ae8 <cbprintf_package_convert+0xfc>
    8aa2:	f01a 0f01 	tst.w	sl, #1
    8aa6:	d139      	bne.n	8b1c <cbprintf_package_convert+0x130>
			if (is_ro && drop_ro_str_pos) {
    8aa8:	f1bb 0f00 	cmp.w	fp, #0
    8aac:	d1ef      	bne.n	8a8e <cbprintf_package_convert+0xa2>
				out_len--;
    8aae:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
    8ab0:	e7ed      	b.n	8a8e <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
    8ab2:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
    8ab6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    8aba:	f009 fc2a 	bl	12312 <strlen>
				if (strl && strl_cnt < strl_len) {
    8abe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		return 1 + strlen(str);
    8ac0:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8ac2:	b133      	cbz	r3, 8ad2 <cbprintf_package_convert+0xe6>
    8ac4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    8ac6:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
    8ac8:	bf3e      	ittt	cc
    8aca:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
    8acc:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
    8ad0:	3701      	addcc	r7, #1
				out_len += len;
    8ad2:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
    8ad4:	e7ce      	b.n	8a74 <cbprintf_package_convert+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    8ad6:	b12d      	cbz	r5, 8ae4 <cbprintf_package_convert+0xf8>
    8ad8:	f01a 0704 	ands.w	r7, sl, #4
    8adc:	d0cc      	beq.n	8a78 <cbprintf_package_convert+0x8c>
	size_t strl_cnt = 0;
    8ade:	461f      	mov	r7, r3
				str_pos += ros_nbr;
    8ae0:	44a9      	add	r9, r5
    8ae2:	e7c9      	b.n	8a78 <cbprintf_package_convert+0x8c>
	size_t strl_cnt = 0;
    8ae4:	462f      	mov	r7, r5
    8ae6:	e7c7      	b.n	8a78 <cbprintf_package_convert+0x8c>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    8ae8:	2a00      	cmp	r2, #0
    8aea:	d0d0      	beq.n	8a8e <cbprintf_package_convert+0xa2>
    8aec:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
    8af0:	9201      	str	r2, [sp, #4]
    8af2:	f009 fc0e 	bl	12312 <strlen>
				if (strl && strl_cnt < strl_len) {
    8af6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8af8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8cb4 <cbprintf_package_convert+0x2c8>
    8afc:	9a01      	ldr	r2, [sp, #4]
    8afe:	496e      	ldr	r1, [pc, #440]	; (8cb8 <cbprintf_package_convert+0x2cc>)
		return 1 + strlen(str);
    8b00:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8b02:	b133      	cbz	r3, 8b12 <cbprintf_package_convert+0x126>
    8b04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    8b06:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
    8b08:	bf3e      	ittt	cc
    8b0a:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
    8b0c:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
    8b10:	3701      	addcc	r7, #1
				out_len += len;
    8b12:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
    8b14:	f1b9 0f00 	cmp.w	r9, #0
    8b18:	d0b9      	beq.n	8a8e <cbprintf_package_convert+0xa2>
    8b1a:	e7c5      	b.n	8aa8 <cbprintf_package_convert+0xbc>
    8b1c:	f04f 0901 	mov.w	r9, #1
    8b20:	e7e6      	b.n	8af0 <cbprintf_package_convert+0x104>
	if (ro_cpy) {
    8b22:	2b00      	cmp	r3, #0
    8b24:	f040 80b9 	bne.w	8c9a <cbprintf_package_convert+0x2ae>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    8b28:	b125      	cbz	r5, 8b34 <cbprintf_package_convert+0x148>
    8b2a:	f01a 0f04 	tst.w	sl, #4
    8b2e:	f040 80bc 	bne.w	8caa <cbprintf_package_convert+0x2be>
		keep_cnt = 0;
    8b32:	461d      	mov	r5, r3
    8b34:	46a8      	mov	r8, r5
	str_pos += ros_nbr;
    8b36:	9b03      	ldr	r3, [sp, #12]
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
    8b38:	f00a 0001 	and.w	r0, sl, #1
	str_pos += ros_nbr;
    8b3c:	4499      	add	r9, r3
	for (int i = 0; i < rws_nbr; i++) {
    8b3e:	464a      	mov	r2, r9
    8b40:	9b02      	ldr	r3, [sp, #8]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    8b42:	f00a 0e02 	and.w	lr, sl, #2
    8b46:	eb03 0c09 	add.w	ip, r3, r9
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    8b4a:	f00a 0304 	and.w	r3, sl, #4
    8b4e:	9305      	str	r3, [sp, #20]
	for (int i = 0; i < rws_nbr; i++) {
    8b50:	4594      	cmp	ip, r2
    8b52:	d14f      	bne.n	8bf4 <cbprintf_package_convert+0x208>
    8b54:	9b02      	ldr	r3, [sp, #8]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    8b56:	f01a 0f02 	tst.w	sl, #2
    8b5a:	444b      	add	r3, r9
    8b5c:	9306      	str	r3, [sp, #24]
	out_desc.len = in_desc->len;
    8b5e:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    8b60:	bf08      	it	eq
    8b62:	46c4      	moveq	ip, r8
	out_desc.len = in_desc->len;
    8b64:	9305      	str	r3, [sp, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8b66:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    8b68:	bf18      	it	ne
    8b6a:	f04f 0c00 	movne.w	ip, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8b6e:	195a      	adds	r2, r3, r5
    8b70:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    8b72:	2800      	cmp	r0, #0
    8b74:	d160      	bne.n	8c38 <cbprintf_package_convert+0x24c>
    8b76:	f01a 0f04 	tst.w	sl, #4
    8b7a:	bf14      	ite	ne
    8b7c:	4641      	movne	r1, r8
    8b7e:	2100      	moveq	r1, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    8b80:	f894 a002 	ldrb.w	sl, [r4, #2]
    8b84:	78e6      	ldrb	r6, [r4, #3]
    8b86:	9307      	str	r3, [sp, #28]
	*in_desc = out_desc;
    8b88:	7062      	strb	r2, [r4, #1]
    8b8a:	70a1      	strb	r1, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
    8b8c:	463a      	mov	r2, r7
    8b8e:	4620      	mov	r0, r4
    8b90:	9904      	ldr	r1, [sp, #16]
    8b92:	9b01      	ldr	r3, [sp, #4]
	*in_desc = out_desc;
    8b94:	f884 c003 	strb.w	ip, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    8b98:	4798      	blx	r3
	if (rv < 0) {
    8b9a:	f1b0 0900 	subs.w	r9, r0, #0
    8b9e:	db78      	blt.n	8c92 <cbprintf_package_convert+0x2a6>
	*in_desc = in_desc_backup;
    8ba0:	9b05      	ldr	r3, [sp, #20]
    8ba2:	70e6      	strb	r6, [r4, #3]
    8ba4:	7023      	strb	r3, [r4, #0]
    8ba6:	9b07      	ldr	r3, [sp, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8ba8:	463a      	mov	r2, r7
	*in_desc = in_desc_backup;
    8baa:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8bac:	4641      	mov	r1, r8
    8bae:	9b01      	ldr	r3, [sp, #4]
	*in_desc = in_desc_backup;
    8bb0:	f884 a002 	strb.w	sl, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8bb4:	a80e      	add	r0, sp, #56	; 0x38
    8bb6:	4798      	blx	r3
	if (rv < 0) {
    8bb8:	1e06      	subs	r6, r0, #0
    8bba:	f6ff af3e 	blt.w	8a3a <cbprintf_package_convert+0x4e>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    8bbe:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    8bc2:	4419      	add	r1, r3
    8bc4:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
    8bc6:	463a      	mov	r2, r7
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    8bc8:	4419      	add	r1, r3
	rv = cb(str_pos, strs_len, ctx);
    8bca:	9806      	ldr	r0, [sp, #24]
    8bcc:	9b01      	ldr	r3, [sp, #4]
    8bce:	ebab 0101 	sub.w	r1, fp, r1
    8bd2:	4798      	blx	r3
	if (rv < 0) {
    8bd4:	2800      	cmp	r0, #0
    8bd6:	db5e      	blt.n	8c96 <cbprintf_package_convert+0x2aa>
	out_len += rv;
    8bd8:	444e      	add	r6, r9
	for (int i = 0; i < scpy_cnt; i++) {
    8bda:	f04f 0900 	mov.w	r9, #0
	out_len += rv;
    8bde:	4406      	add	r6, r0
		uint8_t loc = cpy_str_pos[i];
    8be0:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
	for (int i = 0; i < scpy_cnt; i++) {
    8be4:	454d      	cmp	r5, r9
    8be6:	dc29      	bgt.n	8c3c <cbprintf_package_convert+0x250>
	(void)cb(NULL, 0, ctx);
    8be8:	2100      	movs	r1, #0
    8bea:	463a      	mov	r2, r7
    8bec:	4608      	mov	r0, r1
    8bee:	9b01      	ldr	r3, [sp, #4]
    8bf0:	4798      	blx	r3
	return out_len;
    8bf2:	e722      	b.n	8a3a <cbprintf_package_convert+0x4e>
		const char *str = *(const char **)&buf32[*str_pos];
    8bf4:	f812 3b01 	ldrb.w	r3, [r2], #1
    8bf8:	4e2e      	ldr	r6, [pc, #184]	; (8cb4 <cbprintf_package_convert+0x2c8>)
    8bfa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    8bfe:	42b1      	cmp	r1, r6
    8c00:	d302      	bcc.n	8c08 <cbprintf_package_convert+0x21c>
    8c02:	4e2d      	ldr	r6, [pc, #180]	; (8cb8 <cbprintf_package_convert+0x2cc>)
    8c04:	42b1      	cmp	r1, r6
    8c06:	d30b      	bcc.n	8c20 <cbprintf_package_convert+0x234>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    8c08:	f1be 0f00 	cmp.w	lr, #0
    8c0c:	d109      	bne.n	8c22 <cbprintf_package_convert+0x236>
				keep_str_pos[keep_cnt++] = *str_pos;
    8c0e:	ae12      	add	r6, sp, #72	; 0x48
    8c10:	f108 0101 	add.w	r1, r8, #1
    8c14:	44b0      	add	r8, r6
    8c16:	f808 3c10 	strb.w	r3, [r8, #-16]
    8c1a:	fa5f f881 	uxtb.w	r8, r1
	for (int i = 0; i < rws_nbr; i++) {
    8c1e:	e797      	b.n	8b50 <cbprintf_package_convert+0x164>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    8c20:	b130      	cbz	r0, 8c30 <cbprintf_package_convert+0x244>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    8c22:	ae12      	add	r6, sp, #72	; 0x48
    8c24:	1c69      	adds	r1, r5, #1
    8c26:	4435      	add	r5, r6
    8c28:	f805 3c20 	strb.w	r3, [r5, #-32]
    8c2c:	b2cd      	uxtb	r5, r1
    8c2e:	e78f      	b.n	8b50 <cbprintf_package_convert+0x164>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	2900      	cmp	r1, #0
    8c34:	d08c      	beq.n	8b50 <cbprintf_package_convert+0x164>
    8c36:	e7ea      	b.n	8c0e <cbprintf_package_convert+0x222>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    8c38:	2100      	movs	r1, #0
    8c3a:	e7a1      	b.n	8b80 <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
    8c3c:	f819 300b 	ldrb.w	r3, [r9, fp]
		const char *str = *(const char **)&buf32[loc];
    8c40:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    8c44:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		uint16_t str_len = strl ? strl[i] : 0;
    8c48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8c4a:	b1fb      	cbz	r3, 8c8c <cbprintf_package_convert+0x2a0>
    8c4c:	f833 8019 	ldrh.w	r8, [r3, r9, lsl #1]
		rv = cb(&loc, 1, ctx);
    8c50:	463a      	mov	r2, r7
    8c52:	2101      	movs	r1, #1
    8c54:	9b01      	ldr	r3, [sp, #4]
    8c56:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    8c5a:	4798      	blx	r3
		if (rv < 0) {
    8c5c:	2800      	cmp	r0, #0
    8c5e:	db1a      	blt.n	8c96 <cbprintf_package_convert+0x2aa>
		out_len += rv;
    8c60:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    8c62:	f1b8 0f00 	cmp.w	r8, #0
    8c66:	d106      	bne.n	8c76 <cbprintf_package_convert+0x28a>
    8c68:	4650      	mov	r0, sl
    8c6a:	f009 fb52 	bl	12312 <strlen>
    8c6e:	f100 0801 	add.w	r8, r0, #1
    8c72:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    8c76:	463a      	mov	r2, r7
    8c78:	4641      	mov	r1, r8
    8c7a:	4650      	mov	r0, sl
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	4798      	blx	r3
		if (rv < 0) {
    8c80:	2800      	cmp	r0, #0
    8c82:	db08      	blt.n	8c96 <cbprintf_package_convert+0x2aa>
		out_len += rv;
    8c84:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
    8c86:	f109 0901 	add.w	r9, r9, #1
    8c8a:	e7ab      	b.n	8be4 <cbprintf_package_convert+0x1f8>
		uint16_t str_len = strl ? strl[i] : 0;
    8c8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
    8c90:	e7de      	b.n	8c50 <cbprintf_package_convert+0x264>
    8c92:	464e      	mov	r6, r9
    8c94:	e6d1      	b.n	8a3a <cbprintf_package_convert+0x4e>
    8c96:	4606      	mov	r6, r0
    8c98:	e6cf      	b.n	8a3a <cbprintf_package_convert+0x4e>
		keep_cnt = 0;
    8c9a:	f04f 0800 	mov.w	r8, #0
		dst = cpy_str_pos;
    8c9e:	a80a      	add	r0, sp, #40	; 0x28
		memcpy(dst, str_pos, ros_nbr);
    8ca0:	4649      	mov	r1, r9
    8ca2:	9a03      	ldr	r2, [sp, #12]
    8ca4:	f009 fb51 	bl	1234a <memcpy>
    8ca8:	e745      	b.n	8b36 <cbprintf_package_convert+0x14a>
    8caa:	46a8      	mov	r8, r5
		dst = keep_str_pos;
    8cac:	a80e      	add	r0, sp, #56	; 0x38
		scpy_cnt = 0;
    8cae:	461d      	mov	r5, r3
    8cb0:	e7f6      	b.n	8ca0 <cbprintf_package_convert+0x2b4>
    8cb2:	bf00      	nop
    8cb4:	000131a8 	.word	0x000131a8
    8cb8:	00014894 	.word	0x00014894

00008cbc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    8cbc:	4b01      	ldr	r3, [pc, #4]	; (8cc4 <char_out+0x8>)
    8cbe:	681b      	ldr	r3, [r3, #0]
    8cc0:	4718      	bx	r3
    8cc2:	bf00      	nop
    8cc4:	20008000 	.word	0x20008000

00008cc8 <__printk_hook_install>:
	_char_out = fn;
    8cc8:	4b01      	ldr	r3, [pc, #4]	; (8cd0 <__printk_hook_install+0x8>)
    8cca:	6018      	str	r0, [r3, #0]
}
    8ccc:	4770      	bx	lr
    8cce:	bf00      	nop
    8cd0:	20008000 	.word	0x20008000

00008cd4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    8cd4:	b507      	push	{r0, r1, r2, lr}
    8cd6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8cd8:	2100      	movs	r1, #0
    8cda:	4602      	mov	r2, r0
    8cdc:	9100      	str	r1, [sp, #0]
    8cde:	4803      	ldr	r0, [pc, #12]	; (8cec <vprintk+0x18>)
    8ce0:	f000 f8fc 	bl	8edc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    8ce4:	b003      	add	sp, #12
    8ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    8cea:	bf00      	nop
    8cec:	00008cbd 	.word	0x00008cbd

00008cf0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    8cf0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    8cf2:	2500      	movs	r5, #0
{
    8cf4:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    8cf6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    8cfa:	4604      	mov	r4, r0
    8cfc:	9500      	str	r5, [sp, #0]
    8cfe:	a903      	add	r1, sp, #12
    8d00:	4805      	ldr	r0, [pc, #20]	; (8d18 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    8d02:	9505      	str	r5, [sp, #20]
    8d04:	f000 f8ea 	bl	8edc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    8d08:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    8d0c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    8d0e:	bfb8      	it	lt
    8d10:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    8d12:	b007      	add	sp, #28
    8d14:	bd30      	pop	{r4, r5, pc}
    8d16:	bf00      	nop
    8d18:	000115a9 	.word	0x000115a9

00008d1c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8d20:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    8d24:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8d26:	f019 0808 	ands.w	r8, r9, #8
{
    8d2a:	4693      	mov	fp, r2
	if (processing) {
    8d2c:	d00d      	beq.n	8d4a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    8d2e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    8d30:	bf0c      	ite	eq
    8d32:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    8d36:	f049 0920 	orrne.w	r9, r9, #32
    8d3a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    8d3e:	f38b 8811 	msr	BASEPRI, fp
    8d42:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    8d46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8d4a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    8d4e:	2902      	cmp	r1, #2
    8d50:	d107      	bne.n	8d62 <process_event+0x46>
			evt = process_recheck(mgr);
    8d52:	4620      	mov	r0, r4
    8d54:	f008 fc6f 	bl	11636 <process_recheck>
		if (evt == EVT_NOP) {
    8d58:	2800      	cmp	r0, #0
    8d5a:	d0f0      	beq.n	8d3e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    8d5c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8d5e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    8d60:	d14e      	bne.n	8e00 <process_event+0xe4>
			res = mgr->last_res;
    8d62:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8d64:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    8d66:	2f00      	cmp	r7, #0
    8d68:	da15      	bge.n	8d96 <process_event+0x7a>
		*clients = mgr->clients;
    8d6a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8d6c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    8d70:	e9c4 8800 	strd	r8, r8, [r4]
    8d74:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    8d78:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    8d7a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8d7c:	8b21      	ldrh	r1, [r4, #24]
    8d7e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8d82:	45ca      	cmp	sl, r9
    8d84:	d002      	beq.n	8d8c <process_event+0x70>
		if (do_monitors
    8d86:	68a3      	ldr	r3, [r4, #8]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d15a      	bne.n	8e42 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    8d8c:	b90d      	cbnz	r5, 8d92 <process_event+0x76>
		    || (transit != NULL)) {
    8d8e:	2e00      	cmp	r6, #0
    8d90:	d071      	beq.n	8e76 <process_event+0x15a>
    8d92:	2300      	movs	r3, #0
    8d94:	e056      	b.n	8e44 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8d96:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    8d9a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8d9c:	2a01      	cmp	r2, #1
    8d9e:	d81e      	bhi.n	8dde <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8da0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    8da4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8da6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8da8:	b289      	uxth	r1, r1
    8daa:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    8dae:	d10a      	bne.n	8dc6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    8db0:	b13d      	cbz	r5, 8dc2 <process_event+0xa6>
    8db2:	462a      	mov	r2, r5
    8db4:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    8db6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    8db8:	3301      	adds	r3, #1
    8dba:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    8dbc:	2a00      	cmp	r2, #0
    8dbe:	d1fa      	bne.n	8db6 <process_event+0x9a>
    8dc0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8dc2:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8dc6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8dc8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8dca:	f008 fc34 	bl	11636 <process_recheck>
    8dce:	4606      	mov	r6, r0
    8dd0:	2800      	cmp	r0, #0
    8dd2:	d0d3      	beq.n	8d7c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8dd4:	8b23      	ldrh	r3, [r4, #24]
    8dd6:	f043 0320 	orr.w	r3, r3, #32
    8dda:	8323      	strh	r3, [r4, #24]
    8ddc:	e7cd      	b.n	8d7a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8dde:	2b04      	cmp	r3, #4
    8de0:	d10c      	bne.n	8dfc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8de2:	f021 0107 	bic.w	r1, r1, #7
    8de6:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    8de8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8dea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8dec:	f008 fc23 	bl	11636 <process_recheck>
    8df0:	4605      	mov	r5, r0
    8df2:	2800      	cmp	r0, #0
    8df4:	d0c1      	beq.n	8d7a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8df6:	f041 0120 	orr.w	r1, r1, #32
    8dfa:	8321      	strh	r1, [r4, #24]
    8dfc:	2500      	movs	r5, #0
    8dfe:	e7bc      	b.n	8d7a <process_event+0x5e>
		} else if (evt == EVT_START) {
    8e00:	2803      	cmp	r0, #3
    8e02:	d109      	bne.n	8e18 <process_event+0xfc>
			transit = mgr->transitions->start;
    8e04:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e06:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    8e0a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e0c:	f043 0306 	orr.w	r3, r3, #6
}
    8e10:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    8e12:	8323      	strh	r3, [r4, #24]
		res = 0;
    8e14:	462f      	mov	r7, r5
    8e16:	e7b1      	b.n	8d7c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    8e18:	2804      	cmp	r0, #4
    8e1a:	d106      	bne.n	8e2a <process_event+0x10e>
			transit = mgr->transitions->stop;
    8e1c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e1e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    8e22:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e24:	f043 0304 	orr.w	r3, r3, #4
    8e28:	e7f2      	b.n	8e10 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    8e2a:	2805      	cmp	r0, #5
    8e2c:	d106      	bne.n	8e3c <process_event+0x120>
			transit = mgr->transitions->reset;
    8e2e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e30:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    8e34:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e36:	f043 0305 	orr.w	r3, r3, #5
    8e3a:	e7e9      	b.n	8e10 <process_event+0xf4>
    8e3c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    8e3e:	462e      	mov	r6, r5
    8e40:	e7e8      	b.n	8e14 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    8e42:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8e44:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8e48:	8321      	strh	r1, [r4, #24]
    8e4a:	f38b 8811 	msr	BASEPRI, fp
    8e4e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    8e52:	b9fb      	cbnz	r3, 8e94 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    8e54:	bb85      	cbnz	r5, 8eb8 <process_event+0x19c>
			if (transit != NULL) {
    8e56:	b116      	cbz	r6, 8e5e <process_event+0x142>
				transit(mgr, transition_complete);
    8e58:	4620      	mov	r0, r4
    8e5a:	491f      	ldr	r1, [pc, #124]	; (8ed8 <process_event+0x1bc>)
    8e5c:	47b0      	blx	r6
	__asm__ volatile(
    8e5e:	f04f 0320 	mov.w	r3, #32
    8e62:	f3ef 8b11 	mrs	fp, BASEPRI
    8e66:	f383 8812 	msr	BASEPRI_MAX, r3
    8e6a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8e6e:	8b23      	ldrh	r3, [r4, #24]
    8e70:	f023 0308 	bic.w	r3, r3, #8
    8e74:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    8e76:	8b23      	ldrh	r3, [r4, #24]
    8e78:	06da      	lsls	r2, r3, #27
    8e7a:	d525      	bpl.n	8ec8 <process_event+0x1ac>
			evt = EVT_COMPLETE;
    8e7c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8e7e:	f023 0310 	bic.w	r3, r3, #16
    8e82:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8e84:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    8e88:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    8e8c:	2900      	cmp	r1, #0
    8e8e:	f47f af5e 	bne.w	8d4e <process_event+0x32>
out:
    8e92:	e754      	b.n	8d3e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    8e94:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8e96:	2900      	cmp	r1, #0
    8e98:	d0dc      	beq.n	8e54 <process_event+0x138>
	return node->next;
    8e9a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    8e9e:	463b      	mov	r3, r7
    8ea0:	4652      	mov	r2, sl
    8ea2:	4620      	mov	r0, r4
    8ea4:	f8d1 b004 	ldr.w	fp, [r1, #4]
    8ea8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8eaa:	f1b9 0f00 	cmp.w	r9, #0
    8eae:	d0d1      	beq.n	8e54 <process_event+0x138>
    8eb0:	4649      	mov	r1, r9
    8eb2:	f8d9 9000 	ldr.w	r9, [r9]
    8eb6:	e7f2      	b.n	8e9e <process_event+0x182>
    8eb8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    8eba:	463b      	mov	r3, r7
    8ebc:	4652      	mov	r2, sl
    8ebe:	4620      	mov	r0, r4
    8ec0:	682d      	ldr	r5, [r5, #0]
    8ec2:	f008 fbd4 	bl	1166e <notify_one>
    8ec6:	e7c5      	b.n	8e54 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    8ec8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8ecc:	bf1e      	ittt	ne
    8ece:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    8ed2:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8ed4:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    8ed6:	e7d5      	b.n	8e84 <process_event+0x168>
    8ed8:	0001169b 	.word	0x0001169b

00008edc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ee0:	468b      	mov	fp, r1
    8ee2:	4692      	mov	sl, r2
    8ee4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8ee6:	2500      	movs	r5, #0
{
    8ee8:	b091      	sub	sp, #68	; 0x44
    8eea:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8eec:	f89a 0000 	ldrb.w	r0, [sl]
    8ef0:	b908      	cbnz	r0, 8ef6 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8ef2:	4628      	mov	r0, r5
    8ef4:	e363      	b.n	95be <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
    8ef6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8ef8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    8efc:	d007      	beq.n	8f0e <z_cbvprintf_impl+0x32>
			OUTC('%');
    8efe:	4659      	mov	r1, fp
    8f00:	9b02      	ldr	r3, [sp, #8]
    8f02:	4798      	blx	r3
    8f04:	2800      	cmp	r0, #0
    8f06:	f2c0 835a 	blt.w	95be <z_cbvprintf_impl+0x6e2>
    8f0a:	3501      	adds	r5, #1
			break;
    8f0c:	e212      	b.n	9334 <z_cbvprintf_impl+0x458>
		} state = {
    8f0e:	2218      	movs	r2, #24
    8f10:	2100      	movs	r1, #0
    8f12:	a80a      	add	r0, sp, #40	; 0x28
    8f14:	f009 fa24 	bl	12360 <memset>
	if (*sp == '%') {
    8f18:	f89a 3001 	ldrb.w	r3, [sl, #1]
    8f1c:	2b25      	cmp	r3, #37	; 0x25
    8f1e:	d078      	beq.n	9012 <z_cbvprintf_impl+0x136>
    8f20:	2200      	movs	r2, #0
    8f22:	4610      	mov	r0, r2
    8f24:	4696      	mov	lr, r2
    8f26:	4694      	mov	ip, r2
    8f28:	4616      	mov	r6, r2
    8f2a:	4639      	mov	r1, r7
		switch (*sp) {
    8f2c:	f817 3b01 	ldrb.w	r3, [r7], #1
    8f30:	2b2b      	cmp	r3, #43	; 0x2b
    8f32:	f000 809d 	beq.w	9070 <z_cbvprintf_impl+0x194>
    8f36:	f200 8094 	bhi.w	9062 <z_cbvprintf_impl+0x186>
    8f3a:	2b20      	cmp	r3, #32
    8f3c:	f000 809b 	beq.w	9076 <z_cbvprintf_impl+0x19a>
    8f40:	2b23      	cmp	r3, #35	; 0x23
    8f42:	f000 809b 	beq.w	907c <z_cbvprintf_impl+0x1a0>
    8f46:	b12e      	cbz	r6, 8f54 <z_cbvprintf_impl+0x78>
    8f48:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    8f4c:	f046 0604 	orr.w	r6, r6, #4
    8f50:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    8f54:	f1bc 0f00 	cmp.w	ip, #0
    8f58:	d005      	beq.n	8f66 <z_cbvprintf_impl+0x8a>
    8f5a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    8f5e:	f046 0608 	orr.w	r6, r6, #8
    8f62:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    8f66:	f1be 0f00 	cmp.w	lr, #0
    8f6a:	d005      	beq.n	8f78 <z_cbvprintf_impl+0x9c>
    8f6c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    8f70:	f046 0610 	orr.w	r6, r6, #16
    8f74:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    8f78:	b128      	cbz	r0, 8f86 <z_cbvprintf_impl+0xaa>
    8f7a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    8f7e:	f040 0020 	orr.w	r0, r0, #32
    8f82:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    8f86:	b12a      	cbz	r2, 8f94 <z_cbvprintf_impl+0xb8>
    8f88:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    8f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    8f90:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    8f94:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    8f98:	f002 0044 	and.w	r0, r2, #68	; 0x44
    8f9c:	2844      	cmp	r0, #68	; 0x44
    8f9e:	d103      	bne.n	8fa8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    8fa0:	f36f 1286 	bfc	r2, #6, #1
    8fa4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    8fa8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    8fac:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    8fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    8fb2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    8fb6:	d17b      	bne.n	90b0 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
    8fb8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    8fbc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    8fbe:	f042 0201 	orr.w	r2, r2, #1
    8fc2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    8fc6:	781a      	ldrb	r2, [r3, #0]
    8fc8:	2a2e      	cmp	r2, #46	; 0x2e
    8fca:	bf0c      	ite	eq
    8fcc:	2101      	moveq	r1, #1
    8fce:	2100      	movne	r1, #0
    8fd0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8fd4:	f361 0241 	bfi	r2, r1, #1, #1
    8fd8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    8fdc:	d174      	bne.n	90c8 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
    8fde:	785a      	ldrb	r2, [r3, #1]
    8fe0:	2a2a      	cmp	r2, #42	; 0x2a
    8fe2:	d06a      	beq.n	90ba <z_cbvprintf_impl+0x1de>
	size_t val = 0;
    8fe4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    8fe6:	260a      	movs	r6, #10
	++sp;
    8fe8:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8fea:	4618      	mov	r0, r3
    8fec:	f810 2b01 	ldrb.w	r2, [r0], #1
    8ff0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    8ff4:	2f09      	cmp	r7, #9
    8ff6:	f240 808e 	bls.w	9116 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    8ffa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    8ffe:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    9000:	f3c2 0040 	ubfx	r0, r2, #1, #1
    9004:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    9008:	f361 0241 	bfi	r2, r1, #1, #1
    900c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    9010:	e05a      	b.n	90c8 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
    9012:	f10a 0702 	add.w	r7, sl, #2
    9016:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    901a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    901e:	07d9      	lsls	r1, r3, #31
    9020:	f140 8149 	bpl.w	92b6 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
    9024:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    9028:	f1b9 0f00 	cmp.w	r9, #0
    902c:	da07      	bge.n	903e <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
    902e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    9032:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    9036:	f042 0204 	orr.w	r2, r2, #4
    903a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    903e:	075a      	lsls	r2, r3, #29
    9040:	f140 8142 	bpl.w	92c8 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
    9044:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    9048:	f1b8 0f00 	cmp.w	r8, #0
    904c:	f280 8141 	bge.w	92d2 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
    9050:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9054:	f36f 0341 	bfc	r3, #1, #1
    9058:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    905c:	f04f 38ff 	mov.w	r8, #4294967295
    9060:	e137      	b.n	92d2 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
    9062:	2b2d      	cmp	r3, #45	; 0x2d
    9064:	d00c      	beq.n	9080 <z_cbvprintf_impl+0x1a4>
    9066:	2b30      	cmp	r3, #48	; 0x30
    9068:	f47f af6d 	bne.w	8f46 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
    906c:	2201      	movs	r2, #1
	} while (loop);
    906e:	e75c      	b.n	8f2a <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
    9070:	f04f 0c01 	mov.w	ip, #1
    9074:	e759      	b.n	8f2a <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
    9076:	f04f 0e01 	mov.w	lr, #1
    907a:	e756      	b.n	8f2a <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
    907c:	2001      	movs	r0, #1
    907e:	e754      	b.n	8f2a <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    9080:	2601      	movs	r6, #1
    9082:	e752      	b.n	8f2a <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
    9084:	4633      	mov	r3, r6
    9086:	fb0c 0202 	mla	r2, ip, r2, r0
    908a:	3a30      	subs	r2, #48	; 0x30
    908c:	461e      	mov	r6, r3
    908e:	f816 0b01 	ldrb.w	r0, [r6], #1
    9092:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9096:	2f09      	cmp	r7, #9
    9098:	d9f4      	bls.n	9084 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
    909a:	4299      	cmp	r1, r3
    909c:	d093      	beq.n	8fc6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    909e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    90a2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    90a4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    90a6:	f362 0141 	bfi	r1, r2, #1, #1
    90aa:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    90ae:	e78a      	b.n	8fc6 <z_cbvprintf_impl+0xea>
    90b0:	460b      	mov	r3, r1
	size_t val = 0;
    90b2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    90b4:	f04f 0c0a 	mov.w	ip, #10
    90b8:	e7e8      	b.n	908c <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
    90ba:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    90be:	3302      	adds	r3, #2
		conv->prec_star = true;
    90c0:	f042 0204 	orr.w	r2, r2, #4
    90c4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    90c8:	461f      	mov	r7, r3
    90ca:	f817 2b01 	ldrb.w	r2, [r7], #1
    90ce:	2a6c      	cmp	r2, #108	; 0x6c
    90d0:	d041      	beq.n	9156 <z_cbvprintf_impl+0x27a>
    90d2:	d825      	bhi.n	9120 <z_cbvprintf_impl+0x244>
    90d4:	2a68      	cmp	r2, #104	; 0x68
    90d6:	d02b      	beq.n	9130 <z_cbvprintf_impl+0x254>
    90d8:	2a6a      	cmp	r2, #106	; 0x6a
    90da:	d046      	beq.n	916a <z_cbvprintf_impl+0x28e>
    90dc:	2a4c      	cmp	r2, #76	; 0x4c
    90de:	d04c      	beq.n	917a <z_cbvprintf_impl+0x29e>
    90e0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    90e2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    90e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    90ea:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    90ec:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    90f0:	f200 80d9 	bhi.w	92a6 <z_cbvprintf_impl+0x3ca>
    90f4:	2a57      	cmp	r2, #87	; 0x57
    90f6:	d84d      	bhi.n	9194 <z_cbvprintf_impl+0x2b8>
    90f8:	2a41      	cmp	r2, #65	; 0x41
    90fa:	d003      	beq.n	9104 <z_cbvprintf_impl+0x228>
    90fc:	3a45      	subs	r2, #69	; 0x45
    90fe:	2a02      	cmp	r2, #2
    9100:	f200 80d1 	bhi.w	92a6 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    9104:	2204      	movs	r2, #4
    9106:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    910a:	f362 0302 	bfi	r3, r2, #0, #3
    910e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    9112:	2301      	movs	r3, #1
			break;
    9114:	e09e      	b.n	9254 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
    9116:	fb06 2101 	mla	r1, r6, r1, r2
    911a:	4603      	mov	r3, r0
    911c:	3930      	subs	r1, #48	; 0x30
    911e:	e764      	b.n	8fea <z_cbvprintf_impl+0x10e>
	switch (*sp) {
    9120:	2a74      	cmp	r2, #116	; 0x74
    9122:	d026      	beq.n	9172 <z_cbvprintf_impl+0x296>
    9124:	2a7a      	cmp	r2, #122	; 0x7a
    9126:	d1db      	bne.n	90e0 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
    9128:	2206      	movs	r2, #6
    912a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    912e:	e00d      	b.n	914c <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
    9130:	785a      	ldrb	r2, [r3, #1]
    9132:	2a68      	cmp	r2, #104	; 0x68
    9134:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    9138:	d106      	bne.n	9148 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
    913a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    913c:	f361 02c6 	bfi	r2, r1, #3, #4
    9140:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    9144:	1c9f      	adds	r7, r3, #2
    9146:	e7cc      	b.n	90e2 <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
    9148:	4613      	mov	r3, r2
    914a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    914c:	f362 03c6 	bfi	r3, r2, #3, #4
    9150:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    9154:	e7c5      	b.n	90e2 <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
    9156:	785a      	ldrb	r2, [r3, #1]
    9158:	2a6c      	cmp	r2, #108	; 0x6c
    915a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    915e:	d101      	bne.n	9164 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
    9160:	2104      	movs	r1, #4
    9162:	e7eb      	b.n	913c <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
    9164:	4613      	mov	r3, r2
    9166:	2203      	movs	r2, #3
    9168:	e7f0      	b.n	914c <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
    916a:	2205      	movs	r2, #5
    916c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9170:	e7ec      	b.n	914c <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
    9172:	2207      	movs	r2, #7
    9174:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9178:	e7e8      	b.n	914c <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
    917a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    917e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    9182:	f023 0302 	bic.w	r3, r3, #2
    9186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    918a:	f043 0302 	orr.w	r3, r3, #2
    918e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    9192:	e7a6      	b.n	90e2 <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
    9194:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    9198:	2920      	cmp	r1, #32
    919a:	f200 8084 	bhi.w	92a6 <z_cbvprintf_impl+0x3ca>
    919e:	a001      	add	r0, pc, #4	; (adr r0, 91a4 <z_cbvprintf_impl+0x2c8>)
    91a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    91a4:	00009269 	.word	0x00009269
    91a8:	000092a7 	.word	0x000092a7
    91ac:	000092a7 	.word	0x000092a7
    91b0:	000092a7 	.word	0x000092a7
    91b4:	000092a7 	.word	0x000092a7
    91b8:	000092a7 	.word	0x000092a7
    91bc:	000092a7 	.word	0x000092a7
    91c0:	000092a7 	.word	0x000092a7
    91c4:	000092a7 	.word	0x000092a7
    91c8:	00009105 	.word	0x00009105
    91cc:	000092a7 	.word	0x000092a7
    91d0:	00009269 	.word	0x00009269
    91d4:	00009229 	.word	0x00009229
    91d8:	00009105 	.word	0x00009105
    91dc:	00009105 	.word	0x00009105
    91e0:	00009105 	.word	0x00009105
    91e4:	000092a7 	.word	0x000092a7
    91e8:	00009229 	.word	0x00009229
    91ec:	000092a7 	.word	0x000092a7
    91f0:	000092a7 	.word	0x000092a7
    91f4:	000092a7 	.word	0x000092a7
    91f8:	000092a7 	.word	0x000092a7
    91fc:	00009271 	.word	0x00009271
    9200:	00009269 	.word	0x00009269
    9204:	0000928d 	.word	0x0000928d
    9208:	000092a7 	.word	0x000092a7
    920c:	000092a7 	.word	0x000092a7
    9210:	0000928d 	.word	0x0000928d
    9214:	000092a7 	.word	0x000092a7
    9218:	00009269 	.word	0x00009269
    921c:	000092a7 	.word	0x000092a7
    9220:	000092a7 	.word	0x000092a7
    9224:	00009269 	.word	0x00009269
		conv->specifier_cat = SPECIFIER_SINT;
    9228:	2001      	movs	r0, #1
    922a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    922e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9232:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9236:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9238:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    923c:	bf02      	ittt	eq
    923e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    9242:	f041 0101 	orreq.w	r1, r1, #1
    9246:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    924a:	2a63      	cmp	r2, #99	; 0x63
    924c:	d131      	bne.n	92b2 <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    924e:	3b00      	subs	r3, #0
    9250:	bf18      	it	ne
    9252:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    9254:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    9258:	f3c2 0140 	ubfx	r1, r2, #1, #1
    925c:	430b      	orrs	r3, r1
    925e:	f363 0241 	bfi	r2, r3, #1, #1
    9262:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    9266:	e6d8      	b.n	901a <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    9268:	2002      	movs	r0, #2
    926a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    926e:	e7de      	b.n	922e <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    9270:	2103      	movs	r1, #3
    9272:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    9276:	f003 0378 	and.w	r3, r3, #120	; 0x78
    927a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    927e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9282:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    9284:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    9288:	4143      	adcs	r3, r0
    928a:	e7e3      	b.n	9254 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    928c:	2103      	movs	r1, #3
    928e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    9292:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9296:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    929a:	bf14      	ite	ne
    929c:	2301      	movne	r3, #1
    929e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    92a0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    92a4:	e7d6      	b.n	9254 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
    92a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    92aa:	f043 0301 	orr.w	r3, r3, #1
    92ae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    92b2:	2300      	movs	r3, #0
    92b4:	e7ce      	b.n	9254 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
    92b6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    92ba:	2a00      	cmp	r2, #0
		int width = -1;
    92bc:	bfac      	ite	ge
    92be:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    92c2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    92c6:	e6ba      	b.n	903e <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
    92c8:	079b      	lsls	r3, r3, #30
    92ca:	f57f aec7 	bpl.w	905c <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
    92ce:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    92d2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    92d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    92d8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    92dc:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    92e0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    92e4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    92e6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    92ea:	d135      	bne.n	9358 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
    92ec:	1ecb      	subs	r3, r1, #3
    92ee:	2b04      	cmp	r3, #4
    92f0:	d822      	bhi.n	9338 <z_cbvprintf_impl+0x45c>
    92f2:	e8df f003 	tbb	[pc, r3]
    92f6:	0903      	.short	0x0903
    92f8:	2109      	.short	0x2109
    92fa:	21          	.byte	0x21
    92fb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    92fc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    9300:	17da      	asrs	r2, r3, #31
    9302:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    9306:	e006      	b.n	9316 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    9308:	3407      	adds	r4, #7
    930a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    930e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    9312:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    9316:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    931a:	f013 0603 	ands.w	r6, r3, #3
    931e:	d059      	beq.n	93d4 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
    9320:	463b      	mov	r3, r7
    9322:	4652      	mov	r2, sl
    9324:	4659      	mov	r1, fp
    9326:	9802      	ldr	r0, [sp, #8]
    9328:	f008 fc87 	bl	11c3a <outs>
    932c:	2800      	cmp	r0, #0
    932e:	f2c0 8146 	blt.w	95be <z_cbvprintf_impl+0x6e2>
    9332:	4405      	add	r5, r0
			continue;
    9334:	46ba      	mov	sl, r7
    9336:	e5d9      	b.n	8eec <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9338:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    933c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    933e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    9342:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    9346:	d102      	bne.n	934e <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
    9348:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    934c:	e7d8      	b.n	9300 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
    934e:	2902      	cmp	r1, #2
    9350:	d1e1      	bne.n	9316 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
    9352:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    9356:	e7d3      	b.n	9300 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9358:	2b02      	cmp	r3, #2
    935a:	d129      	bne.n	93b0 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
    935c:	1ecb      	subs	r3, r1, #3
    935e:	2b04      	cmp	r3, #4
    9360:	d813      	bhi.n	938a <z_cbvprintf_impl+0x4ae>
    9362:	e8df f003 	tbb	[pc, r3]
    9366:	0a03      	.short	0x0a03
    9368:	120a      	.short	0x120a
    936a:	12          	.byte	0x12
    936b:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    936c:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    936e:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    9370:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    9372:	920a      	str	r2, [sp, #40]	; 0x28
    9374:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    9376:	4604      	mov	r4, r0
    9378:	e7cd      	b.n	9316 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
    937a:	1de0      	adds	r0, r4, #7
    937c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    9380:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    9384:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    9388:	e7f5      	b.n	9376 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
    938a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    938e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    9390:	930a      	str	r3, [sp, #40]	; 0x28
    9392:	f04f 0300 	mov.w	r3, #0
    9396:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    9398:	d105      	bne.n	93a6 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
    939a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    939e:	930a      	str	r3, [sp, #40]	; 0x28
    93a0:	2300      	movs	r3, #0
    93a2:	930b      	str	r3, [sp, #44]	; 0x2c
    93a4:	e7b7      	b.n	9316 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
    93a6:	2902      	cmp	r1, #2
    93a8:	d1b5      	bne.n	9316 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
    93aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    93ae:	e7f6      	b.n	939e <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
    93b0:	2b04      	cmp	r3, #4
    93b2:	d109      	bne.n	93c8 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    93b4:	1de3      	adds	r3, r4, #7
    93b6:	f023 0307 	bic.w	r3, r3, #7
    93ba:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    93be:	e9d3 2300 	ldrd	r2, r3, [r3]
    93c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    93c6:	e7a6      	b.n	9316 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    93c8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    93ca:	bf04      	itt	eq
    93cc:	f854 3b04 	ldreq.w	r3, [r4], #4
    93d0:	930a      	streq	r3, [sp, #40]	; 0x28
    93d2:	e7a0      	b.n	9316 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
    93d4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    93d8:	2878      	cmp	r0, #120	; 0x78
    93da:	d8ab      	bhi.n	9334 <z_cbvprintf_impl+0x458>
    93dc:	2862      	cmp	r0, #98	; 0x62
    93de:	d822      	bhi.n	9426 <z_cbvprintf_impl+0x54a>
    93e0:	2825      	cmp	r0, #37	; 0x25
    93e2:	f43f ad8c 	beq.w	8efe <z_cbvprintf_impl+0x22>
    93e6:	2858      	cmp	r0, #88	; 0x58
    93e8:	d1a4      	bne.n	9334 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    93ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    93ee:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    93f2:	9300      	str	r3, [sp, #0]
    93f4:	aa0c      	add	r2, sp, #48	; 0x30
    93f6:	ab04      	add	r3, sp, #16
    93f8:	f008 fbd9 	bl	11bae <encode_uint>
    93fc:	4682      	mov	sl, r0
			if (precision >= 0) {
    93fe:	f1b8 0f00 	cmp.w	r8, #0
    9402:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    9406:	db0c      	blt.n	9422 <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
    9408:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    940c:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    9410:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9414:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    9416:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    941a:	d902      	bls.n	9422 <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
    941c:	eba8 0303 	sub.w	r3, r8, r3
    9420:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    9422:	4680      	mov	r8, r0
    9424:	e03e      	b.n	94a4 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
    9426:	3863      	subs	r0, #99	; 0x63
    9428:	2815      	cmp	r0, #21
    942a:	d883      	bhi.n	9334 <z_cbvprintf_impl+0x458>
    942c:	a201      	add	r2, pc, #4	; (adr r2, 9434 <z_cbvprintf_impl+0x558>)
    942e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9432:	bf00      	nop
    9434:	000094b5 	.word	0x000094b5
    9438:	00009519 	.word	0x00009519
    943c:	00009335 	.word	0x00009335
    9440:	00009335 	.word	0x00009335
    9444:	00009335 	.word	0x00009335
    9448:	00009335 	.word	0x00009335
    944c:	00009519 	.word	0x00009519
    9450:	00009335 	.word	0x00009335
    9454:	00009335 	.word	0x00009335
    9458:	00009335 	.word	0x00009335
    945c:	00009335 	.word	0x00009335
    9460:	00009573 	.word	0x00009573
    9464:	00009541 	.word	0x00009541
    9468:	00009545 	.word	0x00009545
    946c:	00009335 	.word	0x00009335
    9470:	00009335 	.word	0x00009335
    9474:	0000948d 	.word	0x0000948d
    9478:	00009335 	.word	0x00009335
    947c:	00009541 	.word	0x00009541
    9480:	00009335 	.word	0x00009335
    9484:	00009335 	.word	0x00009335
    9488:	00009541 	.word	0x00009541
			if (precision >= 0) {
    948c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    9490:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    9494:	db0a      	blt.n	94ac <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
    9496:	4641      	mov	r1, r8
    9498:	4650      	mov	r0, sl
    949a:	f008 ff41 	bl	12320 <strnlen>
		char sign = 0;
    949e:	2600      	movs	r6, #0
			bpe = bps + len;
    94a0:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    94a4:	f1ba 0f00 	cmp.w	sl, #0
    94a8:	d10c      	bne.n	94c4 <z_cbvprintf_impl+0x5e8>
    94aa:	e743      	b.n	9334 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
    94ac:	4650      	mov	r0, sl
    94ae:	f008 ff30 	bl	12312 <strlen>
    94b2:	e7f4      	b.n	949e <z_cbvprintf_impl+0x5c2>
			break;
    94b4:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    94b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    94b8:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    94bc:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    94c0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    94c4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    94c8:	b106      	cbz	r6, 94cc <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
    94ca:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    94cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    94d0:	06d0      	lsls	r0, r2, #27
    94d2:	d568      	bpl.n	95a6 <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
    94d4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    94d6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    94d8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    94da:	bf48      	it	mi
    94dc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    94de:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    94e0:	bf48      	it	mi
    94e2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    94e4:	f1b9 0f00 	cmp.w	r9, #0
    94e8:	dd76      	ble.n	95d8 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
    94ea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    94ee:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    94f2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    94f6:	9303      	str	r3, [sp, #12]
    94f8:	0753      	lsls	r3, r2, #29
    94fa:	d46d      	bmi.n	95d8 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
    94fc:	0650      	lsls	r0, r2, #25
    94fe:	d561      	bpl.n	95c4 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
    9500:	b146      	cbz	r6, 9514 <z_cbvprintf_impl+0x638>
						OUTC(sign);
    9502:	4659      	mov	r1, fp
    9504:	4630      	mov	r0, r6
    9506:	9b02      	ldr	r3, [sp, #8]
    9508:	4798      	blx	r3
    950a:	2800      	cmp	r0, #0
    950c:	db57      	blt.n	95be <z_cbvprintf_impl+0x6e2>
						sign = 0;
    950e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    9510:	3501      	adds	r5, #1
						sign = 0;
    9512:	461e      	mov	r6, r3
					pad = '0';
    9514:	2330      	movs	r3, #48	; 0x30
    9516:	e056      	b.n	95c6 <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
    9518:	071e      	lsls	r6, r3, #28
    951a:	d40f      	bmi.n	953c <z_cbvprintf_impl+0x660>
				sign = ' ';
    951c:	f013 0610 	ands.w	r6, r3, #16
    9520:	bf18      	it	ne
    9522:	2620      	movne	r6, #32
			sint = value->sint;
    9524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    9528:	2b00      	cmp	r3, #0
    952a:	f6bf af5e 	bge.w	93ea <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
    952e:	4252      	negs	r2, r2
    9530:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    9534:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9536:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    953a:	e756      	b.n	93ea <z_cbvprintf_impl+0x50e>
				sign = '+';
    953c:	262b      	movs	r6, #43	; 0x2b
    953e:	e7f1      	b.n	9524 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
    9540:	2600      	movs	r6, #0
    9542:	e752      	b.n	93ea <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
    9544:	980a      	ldr	r0, [sp, #40]	; 0x28
    9546:	b340      	cbz	r0, 959a <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9548:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    954c:	9300      	str	r3, [sp, #0]
    954e:	2100      	movs	r1, #0
    9550:	ab04      	add	r3, sp, #16
    9552:	aa0c      	add	r2, sp, #48	; 0x30
    9554:	f008 fb2b 	bl	11bae <encode_uint>
				conv->altform_0c = true;
    9558:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    955c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    955e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9562:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9566:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    956a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    956c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    9570:	e745      	b.n	93fe <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
    9572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    9574:	2907      	cmp	r1, #7
    9576:	f63f aedd 	bhi.w	9334 <z_cbvprintf_impl+0x458>
    957a:	e8df f001 	tbb	[pc, r1]
    957e:	040c      	.short	0x040c
    9580:	08080c06 	.word	0x08080c06
    9584:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9586:	701d      	strb	r5, [r3, #0]
		break;
    9588:	e6d4      	b.n	9334 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
    958a:	801d      	strh	r5, [r3, #0]
		break;
    958c:	e6d2      	b.n	9334 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    958e:	17ea      	asrs	r2, r5, #31
    9590:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    9594:	e6ce      	b.n	9334 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9596:	601d      	str	r5, [r3, #0]
		break;
    9598:	e6cc      	b.n	9334 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
    959a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9664 <z_cbvprintf_impl+0x788>
    959e:	4606      	mov	r6, r0
			bpe = bps + 5;
    95a0:	f10a 0805 	add.w	r8, sl, #5
    95a4:	e78e      	b.n	94c4 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
    95a6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    95a8:	bf48      	it	mi
    95aa:	3301      	addmi	r3, #1
    95ac:	e793      	b.n	94d6 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
    95ae:	4618      	mov	r0, r3
    95b0:	9303      	str	r3, [sp, #12]
    95b2:	4659      	mov	r1, fp
    95b4:	9b02      	ldr	r3, [sp, #8]
    95b6:	4798      	blx	r3
    95b8:	2800      	cmp	r0, #0
    95ba:	9b03      	ldr	r3, [sp, #12]
    95bc:	da04      	bge.n	95c8 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
    95be:	b011      	add	sp, #68	; 0x44
    95c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    95c4:	2320      	movs	r3, #32
    95c6:	444d      	add	r5, r9
    95c8:	464a      	mov	r2, r9
				while (width-- > 0) {
    95ca:	2a00      	cmp	r2, #0
    95cc:	eba5 0109 	sub.w	r1, r5, r9
    95d0:	f109 39ff 	add.w	r9, r9, #4294967295
    95d4:	dceb      	bgt.n	95ae <z_cbvprintf_impl+0x6d2>
    95d6:	460d      	mov	r5, r1
		if (sign != 0) {
    95d8:	b136      	cbz	r6, 95e8 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
    95da:	4659      	mov	r1, fp
    95dc:	4630      	mov	r0, r6
    95de:	9b02      	ldr	r3, [sp, #8]
    95e0:	4798      	blx	r3
    95e2:	2800      	cmp	r0, #0
    95e4:	dbeb      	blt.n	95be <z_cbvprintf_impl+0x6e2>
    95e6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    95e8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    95ec:	06d9      	lsls	r1, r3, #27
    95ee:	d401      	bmi.n	95f4 <z_cbvprintf_impl+0x718>
    95f0:	071a      	lsls	r2, r3, #28
    95f2:	d506      	bpl.n	9602 <z_cbvprintf_impl+0x726>
				OUTC('0');
    95f4:	4659      	mov	r1, fp
    95f6:	2030      	movs	r0, #48	; 0x30
    95f8:	9b02      	ldr	r3, [sp, #8]
    95fa:	4798      	blx	r3
    95fc:	2800      	cmp	r0, #0
    95fe:	dbde      	blt.n	95be <z_cbvprintf_impl+0x6e2>
    9600:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9602:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    9606:	06db      	lsls	r3, r3, #27
    9608:	d507      	bpl.n	961a <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
    960a:	4659      	mov	r1, fp
    960c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    9610:	9b02      	ldr	r3, [sp, #8]
    9612:	4798      	blx	r3
    9614:	2800      	cmp	r0, #0
    9616:	dbd2      	blt.n	95be <z_cbvprintf_impl+0x6e2>
    9618:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    961a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    961c:	442e      	add	r6, r5
    961e:	1b73      	subs	r3, r6, r5
    9620:	2b00      	cmp	r3, #0
    9622:	dc16      	bgt.n	9652 <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
    9624:	4643      	mov	r3, r8
    9626:	4652      	mov	r2, sl
    9628:	4659      	mov	r1, fp
    962a:	9802      	ldr	r0, [sp, #8]
    962c:	f008 fb05 	bl	11c3a <outs>
    9630:	2800      	cmp	r0, #0
    9632:	dbc4      	blt.n	95be <z_cbvprintf_impl+0x6e2>
    9634:	4405      	add	r5, r0
		while (width > 0) {
    9636:	44a9      	add	r9, r5
    9638:	eba9 0305 	sub.w	r3, r9, r5
    963c:	2b00      	cmp	r3, #0
    963e:	f77f ae79 	ble.w	9334 <z_cbvprintf_impl+0x458>
			OUTC(' ');
    9642:	4659      	mov	r1, fp
    9644:	2020      	movs	r0, #32
    9646:	9b02      	ldr	r3, [sp, #8]
    9648:	4798      	blx	r3
    964a:	2800      	cmp	r0, #0
    964c:	dbb7      	blt.n	95be <z_cbvprintf_impl+0x6e2>
    964e:	3501      	adds	r5, #1
			--width;
    9650:	e7f2      	b.n	9638 <z_cbvprintf_impl+0x75c>
				OUTC('0');
    9652:	4659      	mov	r1, fp
    9654:	2030      	movs	r0, #48	; 0x30
    9656:	9b02      	ldr	r3, [sp, #8]
    9658:	4798      	blx	r3
    965a:	2800      	cmp	r0, #0
    965c:	dbaf      	blt.n	95be <z_cbvprintf_impl+0x6e2>
    965e:	3501      	adds	r5, #1
    9660:	e7dd      	b.n	961e <z_cbvprintf_impl+0x742>
    9662:	bf00      	nop
    9664:	00013b25 	.word	0x00013b25

00009668 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9668:	b148      	cbz	r0, 967e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    966a:	4b05      	ldr	r3, [pc, #20]	; (9680 <arch_busy_wait+0x18>)
    966c:	681a      	ldr	r2, [r3, #0]
    966e:	4b05      	ldr	r3, [pc, #20]	; (9684 <arch_busy_wait+0x1c>)
    9670:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    9674:	4b04      	ldr	r3, [pc, #16]	; (9688 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    9676:	4350      	muls	r0, r2
    9678:	f043 0301 	orr.w	r3, r3, #1
    967c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    967e:	4770      	bx	lr
    9680:	2000803c 	.word	0x2000803c
    9684:	000f4240 	.word	0x000f4240
    9688:	000135d0 	.word	0x000135d0

0000968c <sync_rtc_setup>:
	return ipm_set_enabled(ipm_dev, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    968c:	b5f0      	push	{r4, r5, r6, r7, lr}
    968e:	b083      	sub	sp, #12
    9690:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    9692:	1d38      	adds	r0, r7, #4
    9694:	f005 f8b4 	bl	e800 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    9698:	4b27      	ldr	r3, [pc, #156]	; (9738 <sync_rtc_setup+0xac>)
    969a:	4298      	cmp	r0, r3
    969c:	d148      	bne.n	9730 <sync_rtc_setup+0xa4>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    969e:	f004 fc93 	bl	dfc8 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    96a2:	1e04      	subs	r4, r0, #0
    96a4:	da13      	bge.n	96ce <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    96a6:	7938      	ldrb	r0, [r7, #4]
    96a8:	f005 f8b0 	bl	e80c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    96ac:	466d      	mov	r5, sp
    96ae:	b088      	sub	sp, #32
    96b0:	466a      	mov	r2, sp
    96b2:	4b22      	ldr	r3, [pc, #136]	; (973c <sync_rtc_setup+0xb0>)
    96b4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    96b8:	2303      	movs	r3, #3
    96ba:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    96be:	2300      	movs	r3, #0
    96c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    96c4:	481e      	ldr	r0, [pc, #120]	; (9740 <sync_rtc_setup+0xb4>)
    96c6:	f000 fb03 	bl	9cd0 <z_impl_z_log_msg_static_create>
    96ca:	46ad      	mov	sp, r5
	}

	return rv;
    96cc:	e02c      	b.n	9728 <sync_rtc_setup+0x9c>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    96ce:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    96d2:	4d1c      	ldr	r5, [pc, #112]	; (9744 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    96d4:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    96d6:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    96d8:	80fb      	strh	r3, [r7, #6]
    96da:	6874      	ldr	r4, [r6, #4]
	rv = IS_ENABLED(CONFIG_MBOX) ? mbox_rx_init((void *)channels.raw) :
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	b13c      	cbz	r4, 96f0 <sync_rtc_setup+0x64>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    96e0:	2108      	movs	r1, #8
    96e2:	4628      	mov	r0, r5
    96e4:	4a18      	ldr	r2, [pc, #96]	; (9748 <sync_rtc_setup+0xbc>)
    96e6:	47a0      	blx	r4
	if (err < 0) {
    96e8:	1e04      	subs	r4, r0, #0
    96ea:	dbdf      	blt.n	96ac <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    96ec:	6933      	ldr	r3, [r6, #16]
    96ee:	b913      	cbnz	r3, 96f6 <sync_rtc_setup+0x6a>
		return -ENOSYS;
    96f0:	f06f 0457 	mvn.w	r4, #87	; 0x57
	if (rv < 0) {
    96f4:	e7da      	b.n	96ac <sync_rtc_setup+0x20>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    96f6:	2201      	movs	r2, #1
    96f8:	2108      	movs	r1, #8
    96fa:	4628      	mov	r0, r5
    96fc:	4798      	blx	r3
    96fe:	1e04      	subs	r4, r0, #0
    9700:	dbd4      	blt.n	96ac <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    9702:	2301      	movs	r3, #1
    9704:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    9706:	4a11      	ldr	r2, [pc, #68]	; (974c <sync_rtc_setup+0xc0>)
    9708:	40ab      	lsls	r3, r5
    970a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    970e:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9710:	79fe      	ldrb	r6, [r7, #7]
    9712:	f008 ffea 	bl	126ea <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9716:	4b0e      	ldr	r3, [pc, #56]	; (9750 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9718:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    971c:	00b6      	lsls	r6, r6, #2
    971e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9722:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    9724:	2c00      	cmp	r4, #0
    9726:	d1c1      	bne.n	96ac <sync_rtc_setup+0x20>
}
    9728:	4620      	mov	r0, r4
    972a:	370c      	adds	r7, #12
    972c:	46bd      	mov	sp, r7
    972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    9730:	f06f 0412 	mvn.w	r4, #18
    9734:	e7ba      	b.n	96ac <sync_rtc_setup+0x20>
    9736:	bf00      	nop
    9738:	0bad0000 	.word	0x0bad0000
    973c:	00013b2f 	.word	0x00013b2f
    9740:	00013584 	.word	0x00013584
    9744:	000132c8 	.word	0x000132c8
    9748:	00009799 	.word	0x00009799
    974c:	40017000 	.word	0x40017000
    9750:	4002a180 	.word	0x4002a180

00009754 <rtc_cb>:
{
    9754:	b538      	push	{r3, r4, r5, lr}
    9756:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    9758:	f3c4 2507 	ubfx	r5, r4, #8, #8
    975c:	4628      	mov	r0, r5
    975e:	f004 fa99 	bl	dc94 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    9762:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    9764:	4b0a      	ldr	r3, [pc, #40]	; (9790 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    9766:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    9768:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    976c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9770:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    9772:	2301      	movs	r3, #1
    9774:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    9776:	4a07      	ldr	r2, [pc, #28]	; (9794 <rtc_cb+0x40>)
    9778:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    977a:	4628      	mov	r0, r5
    977c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    9780:	f004 fc40 	bl	e004 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    9784:	4620      	mov	r0, r4
}
    9786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    978a:	f005 b83f 	b.w	e80c <nrfx_dppi_channel_free>
    978e:	bf00      	nop
    9790:	4002a080 	.word	0x4002a080
    9794:	40017000 	.word	0x40017000

00009798 <mbox_callback>:
{
    9798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    979a:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    979c:	6883      	ldr	r3, [r0, #8]
    979e:	691b      	ldr	r3, [r3, #16]
    97a0:	b10b      	cbz	r3, 97a6 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    97a2:	2200      	movs	r2, #0
    97a4:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    97a6:	f3c4 2607 	ubfx	r6, r4, #8, #8
    97aa:	4630      	mov	r0, r6
    97ac:	f004 fa7a 	bl	dca4 <z_nrf_rtc_timer_compare_read>
    97b0:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    97b2:	4630      	mov	r0, r6
    97b4:	f008 ff99 	bl	126ea <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    97b8:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    97ba:	4b10      	ldr	r3, [pc, #64]	; (97fc <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    97bc:	0e22      	lsrs	r2, r4, #24
    97be:	0092      	lsls	r2, r2, #2
    97c0:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    97c4:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    97c6:	4630      	mov	r0, r6
    97c8:	f004 fa64 	bl	dc94 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    97cc:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    97ce:	4b0c      	ldr	r3, [pc, #48]	; (9800 <mbox_callback+0x68>)
    97d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    97d4:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    97d6:	b2e2      	uxtb	r2, r4
    97d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    97dc:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    97de:	4b09      	ldr	r3, [pc, #36]	; (9804 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    97e0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    97e4:	f105 0232 	add.w	r2, r5, #50	; 0x32
    97e8:	9300      	str	r3, [sp, #0]
    97ea:	4630      	mov	r0, r6
    97ec:	463b      	mov	r3, r7
    97ee:	9401      	str	r4, [sp, #4]
    97f0:	0052      	lsls	r2, r2, #1
    97f2:	f008 ff83 	bl	126fc <z_nrf_rtc_timer_set>
}
    97f6:	b003      	add	sp, #12
    97f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97fa:	bf00      	nop
    97fc:	4002a180 	.word	0x4002a180
    9800:	4002a080 	.word	0x4002a080
    9804:	00009755 	.word	0x00009755

00009808 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9808:	f009 b8a3 	b.w	12952 <SystemInit>

0000980c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9810:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    9812:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    9814:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    9818:	f8df 8050 	ldr.w	r8, [pc, #80]	; 986c <activate_foreach_backend+0x60>
	while (mask_cpy) {
    981c:	b914      	cbnz	r4, 9824 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    981e:	4638      	mov	r0, r7
    9820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    9824:	fa94 f5a4 	rbit	r5, r4
    9828:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    982c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    9830:	012e      	lsls	r6, r5, #4
    9832:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    9836:	ea6f 0a03 	mvn.w	sl, r3
    983a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    983e:	7b2b      	ldrb	r3, [r5, #12]
    9840:	2b00      	cmp	r3, #0
    9842:	d0eb      	beq.n	981c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    9844:	f858 3006 	ldr.w	r3, [r8, r6]
    9848:	691b      	ldr	r3, [r3, #16]
    984a:	b94b      	cbnz	r3, 9860 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    984c:	4446      	add	r6, r8
			log_backend_enable(backend,
    984e:	6873      	ldr	r3, [r6, #4]
    9850:	2204      	movs	r2, #4
    9852:	4628      	mov	r0, r5
    9854:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    9856:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    985a:	f000 fa2b 	bl	9cb4 <log_backend_enable>
    985e:	e7dd      	b.n	981c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    9860:	4628      	mov	r0, r5
    9862:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    9864:	2800      	cmp	r0, #0
    9866:	d1d9      	bne.n	981c <activate_foreach_backend+0x10>
    9868:	e7f0      	b.n	984c <activate_foreach_backend+0x40>
    986a:	bf00      	nop
    986c:	000135bc 	.word	0x000135bc

00009870 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    9870:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    9872:	2200      	movs	r2, #0
{
    9874:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    9876:	490f      	ldr	r1, [pc, #60]	; (98b4 <enable_logger+0x44>)
    9878:	480f      	ldr	r0, [pc, #60]	; (98b8 <enable_logger+0x48>)
    987a:	f009 fbfa 	bl	13072 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    987e:	2200      	movs	r2, #0
    9880:	2300      	movs	r3, #0
    9882:	2400      	movs	r4, #0
    9884:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9888:	230e      	movs	r3, #14
    988a:	4d0c      	ldr	r5, [pc, #48]	; (98bc <enable_logger+0x4c>)
    988c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    9890:	f44f 7240 	mov.w	r2, #768	; 0x300
    9894:	4628      	mov	r0, r5
    9896:	e9cd 4401 	strd	r4, r4, [sp, #4]
    989a:	4b09      	ldr	r3, [pc, #36]	; (98c0 <enable_logger+0x50>)
    989c:	4909      	ldr	r1, [pc, #36]	; (98c4 <enable_logger+0x54>)
    989e:	9400      	str	r4, [sp, #0]
    98a0:	f006 fd44 	bl	1032c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    98a4:	4908      	ldr	r1, [pc, #32]	; (98c8 <enable_logger+0x58>)
    98a6:	4628      	mov	r0, r5
    98a8:	f009 f986 	bl	12bb8 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    98ac:	4620      	mov	r0, r4
    98ae:	b009      	add	sp, #36	; 0x24
    98b0:	bd30      	pop	{r4, r5, pc}
    98b2:	bf00      	nop
    98b4:	000098cd 	.word	0x000098cd
    98b8:	20008610 	.word	0x20008610
    98bc:	20008648 	.word	0x20008648
    98c0:	00009b55 	.word	0x00009b55
    98c4:	200098c8 	.word	0x200098c8
    98c8:	00013b60 	.word	0x00013b60

000098cc <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    98cc:	4801      	ldr	r0, [pc, #4]	; (98d4 <log_process_thread_timer_expiry_fn+0x8>)
    98ce:	f006 beb9 	b.w	10644 <z_impl_k_sem_give>
    98d2:	bf00      	nop
    98d4:	20008128 	.word	0x20008128

000098d8 <z_log_init>:
{
    98d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98dc:	4681      	mov	r9, r0
    98de:	4688      	mov	r8, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    98e0:	4b22      	ldr	r3, [pc, #136]	; (996c <z_log_init+0x94>)
    98e2:	e8d3 4fef 	ldaex	r4, [r3]
    98e6:	1c62      	adds	r2, r4, #1
    98e8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    98ec:	2900      	cmp	r1, #0
    98ee:	d1f8      	bne.n	98e2 <z_log_init+0xa>
	if (atomic_inc(&initialized) != 0) {
    98f0:	b11c      	cbz	r4, 98fa <z_log_init+0x22>
		return 0;
    98f2:	2400      	movs	r4, #0
}
    98f4:	4620      	mov	r0, r4
    98f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < log_backend_count_get(); i++) {
    98fa:	4627      	mov	r7, r4
				mask |= BIT(i);
    98fc:	f04f 0a01 	mov.w	sl, #1
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    9900:	4d1b      	ldr	r5, [pc, #108]	; (9970 <z_log_init+0x98>)
    9902:	4e1c      	ldr	r6, [pc, #112]	; (9974 <z_log_init+0x9c>)
    9904:	1b76      	subs	r6, r6, r5
    9906:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    9908:	42b7      	cmp	r7, r6
    990a:	db11      	blt.n	9930 <z_log_init+0x58>
	if (blocking) {
    990c:	f1b9 0f00 	cmp.w	r9, #0
    9910:	d0f0      	beq.n	98f4 <z_log_init+0x1c>
		while (mask) {
    9912:	2c00      	cmp	r4, #0
    9914:	d0ed      	beq.n	98f2 <z_log_init+0x1a>
			mask = activate_foreach_backend(mask);
    9916:	4620      	mov	r0, r4
    9918:	f7ff ff78 	bl	980c <activate_foreach_backend>
    991c:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    991e:	f1b8 0f00 	cmp.w	r8, #0
    9922:	d0f6      	beq.n	9912 <z_log_init+0x3a>
	return z_impl_k_sleep(timeout);
    9924:	2100      	movs	r1, #0
    9926:	f44f 70a4 	mov.w	r0, #328	; 0x148
    992a:	f007 fae3 	bl	10ef4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    992e:	e7f0      	b.n	9912 <z_log_init+0x3a>
		if (backend->autostart) {
    9930:	7b2b      	ldrb	r3, [r5, #12]
    9932:	b17b      	cbz	r3, 9954 <z_log_init+0x7c>
	if (backend->api->init) {
    9934:	f8d5 b000 	ldr.w	fp, [r5]
    9938:	f8db 300c 	ldr.w	r3, [fp, #12]
    993c:	b10b      	cbz	r3, 9942 <z_log_init+0x6a>
		backend->api->init(backend);
    993e:	4628      	mov	r0, r5
    9940:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    9942:	f8db 3010 	ldr.w	r3, [fp, #16]
    9946:	b943      	cbnz	r3, 995a <z_log_init+0x82>
				log_backend_enable(backend,
    9948:	686b      	ldr	r3, [r5, #4]
    994a:	2204      	movs	r2, #4
    994c:	4628      	mov	r0, r5
    994e:	6819      	ldr	r1, [r3, #0]
    9950:	f000 f9b0 	bl	9cb4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    9954:	3701      	adds	r7, #1
    9956:	3510      	adds	r5, #16
    9958:	e7d6      	b.n	9908 <z_log_init+0x30>
		return backend->api->is_ready(backend);
    995a:	4628      	mov	r0, r5
    995c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    995e:	2800      	cmp	r0, #0
    9960:	d0f2      	beq.n	9948 <z_log_init+0x70>
				mask |= BIT(i);
    9962:	fa0a f307 	lsl.w	r3, sl, r7
    9966:	431c      	orrs	r4, r3
    9968:	e7f4      	b.n	9954 <z_log_init+0x7c>
    996a:	bf00      	nop
    996c:	20008978 	.word	0x20008978
    9970:	000135bc 	.word	0x000135bc
    9974:	000135cc 	.word	0x000135cc

00009978 <log_format_func_t_get>:
}
    9978:	4b01      	ldr	r3, [pc, #4]	; (9980 <log_format_func_t_get+0x8>)
    997a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    997e:	4770      	bx	lr
    9980:	00013618 	.word	0x00013618

00009984 <z_log_notify_backend_enabled>:
{
    9984:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    9986:	4c04      	ldr	r4, [pc, #16]	; (9998 <z_log_notify_backend_enabled+0x14>)
    9988:	7823      	ldrb	r3, [r4, #0]
    998a:	b913      	cbnz	r3, 9992 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    998c:	4803      	ldr	r0, [pc, #12]	; (999c <z_log_notify_backend_enabled+0x18>)
    998e:	f006 fe59 	bl	10644 <z_impl_k_sem_give>
	backend_attached = true;
    9992:	2301      	movs	r3, #1
    9994:	7023      	strb	r3, [r4, #0]
}
    9996:	bd10      	pop	{r4, pc}
    9998:	200098a5 	.word	0x200098a5
    999c:	20008128 	.word	0x20008128

000099a0 <z_log_dropped>:
    99a0:	4b08      	ldr	r3, [pc, #32]	; (99c4 <z_log_dropped+0x24>)
    99a2:	e8d3 2fef 	ldaex	r2, [r3]
    99a6:	3201      	adds	r2, #1
    99a8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    99ac:	2900      	cmp	r1, #0
    99ae:	d1f8      	bne.n	99a2 <z_log_dropped+0x2>
	if (buffered) {
    99b0:	b138      	cbz	r0, 99c2 <z_log_dropped+0x22>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    99b2:	4b05      	ldr	r3, [pc, #20]	; (99c8 <z_log_dropped+0x28>)
    99b4:	e8d3 2fef 	ldaex	r2, [r3]
    99b8:	3a01      	subs	r2, #1
    99ba:	e8c3 2fe1 	stlex	r1, r2, [r3]
    99be:	2900      	cmp	r1, #0
    99c0:	d1f8      	bne.n	99b4 <z_log_dropped+0x14>
}
    99c2:	4770      	bx	lr
    99c4:	20008974 	.word	0x20008974
    99c8:	20008970 	.word	0x20008970

000099cc <z_log_dropped_read_and_clear>:
}
    99cc:	2000      	movs	r0, #0
    99ce:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    99d0:	4b03      	ldr	r3, [pc, #12]	; (99e0 <z_log_dropped_read_and_clear+0x14>)
    99d2:	e8d3 0fef 	ldaex	r0, [r3]
    99d6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    99da:	2900      	cmp	r1, #0
    99dc:	d1f9      	bne.n	99d2 <z_log_dropped_read_and_clear+0x6>
    99de:	4770      	bx	lr
    99e0:	20008974 	.word	0x20008974

000099e4 <dropped_notify>:
{
    99e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    99e6:	f7ff fff1 	bl	99cc <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
    99ea:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
    99ec:	4607      	mov	r7, r0
	return __log_backends_end - __log_backends_start;
    99ee:	4c09      	ldr	r4, [pc, #36]	; (9a14 <dropped_notify+0x30>)
    99f0:	4d09      	ldr	r5, [pc, #36]	; (9a18 <dropped_notify+0x34>)
    99f2:	1b2d      	subs	r5, r5, r4
    99f4:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    99f6:	42ae      	cmp	r6, r5
    99f8:	db00      	blt.n	99fc <dropped_notify+0x18>
}
    99fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    99fc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    99fe:	795b      	ldrb	r3, [r3, #5]
    9a00:	b12b      	cbz	r3, 9a0e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    9a02:	6823      	ldr	r3, [r4, #0]
    9a04:	685b      	ldr	r3, [r3, #4]
    9a06:	b113      	cbz	r3, 9a0e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    9a08:	4639      	mov	r1, r7
    9a0a:	4620      	mov	r0, r4
    9a0c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    9a0e:	3601      	adds	r6, #1
    9a10:	3410      	adds	r4, #16
    9a12:	e7f0      	b.n	99f6 <dropped_notify+0x12>
    9a14:	000135bc 	.word	0x000135bc
    9a18:	000135cc 	.word	0x000135cc

00009a1c <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    9a1c:	4901      	ldr	r1, [pc, #4]	; (9a24 <z_log_msg_init+0x8>)
    9a1e:	4802      	ldr	r0, [pc, #8]	; (9a28 <z_log_msg_init+0xc>)
    9a20:	f008 b9d6 	b.w	11dd0 <mpsc_pbuf_init>
    9a24:	00013624 	.word	0x00013624
    9a28:	2000897c 	.word	0x2000897c

00009a2c <log_core_init>:
{
    9a2c:	b508      	push	{r3, lr}
	panic_mode = false;
    9a2e:	2300      	movs	r3, #0
    9a30:	4a07      	ldr	r2, [pc, #28]	; (9a50 <log_core_init+0x24>)
		log_output_timestamp_freq_set(freq);
    9a32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
    9a36:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    9a38:	4a06      	ldr	r2, [pc, #24]	; (9a54 <log_core_init+0x28>)
    9a3a:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    9a3c:	4b06      	ldr	r3, [pc, #24]	; (9a58 <log_core_init+0x2c>)
    9a3e:	4a07      	ldr	r2, [pc, #28]	; (9a5c <log_core_init+0x30>)
    9a40:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
    9a42:	f000 fb6d 	bl	a120 <log_output_timestamp_freq_set>
}
    9a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    9a4a:	f7ff bfe7 	b.w	9a1c <z_log_msg_init>
    9a4e:	bf00      	nop
    9a50:	200098a6 	.word	0x200098a6
    9a54:	20008974 	.word	0x20008974
    9a58:	20008004 	.word	0x20008004
    9a5c:	0001210f 	.word	0x0001210f

00009a60 <z_log_msg_alloc>:
{
    9a60:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    9a62:	2200      	movs	r2, #0
    9a64:	2300      	movs	r3, #0
    9a66:	4801      	ldr	r0, [pc, #4]	; (9a6c <z_log_msg_alloc+0xc>)
    9a68:	f008 b9d3 	b.w	11e12 <mpsc_pbuf_alloc>
    9a6c:	2000897c 	.word	0x2000897c

00009a70 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    9a70:	4801      	ldr	r0, [pc, #4]	; (9a78 <z_log_msg_claim+0x8>)
    9a72:	f008 ba67 	b.w	11f44 <mpsc_pbuf_claim>
    9a76:	bf00      	nop
    9a78:	2000897c 	.word	0x2000897c

00009a7c <z_log_msg_free>:
{
    9a7c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    9a7e:	4801      	ldr	r0, [pc, #4]	; (9a84 <z_log_msg_free+0x8>)
    9a80:	f008 baac 	b.w	11fdc <mpsc_pbuf_free>
    9a84:	2000897c 	.word	0x2000897c

00009a88 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    9a88:	4801      	ldr	r0, [pc, #4]	; (9a90 <z_log_msg_pending+0x8>)
    9a8a:	f008 badb 	b.w	12044 <mpsc_pbuf_is_pending>
    9a8e:	bf00      	nop
    9a90:	2000897c 	.word	0x2000897c

00009a94 <z_impl_log_process>:
{
    9a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
    9a96:	4b17      	ldr	r3, [pc, #92]	; (9af4 <z_impl_log_process+0x60>)
    9a98:	7818      	ldrb	r0, [r3, #0]
    9a9a:	b350      	cbz	r0, 9af2 <z_impl_log_process+0x5e>
	msg = z_log_msg_claim();
    9a9c:	f7ff ffe8 	bl	9a70 <z_log_msg_claim>
	if (msg) {
    9aa0:	4605      	mov	r5, r0
    9aa2:	b188      	cbz	r0, 9ac8 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9aa4:	4b14      	ldr	r3, [pc, #80]	; (9af8 <z_impl_log_process+0x64>)
    9aa6:	e8d3 2fef 	ldaex	r2, [r3]
    9aaa:	3a01      	subs	r2, #1
    9aac:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9ab0:	2900      	cmp	r1, #0
    9ab2:	d1f8      	bne.n	9aa6 <z_impl_log_process+0x12>
	for (int i = 0; i < log_backend_count_get(); i++) {
    9ab4:	2700      	movs	r7, #0
	return __log_backends_end - __log_backends_start;
    9ab6:	4c11      	ldr	r4, [pc, #68]	; (9afc <z_impl_log_process+0x68>)
    9ab8:	4e11      	ldr	r6, [pc, #68]	; (9b00 <z_impl_log_process+0x6c>)
    9aba:	1b36      	subs	r6, r6, r4
    9abc:	1136      	asrs	r6, r6, #4
    9abe:	42b7      	cmp	r7, r6
    9ac0:	db0c      	blt.n	9adc <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    9ac2:	4628      	mov	r0, r5
    9ac4:	f7ff ffda 	bl	9a7c <z_log_msg_free>
	return dropped_cnt > 0;
    9ac8:	4b0e      	ldr	r3, [pc, #56]	; (9b04 <z_impl_log_process+0x70>)
	if (z_log_dropped_pending()) {
    9aca:	681b      	ldr	r3, [r3, #0]
    9acc:	2b00      	cmp	r3, #0
    9ace:	dd01      	ble.n	9ad4 <z_impl_log_process+0x40>
		dropped_notify();
    9ad0:	f7ff ff88 	bl	99e4 <dropped_notify>
}
    9ad4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
    9ad8:	f7ff bfd6 	b.w	9a88 <z_log_msg_pending>
	return backend->cb->active;
    9adc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    9ade:	795b      	ldrb	r3, [r3, #5]
    9ae0:	b123      	cbz	r3, 9aec <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    9ae2:	6823      	ldr	r3, [r4, #0]
    9ae4:	4629      	mov	r1, r5
    9ae6:	4620      	mov	r0, r4
    9ae8:	681b      	ldr	r3, [r3, #0]
    9aea:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    9aec:	3701      	adds	r7, #1
    9aee:	3410      	adds	r4, #16
    9af0:	e7e5      	b.n	9abe <z_impl_log_process+0x2a>
}
    9af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9af4:	200098a5 	.word	0x200098a5
    9af8:	20008970 	.word	0x20008970
    9afc:	000135bc 	.word	0x000135bc
    9b00:	000135cc 	.word	0x000135cc
    9b04:	20008974 	.word	0x20008974

00009b08 <z_impl_log_panic>:
{
    9b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    9b0a:	4f0f      	ldr	r7, [pc, #60]	; (9b48 <z_impl_log_panic+0x40>)
    9b0c:	783d      	ldrb	r5, [r7, #0]
    9b0e:	b97d      	cbnz	r5, 9b30 <z_impl_log_panic+0x28>
	(void)z_log_init(true, false);
    9b10:	4629      	mov	r1, r5
    9b12:	2001      	movs	r0, #1
    9b14:	f7ff fee0 	bl	98d8 <z_log_init>
	return __log_backends_end - __log_backends_start;
    9b18:	4c0c      	ldr	r4, [pc, #48]	; (9b4c <z_impl_log_panic+0x44>)
    9b1a:	4e0d      	ldr	r6, [pc, #52]	; (9b50 <z_impl_log_panic+0x48>)
    9b1c:	1b36      	subs	r6, r6, r4
    9b1e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    9b20:	42b5      	cmp	r5, r6
    9b22:	db06      	blt.n	9b32 <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    9b24:	f7ff ffb6 	bl	9a94 <z_impl_log_process>
		while (log_process() == true) {
    9b28:	2800      	cmp	r0, #0
    9b2a:	d1fb      	bne.n	9b24 <z_impl_log_panic+0x1c>
	panic_mode = true;
    9b2c:	2301      	movs	r3, #1
    9b2e:	703b      	strb	r3, [r7, #0]
}
    9b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    9b32:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    9b34:	795b      	ldrb	r3, [r3, #5]
    9b36:	b11b      	cbz	r3, 9b40 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    9b38:	6823      	ldr	r3, [r4, #0]
    9b3a:	4620      	mov	r0, r4
    9b3c:	689b      	ldr	r3, [r3, #8]
    9b3e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    9b40:	3501      	adds	r5, #1
    9b42:	3410      	adds	r4, #16
    9b44:	e7ec      	b.n	9b20 <z_impl_log_panic+0x18>
    9b46:	bf00      	nop
    9b48:	200098a6 	.word	0x200098a6
    9b4c:	000135bc 	.word	0x000135bc
    9b50:	000135cc 	.word	0x000135cc

00009b54 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    9b54:	2100      	movs	r1, #0
{
    9b56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
    9b5a:	4608      	mov	r0, r1
    9b5c:	f7ff febc 	bl	98d8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    9b60:	4604      	mov	r4, r0
    9b62:	b380      	cbz	r0, 9bc6 <log_process_thread_func+0x72>
    9b64:	f240 6867 	movw	r8, #1639	; 0x667
    9b68:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    9b6c:	f007 f9dc 	bl	10f28 <z_impl_z_current_get>
	proc_tid = process_tid;
    9b70:	4b1d      	ldr	r3, [pc, #116]	; (9be8 <log_process_thread_func+0x94>)
    9b72:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    9b74:	b130      	cbz	r0, 9b84 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    9b76:	4b1d      	ldr	r3, [pc, #116]	; (9bec <log_process_thread_func+0x98>)
	    process_tid &&
    9b78:	681b      	ldr	r3, [r3, #0]
    9b7a:	2b09      	cmp	r3, #9
    9b7c:	dd02      	ble.n	9b84 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    9b7e:	481c      	ldr	r0, [pc, #112]	; (9bf0 <log_process_thread_func+0x9c>)
    9b80:	f006 fd60 	bl	10644 <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
    9b84:	2700      	movs	r7, #0
    9b86:	4e1b      	ldr	r6, [pc, #108]	; (9bf4 <log_process_thread_func+0xa0>)
    9b88:	4b1b      	ldr	r3, [pc, #108]	; (9bf8 <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
    9b8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 9bf0 <log_process_thread_func+0x9c>
    9b8e:	1af6      	subs	r6, r6, r3
    9b90:	1136      	asrs	r6, r6, #4
		if (activate_mask) {
    9b92:	b144      	cbz	r4, 9ba6 <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
    9b94:	4620      	mov	r0, r4
    9b96:	f7ff fe39 	bl	980c <activate_foreach_backend>
			if (!activate_mask) {
    9b9a:	4604      	mov	r4, r0
    9b9c:	b918      	cbnz	r0, 9ba6 <log_process_thread_func+0x52>
				timeout = K_FOREVER;
    9b9e:	f04f 38ff 	mov.w	r8, #4294967295
    9ba2:	f04f 39ff 	mov.w	r9, #4294967295
    9ba6:	f7ff ff75 	bl	9a94 <z_impl_log_process>
		if (log_process() == false) {
    9baa:	4605      	mov	r5, r0
    9bac:	b948      	cbnz	r0, 9bc2 <log_process_thread_func+0x6e>
			if (processed_any) {
    9bae:	b11f      	cbz	r7, 9bb8 <log_process_thread_func+0x64>
	for (int i = 0; i < log_backend_count_get(); i++) {
    9bb0:	4682      	mov	sl, r0
    9bb2:	4f11      	ldr	r7, [pc, #68]	; (9bf8 <log_process_thread_func+0xa4>)
    9bb4:	45b2      	cmp	sl, r6
    9bb6:	db0b      	blt.n	9bd0 <log_process_thread_func+0x7c>
    9bb8:	4642      	mov	r2, r8
    9bba:	464b      	mov	r3, r9
    9bbc:	4658      	mov	r0, fp
    9bbe:	f006 fd61 	bl	10684 <z_impl_k_sem_take>
    9bc2:	462f      	mov	r7, r5
    9bc4:	e7e5      	b.n	9b92 <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    9bc6:	f04f 38ff 	mov.w	r8, #4294967295
    9bca:	f04f 39ff 	mov.w	r9, #4294967295
    9bce:	e7cd      	b.n	9b6c <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    9bd0:	683b      	ldr	r3, [r7, #0]
    9bd2:	699b      	ldr	r3, [r3, #24]
    9bd4:	b11b      	cbz	r3, 9bde <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
    9bd6:	2200      	movs	r2, #0
    9bd8:	4638      	mov	r0, r7
    9bda:	4611      	mov	r1, r2
    9bdc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    9bde:	f10a 0a01 	add.w	sl, sl, #1
    9be2:	3710      	adds	r7, #16
    9be4:	e7e6      	b.n	9bb4 <log_process_thread_func+0x60>
    9be6:	bf00      	nop
    9be8:	200089b4 	.word	0x200089b4
    9bec:	20008970 	.word	0x20008970
    9bf0:	20008128 	.word	0x20008128
    9bf4:	000135cc 	.word	0x000135cc
    9bf8:	000135bc 	.word	0x000135bc

00009bfc <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
    9bfc:	4b1f      	ldr	r3, [pc, #124]	; (9c7c <z_log_msg_commit+0x80>)
{
    9bfe:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
    9c00:	681b      	ldr	r3, [r3, #0]
{
    9c02:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    9c04:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    9c06:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    9c08:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    9c0a:	481d      	ldr	r0, [pc, #116]	; (9c80 <z_log_msg_commit+0x84>)
    9c0c:	f008 f97a 	bl	11f04 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9c10:	4b1c      	ldr	r3, [pc, #112]	; (9c84 <z_log_msg_commit+0x88>)
    9c12:	e8d3 2fef 	ldaex	r2, [r3]
    9c16:	1c51      	adds	r1, r2, #1
    9c18:	e8c3 1fe0 	stlex	r0, r1, [r3]
    9c1c:	2800      	cmp	r0, #0
    9c1e:	d1f8      	bne.n	9c12 <z_log_msg_commit+0x16>
	if (panic_mode) {
    9c20:	4b19      	ldr	r3, [pc, #100]	; (9c88 <z_log_msg_commit+0x8c>)
    9c22:	781b      	ldrb	r3, [r3, #0]
    9c24:	b17b      	cbz	r3, 9c46 <z_log_msg_commit+0x4a>
    9c26:	f04f 0320 	mov.w	r3, #32
    9c2a:	f3ef 8411 	mrs	r4, BASEPRI
    9c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    9c32:	f3bf 8f6f 	isb	sy
    9c36:	f7ff ff2d 	bl	9a94 <z_impl_log_process>
	__asm__ volatile(
    9c3a:	f384 8811 	msr	BASEPRI, r4
    9c3e:	f3bf 8f6f 	isb	sy
}
    9c42:	b002      	add	sp, #8
    9c44:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    9c46:	4b11      	ldr	r3, [pc, #68]	; (9c8c <z_log_msg_commit+0x90>)
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	2b00      	cmp	r3, #0
    9c4c:	d0f9      	beq.n	9c42 <z_log_msg_commit+0x46>
		if (cnt == 0) {
    9c4e:	b952      	cbnz	r2, 9c66 <z_log_msg_commit+0x6a>
	z_impl_k_timer_start(timer, duration, period);
    9c50:	2200      	movs	r2, #0
    9c52:	2300      	movs	r3, #0
    9c54:	480e      	ldr	r0, [pc, #56]	; (9c90 <z_log_msg_commit+0x94>)
    9c56:	e9cd 2300 	strd	r2, r3, [sp]
    9c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    9c5e:	2300      	movs	r3, #0
    9c60:	f007 fb98 	bl	11394 <z_impl_k_timer_start>
    9c64:	e7ed      	b.n	9c42 <z_log_msg_commit+0x46>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    9c66:	2a0a      	cmp	r2, #10
    9c68:	d1eb      	bne.n	9c42 <z_log_msg_commit+0x46>
	z_impl_k_timer_stop(timer);
    9c6a:	4809      	ldr	r0, [pc, #36]	; (9c90 <z_log_msg_commit+0x94>)
    9c6c:	f009 fa0d 	bl	1308a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    9c70:	4808      	ldr	r0, [pc, #32]	; (9c94 <z_log_msg_commit+0x98>)
}
    9c72:	b002      	add	sp, #8
    9c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c78:	f006 bce4 	b.w	10644 <z_impl_k_sem_give>
    9c7c:	20008004 	.word	0x20008004
    9c80:	2000897c 	.word	0x2000897c
    9c84:	20008970 	.word	0x20008970
    9c88:	200098a6 	.word	0x200098a6
    9c8c:	200089b4 	.word	0x200089b4
    9c90:	20008610 	.word	0x20008610
    9c94:	20008128 	.word	0x20008128

00009c98 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    9c98:	4a04      	ldr	r2, [pc, #16]	; (9cac <log_source_name_get+0x14>)
    9c9a:	4b05      	ldr	r3, [pc, #20]	; (9cb0 <log_source_name_get+0x18>)
    9c9c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    9c9e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    9ca2:	bf34      	ite	cc
    9ca4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    9ca8:	2000      	movcs	r0, #0
}
    9caa:	4770      	bx	lr
    9cac:	00013534 	.word	0x00013534
    9cb0:	000135bc 	.word	0x000135bc

00009cb4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    9cb4:	4a05      	ldr	r2, [pc, #20]	; (9ccc <log_backend_enable+0x18>)
	backend->cb->id = id;
    9cb6:	6843      	ldr	r3, [r0, #4]
    9cb8:	1a80      	subs	r0, r0, r2
	backend->cb->active = true;
    9cba:	2201      	movs	r2, #1
    9cbc:	1100      	asrs	r0, r0, #4
    9cbe:	3001      	adds	r0, #1

	log_backend_id_set(backend, id);
    9cc0:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    9cc2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    9cc4:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    9cc6:	f7ff be5d 	b.w	9984 <z_log_notify_backend_enabled>
    9cca:	bf00      	nop
    9ccc:	000135bc 	.word	0x000135bc

00009cd0 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    9cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    9cd4:	f3c1 45cb 	ubfx	r5, r1, #19, #12
    9cd8:	f3c1 2649 	ubfx	r6, r1, #9, #10
    9cdc:	4681      	mov	r9, r0
    9cde:	460c      	mov	r4, r1
    9ce0:	4690      	mov	r8, r2
    9ce2:	469a      	mov	sl, r3
    9ce4:	b08d      	sub	sp, #52	; 0x34
    9ce6:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    9ce8:	2e00      	cmp	r6, #0
    9cea:	d03b      	beq.n	9d64 <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
    9cec:	2302      	movs	r3, #2
    9cee:	f04f 0b04 	mov.w	fp, #4
	struct z_cbprintf_buf_desc buf_desc = {
    9cf2:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    9cf4:	a809      	add	r0, sp, #36	; 0x24
    9cf6:	af07      	add	r7, sp, #28
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    9cf8:	4631      	mov	r1, r6
    9cfa:	9300      	str	r3, [sp, #0]
    9cfc:	f8cd b008 	str.w	fp, [sp, #8]
    9d00:	4603      	mov	r3, r0
    9d02:	9701      	str	r7, [sp, #4]
    9d04:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
    9d06:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
    9d0a:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
    9d0c:	9605      	str	r6, [sp, #20]
    9d0e:	f7fe fe6d 	bl	89ec <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    9d12:	f3c0 0309 	ubfx	r3, r0, #0, #10
    9d16:	1958      	adds	r0, r3, r5
    9d18:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    9d1c:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    9d1e:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    9d20:	f363 2452 	bfi	r4, r3, #9, #10
    9d24:	9304      	str	r3, [sp, #16]
    9d26:	f7ff fe9b 	bl	9a60 <z_log_msg_alloc>
		if (msg) {
    9d2a:	4605      	mov	r5, r0
    9d2c:	b178      	cbz	r0, 9d4e <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
    9d2e:	9b04      	ldr	r3, [sp, #16]
    9d30:	2200      	movs	r2, #0
    9d32:	930a      	str	r3, [sp, #40]	; 0x28
	return cbprintf_package_convert(in_packaged, in_len,
    9d34:	2302      	movs	r3, #2
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    9d36:	3010      	adds	r0, #16
	struct z_cbprintf_buf_desc buf_desc = {
    9d38:	9009      	str	r0, [sp, #36]	; 0x24
    9d3a:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
    9d3c:	9300      	str	r3, [sp, #0]
    9d3e:	4640      	mov	r0, r8
    9d40:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    9d44:	4a0b      	ldr	r2, [pc, #44]	; (9d74 <z_impl_z_log_msg_static_create+0xa4>)
    9d46:	9905      	ldr	r1, [sp, #20]
    9d48:	ab09      	add	r3, sp, #36	; 0x24
    9d4a:	f7fe fe4f 	bl	89ec <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    9d4e:	f366 2452 	bfi	r4, r6, #9, #10
    9d52:	4653      	mov	r3, sl
    9d54:	4622      	mov	r2, r4
    9d56:	4649      	mov	r1, r9
    9d58:	4628      	mov	r0, r5
}
    9d5a:	b00d      	add	sp, #52	; 0x34
    9d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    9d60:	f008 b9f3 	b.w	1214a <z_log_msg_finalize>
    9d64:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    9d68:	0880      	lsrs	r0, r0, #2
    9d6a:	f7ff fe79 	bl	9a60 <z_log_msg_alloc>
    9d6e:	4605      	mov	r5, r0
    9d70:	e7ed      	b.n	9d4e <z_impl_z_log_msg_static_create+0x7e>
    9d72:	bf00      	nop
    9d74:	0001211d 	.word	0x0001211d

00009d78 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    9d78:	b40e      	push	{r1, r2, r3}
    9d7a:	b503      	push	{r0, r1, lr}
    9d7c:	ab03      	add	r3, sp, #12
    9d7e:	f853 2b04 	ldr.w	r2, [r3], #4
    9d82:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    9d84:	4804      	ldr	r0, [pc, #16]	; (9d98 <print_formatted+0x20>)
	va_start(args, fmt);
    9d86:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    9d88:	f008 fa07 	bl	1219a <cbvprintf>
	va_end(args);

	return length;
}
    9d8c:	b002      	add	sp, #8
    9d8e:	f85d eb04 	ldr.w	lr, [sp], #4
    9d92:	b003      	add	sp, #12
    9d94:	4770      	bx	lr
    9d96:	bf00      	nop
    9d98:	000121c3 	.word	0x000121c3

00009d9c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    9d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da0:	b089      	sub	sp, #36	; 0x24
    9da2:	469a      	mov	sl, r3
    9da4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9da8:	4604      	mov	r4, r0
    9daa:	9304      	str	r3, [sp, #16]
    9dac:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
    9db0:	9306      	str	r3, [sp, #24]
    9db2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9db4:	460f      	mov	r7, r1
    9db6:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    9db8:	9b04      	ldr	r3, [sp, #16]
{
    9dba:	4693      	mov	fp, r2
    9dbc:	9e16      	ldr	r6, [sp, #88]	; 0x58
	if (!raw_string) {
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	f000 8113 	beq.w	9fea <log_output_process+0x24e>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    9dc4:	f006 0308 	and.w	r3, r6, #8
    9dc8:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
    9dca:	f008 f9a5 	bl	12118 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    9dce:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
    9dd2:	4602      	mov	r2, r0
    9dd4:	2800      	cmp	r0, #0
    9dd6:	f000 80b2 	beq.w	9f3e <log_output_process+0x1a2>
		length += print_formatted(output, "%s ", tag);
    9dda:	4620      	mov	r0, r4
    9ddc:	4989      	ldr	r1, [pc, #548]	; (a004 <log_output_process+0x268>)
    9dde:	f7ff ffcb 	bl	9d78 <print_formatted>
    9de2:	4681      	mov	r9, r0
	if (stamp) {
    9de4:	b14d      	cbz	r5, 9dfa <log_output_process+0x5e>
	if (!format) {
    9de6:	f016 0f44 	tst.w	r6, #68	; 0x44
    9dea:	f040 80aa 	bne.w	9f42 <log_output_process+0x1a6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    9dee:	463a      	mov	r2, r7
    9df0:	4620      	mov	r0, r4
    9df2:	4985      	ldr	r1, [pc, #532]	; (a008 <log_output_process+0x26c>)
    9df4:	f7ff ffc0 	bl	9d78 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    9df8:	4481      	add	r9, r0
	if (color) {
    9dfa:	f006 0301 	and.w	r3, r6, #1
    9dfe:	b15b      	cbz	r3, 9e18 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
    9e00:	4b82      	ldr	r3, [pc, #520]	; (a00c <log_output_process+0x270>)
    9e02:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    9e04:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    9e06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    9e0a:	4b81      	ldr	r3, [pc, #516]	; (a010 <log_output_process+0x274>)
    9e0c:	4981      	ldr	r1, [pc, #516]	; (a014 <log_output_process+0x278>)
    9e0e:	2a00      	cmp	r2, #0
    9e10:	bf08      	it	eq
    9e12:	461a      	moveq	r2, r3
    9e14:	f7ff ffb0 	bl	9d78 <print_formatted>
	if (level_on) {
    9e18:	f006 0308 	and.w	r3, r6, #8
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	f000 80bc 	beq.w	9f9a <log_output_process+0x1fe>
		total += print_formatted(output, "<%s> ", severity[level]);
    9e22:	4b7d      	ldr	r3, [pc, #500]	; (a018 <log_output_process+0x27c>)
    9e24:	9a04      	ldr	r2, [sp, #16]
    9e26:	4620      	mov	r0, r4
    9e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9e2c:	497b      	ldr	r1, [pc, #492]	; (a01c <log_output_process+0x280>)
    9e2e:	f7ff ffa3 	bl	9d78 <print_formatted>
    9e32:	4605      	mov	r5, r0
	if (domain) {
    9e34:	f1bb 0f00 	cmp.w	fp, #0
    9e38:	d005      	beq.n	9e46 <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
    9e3a:	465a      	mov	r2, fp
    9e3c:	4620      	mov	r0, r4
    9e3e:	4978      	ldr	r1, [pc, #480]	; (a020 <log_output_process+0x284>)
    9e40:	f7ff ff9a 	bl	9d78 <print_formatted>
    9e44:	4405      	add	r5, r0
	if (source) {
    9e46:	f1ba 0f00 	cmp.w	sl, #0
    9e4a:	d005      	beq.n	9e58 <log_output_process+0xbc>
		total += print_formatted(output,
    9e4c:	4652      	mov	r2, sl
    9e4e:	4620      	mov	r0, r4
    9e50:	4974      	ldr	r1, [pc, #464]	; (a024 <log_output_process+0x288>)
    9e52:	f7ff ff91 	bl	9d78 <print_formatted>
    9e56:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    9e58:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
    9e5a:	f1b8 0f00 	cmp.w	r8, #0
    9e5e:	f000 80cc 	beq.w	9ffa <log_output_process+0x25e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    9e62:	4871      	ldr	r0, [pc, #452]	; (a028 <log_output_process+0x28c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    9e64:	4643      	mov	r3, r8
    9e66:	4622      	mov	r2, r4
    9e68:	4970      	ldr	r1, [pc, #448]	; (a02c <log_output_process+0x290>)
    9e6a:	f007 fb50 	bl	1150e <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    9e6e:	9b05      	ldr	r3, [sp, #20]
    9e70:	2b00      	cmp	r3, #0
    9e72:	d04c      	beq.n	9f0e <log_output_process+0x172>
		print_formatted(output, " ");
    9e74:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a030 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9e78:	9f05      	ldr	r7, [sp, #20]
    9e7a:	2f10      	cmp	r7, #16
    9e7c:	bf28      	it	cs
    9e7e:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    9e80:	06f3      	lsls	r3, r6, #27
    9e82:	d407      	bmi.n	9e94 <log_output_process+0xf8>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    9e84:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
    9e86:	bf48      	it	mi
    9e88:	496a      	ldrmi	r1, [pc, #424]	; (a034 <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
    9e8a:	4620      	mov	r0, r4
    9e8c:	bf58      	it	pl
    9e8e:	496a      	ldrpl	r1, [pc, #424]	; (a038 <log_output_process+0x29c>)
    9e90:	f7ff ff72 	bl	9d78 <print_formatted>
		prefix_offset = 0;
    9e94:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
    9e98:	4555      	cmp	r5, sl
    9e9a:	f300 8084 	bgt.w	9fa6 <log_output_process+0x20a>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9e9e:	f04f 0900 	mov.w	r9, #0
			print_formatted(output, "   ");
    9ea2:	f8df a198 	ldr.w	sl, [pc, #408]	; a03c <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
    9ea6:	f8df b198 	ldr.w	fp, [pc, #408]	; a040 <log_output_process+0x2a4>
		if (i < length) {
    9eaa:	45b9      	cmp	r9, r7
    9eac:	f080 808b 	bcs.w	9fc6 <log_output_process+0x22a>
			print_formatted(output, "%02x ", data[i]);
    9eb0:	9b06      	ldr	r3, [sp, #24]
    9eb2:	4659      	mov	r1, fp
    9eb4:	4620      	mov	r0, r4
    9eb6:	f813 2009 	ldrb.w	r2, [r3, r9]
    9eba:	f7ff ff5d 	bl	9d78 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9ebe:	f109 0901 	add.w	r9, r9, #1
    9ec2:	f1b9 0f10 	cmp.w	r9, #16
    9ec6:	d175      	bne.n	9fb4 <log_output_process+0x218>
	print_formatted(output, "|");
    9ec8:	4620      	mov	r0, r4
    9eca:	495e      	ldr	r1, [pc, #376]	; (a044 <log_output_process+0x2a8>)
    9ecc:	f7ff ff54 	bl	9d78 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9ed0:	f04f 0b00 	mov.w	fp, #0
			print_formatted(output, "%c",
    9ed4:	f8df a170 	ldr.w	sl, [pc, #368]	; a048 <log_output_process+0x2ac>
		if (i < length) {
    9ed8:	455f      	cmp	r7, fp
    9eda:	f240 8081 	bls.w	9fe0 <log_output_process+0x244>
			char c = (char)data[i];
    9ede:	9b06      	ldr	r3, [sp, #24]
			print_formatted(output, "%c",
    9ee0:	4651      	mov	r1, sl
			char c = (char)data[i];
    9ee2:	f813 200b 	ldrb.w	r2, [r3, fp]
			print_formatted(output, "%c",
    9ee6:	4620      	mov	r0, r4
	return (int)((((unsigned)c) >= ' ') &&
    9ee8:	f1a2 0320 	sub.w	r3, r2, #32
    9eec:	2b5f      	cmp	r3, #95	; 0x5f
    9eee:	bf28      	it	cs
    9ef0:	222e      	movcs	r2, #46	; 0x2e
    9ef2:	f7ff ff41 	bl	9d78 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9ef6:	f10b 0b01 	add.w	fp, fp, #1
    9efa:	f1bb 0f10 	cmp.w	fp, #16
    9efe:	d167      	bne.n	9fd0 <log_output_process+0x234>
		data += length;
    9f00:	9b06      	ldr	r3, [sp, #24]
    9f02:	443b      	add	r3, r7
    9f04:	9306      	str	r3, [sp, #24]
	} while (len);
    9f06:	9b05      	ldr	r3, [sp, #20]
    9f08:	1bdb      	subs	r3, r3, r7
    9f0a:	9305      	str	r3, [sp, #20]
    9f0c:	d1b4      	bne.n	9e78 <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    9f0e:	9b04      	ldr	r3, [sp, #16]
    9f10:	b17b      	cbz	r3, 9f32 <log_output_process+0x196>
	if (color) {
    9f12:	07f1      	lsls	r1, r6, #31
    9f14:	d504      	bpl.n	9f20 <log_output_process+0x184>
		print_formatted(output, "%s", log_color);
    9f16:	4620      	mov	r0, r4
    9f18:	4a3d      	ldr	r2, [pc, #244]	; (a010 <log_output_process+0x274>)
    9f1a:	493e      	ldr	r1, [pc, #248]	; (a014 <log_output_process+0x278>)
    9f1c:	f7ff ff2c 	bl	9d78 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    9f20:	06f2      	lsls	r2, r6, #27
    9f22:	d406      	bmi.n	9f32 <log_output_process+0x196>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    9f24:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\r\n");
    9f26:	4620      	mov	r0, r4
		print_formatted(ctx, "\n");
    9f28:	bf4c      	ite	mi
    9f2a:	4942      	ldrmi	r1, [pc, #264]	; (a034 <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
    9f2c:	4942      	ldrpl	r1, [pc, #264]	; (a038 <log_output_process+0x29c>)
    9f2e:	f7ff ff23 	bl	9d78 <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    9f32:	4620      	mov	r0, r4
}
    9f34:	b009      	add	sp, #36	; 0x24
    9f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    9f3a:	f008 b935 	b.w	121a8 <log_output_flush>
	uint32_t length = 0U;
    9f3e:	4681      	mov	r9, r0
    9f40:	e750      	b.n	9de4 <log_output_process+0x48>
	} else if (freq != 0U) {
    9f42:	4b42      	ldr	r3, [pc, #264]	; (a04c <log_output_process+0x2b0>)
    9f44:	6818      	ldr	r0, [r3, #0]
    9f46:	2800      	cmp	r0, #0
    9f48:	f43f af56 	beq.w	9df8 <log_output_process+0x5c>
		timestamp /= timestamp_div;
    9f4c:	4b40      	ldr	r3, [pc, #256]	; (a050 <log_output_process+0x2b4>)
    9f4e:	f44f 6561 	mov.w	r5, #3600	; 0xe10
    9f52:	6819      	ldr	r1, [r3, #0]
		ms = (remainder * 1000U) / freq;
    9f54:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    9f58:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
    9f5c:	fbb7 f1f0 	udiv	r1, r7, r0
		seconds -= hours * 3600U;
    9f60:	fbb1 f2f5 	udiv	r2, r1, r5
		remainder = timestamp % freq;
    9f64:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
    9f68:	fb0e f707 	mul.w	r7, lr, r7
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    9f6c:	fbb7 fcf0 	udiv	ip, r7, r0
    9f70:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
    9f74:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    9f76:	fb00 771c 	mls	r7, r0, ip, r7
		mins = seconds / 60U;
    9f7a:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    9f7e:	fb0e f707 	mul.w	r7, lr, r7
    9f82:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
    9f86:	fb01 5113 	mls	r1, r1, r3, r5
    9f8a:	4620      	mov	r0, r4
    9f8c:	9100      	str	r1, [sp, #0]
    9f8e:	e9cd c701 	strd	ip, r7, [sp, #4]
    9f92:	4930      	ldr	r1, [pc, #192]	; (a054 <log_output_process+0x2b8>)
    9f94:	f7ff fef0 	bl	9d78 <print_formatted>
    9f98:	e72e      	b.n	9df8 <log_output_process+0x5c>
	int total = 0;
    9f9a:	f006 0508 	and.w	r5, r6, #8
    9f9e:	e749      	b.n	9e34 <log_output_process+0x98>
		prefix_offset = 0;
    9fa0:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    9fa2:	482d      	ldr	r0, [pc, #180]	; (a058 <log_output_process+0x2bc>)
    9fa4:	e75e      	b.n	9e64 <log_output_process+0xc8>
		print_formatted(output, " ");
    9fa6:	4641      	mov	r1, r8
    9fa8:	4620      	mov	r0, r4
    9faa:	f7ff fee5 	bl	9d78 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    9fae:	f10a 0a01 	add.w	sl, sl, #1
    9fb2:	e771      	b.n	9e98 <log_output_process+0xfc>
		if (i > 0 && !(i % 8)) {
    9fb4:	f019 0f07 	tst.w	r9, #7
    9fb8:	f47f af77 	bne.w	9eaa <log_output_process+0x10e>
			print_formatted(output, " ");
    9fbc:	4641      	mov	r1, r8
    9fbe:	4620      	mov	r0, r4
    9fc0:	f7ff feda 	bl	9d78 <print_formatted>
    9fc4:	e771      	b.n	9eaa <log_output_process+0x10e>
			print_formatted(output, "   ");
    9fc6:	4651      	mov	r1, sl
    9fc8:	4620      	mov	r0, r4
    9fca:	f7ff fed5 	bl	9d78 <print_formatted>
    9fce:	e776      	b.n	9ebe <log_output_process+0x122>
		if (i > 0 && !(i % 8)) {
    9fd0:	f01b 0f07 	tst.w	fp, #7
    9fd4:	d180      	bne.n	9ed8 <log_output_process+0x13c>
			print_formatted(output, " ");
    9fd6:	4641      	mov	r1, r8
    9fd8:	4620      	mov	r0, r4
    9fda:	f7ff fecd 	bl	9d78 <print_formatted>
    9fde:	e77b      	b.n	9ed8 <log_output_process+0x13c>
			print_formatted(output, " ");
    9fe0:	4641      	mov	r1, r8
    9fe2:	4620      	mov	r0, r4
    9fe4:	f7ff fec8 	bl	9d78 <print_formatted>
    9fe8:	e785      	b.n	9ef6 <log_output_process+0x15a>
	if (package) {
    9fea:	f1b8 0f00 	cmp.w	r8, #0
    9fee:	d1d7      	bne.n	9fa0 <log_output_process+0x204>
	if (data_len) {
    9ff0:	9b05      	ldr	r3, [sp, #20]
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d09d      	beq.n	9f32 <log_output_process+0x196>
		prefix_offset = 0;
    9ff6:	9d04      	ldr	r5, [sp, #16]
    9ff8:	e73c      	b.n	9e74 <log_output_process+0xd8>
	if (data_len) {
    9ffa:	9b05      	ldr	r3, [sp, #20]
    9ffc:	2b00      	cmp	r3, #0
    9ffe:	d088      	beq.n	9f12 <log_output_process+0x176>
    a000:	e738      	b.n	9e74 <log_output_process+0xd8>
    a002:	bf00      	nop
    a004:	00013b71 	.word	0x00013b71
    a008:	00013b75 	.word	0x00013b75
    a00c:	00013638 	.word	0x00013638
    a010:	00013b6c 	.word	0x00013b6c
    a014:	00013b9a 	.word	0x00013b9a
    a018:	0001364c 	.word	0x0001364c
    a01c:	00013b9d 	.word	0x00013b9d
    a020:	00013ba3 	.word	0x00013ba3
    a024:	00013ba7 	.word	0x00013ba7
    a028:	000121c3 	.word	0x000121c3
    a02c:	0001219b 	.word	0x0001219b
    a030:	00013bb7 	.word	0x00013bb7
    a034:	00013bad 	.word	0x00013bad
    a038:	00013bac 	.word	0x00013bac
    a03c:	00013bb5 	.word	0x00013bb5
    a040:	00013baf 	.word	0x00013baf
    a044:	00013bb9 	.word	0x00013bb9
    a048:	00013bbb 	.word	0x00013bbb
    a04c:	200089b8 	.word	0x200089b8
    a050:	200089bc 	.word	0x200089bc
    a054:	00013b7e 	.word	0x00013b7e
    a058:	000121f1 	.word	0x000121f1

0000a05c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    a05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    a060:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
    a062:	880f      	ldrh	r7, [r1, #0]
    a064:	4605      	mov	r5, r0
    a066:	460c      	mov	r4, r1
    a068:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    a06a:	688e      	ldr	r6, [r1, #8]
    a06c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    a06e:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    a072:	b15b      	cbz	r3, a08c <log_output_msg_process+0x30>
    a074:	4913      	ldr	r1, [pc, #76]	; (a0c4 <log_output_msg_process+0x68>)
    a076:	1a5b      	subs	r3, r3, r1
    a078:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    a07c:	2900      	cmp	r1, #0
    a07e:	db1f      	blt.n	a0c0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    a080:	7820      	ldrb	r0, [r4, #0]
    a082:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    a086:	f7ff fe07 	bl	9c98 <log_source_name_get>
    a08a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    a08c:	4621      	mov	r1, r4
    a08e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    a092:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    a094:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    a098:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    a09a:	eb01 0402 	add.w	r4, r1, r2
    a09e:	bf08      	it	eq
    a0a0:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    a0a2:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    a0a6:	e9cd 0803 	strd	r0, r8, [sp, #12]
    a0aa:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a0ae:	2200      	movs	r2, #0
    a0b0:	4631      	mov	r1, r6
    a0b2:	4628      	mov	r0, r5
    a0b4:	9700      	str	r7, [sp, #0]
    a0b6:	f7ff fe71 	bl	9d9c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    a0ba:	b006      	add	sp, #24
    a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    a0c0:	2300      	movs	r3, #0
    a0c2:	e7e3      	b.n	a08c <log_output_msg_process+0x30>
    a0c4:	00013534 	.word	0x00013534

0000a0c8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    a0c8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    a0cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    a0ce:	428b      	cmp	r3, r1
    a0d0:	bf28      	it	cs
    a0d2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    a0d4:	6805      	ldr	r5, [r0, #0]
{
    a0d6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    a0d8:	2105      	movs	r1, #5
    a0da:	4668      	mov	r0, sp
    a0dc:	4a0d      	ldr	r2, [pc, #52]	; (a114 <log_output_dropped_process+0x4c>)
    a0de:	f007 fa83 	bl	115e8 <snprintk>
    a0e2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    a0e4:	6863      	ldr	r3, [r4, #4]
    a0e6:	4628      	mov	r0, r5
    a0e8:	220b      	movs	r2, #11
    a0ea:	685b      	ldr	r3, [r3, #4]
    a0ec:	490a      	ldr	r1, [pc, #40]	; (a118 <log_output_dropped_process+0x50>)
    a0ee:	f008 f847 	bl	12180 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    a0f2:	6863      	ldr	r3, [r4, #4]
    a0f4:	4632      	mov	r2, r6
    a0f6:	4669      	mov	r1, sp
    a0f8:	4628      	mov	r0, r5
    a0fa:	685b      	ldr	r3, [r3, #4]
    a0fc:	f008 f840 	bl	12180 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    a100:	6863      	ldr	r3, [r4, #4]
    a102:	221b      	movs	r2, #27
    a104:	4628      	mov	r0, r5
    a106:	685b      	ldr	r3, [r3, #4]
    a108:	4904      	ldr	r1, [pc, #16]	; (a11c <log_output_dropped_process+0x54>)
    a10a:	f008 f839 	bl	12180 <buffer_write>
		     output->control_block->ctx);
}
    a10e:	b002      	add	sp, #8
    a110:	bd70      	pop	{r4, r5, r6, pc}
    a112:	bf00      	nop
    a114:	00013ab6 	.word	0x00013ab6
    a118:	00013bfa 	.word	0x00013bfa
    a11c:	00013bde 	.word	0x00013bde

0000a120 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    a120:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    a122:	2100      	movs	r1, #0
	timestamp_div = 1U;
    a124:	4a07      	ldr	r2, [pc, #28]	; (a144 <log_output_timestamp_freq_set+0x24>)
{
    a126:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    a128:	4c07      	ldr	r4, [pc, #28]	; (a148 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    a12a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    a12c:	42a0      	cmp	r0, r4
    a12e:	d804      	bhi.n	a13a <log_output_timestamp_freq_set+0x1a>
    a130:	b101      	cbz	r1, a134 <log_output_timestamp_freq_set+0x14>
    a132:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    a134:	4b05      	ldr	r3, [pc, #20]	; (a14c <log_output_timestamp_freq_set+0x2c>)
    a136:	6018      	str	r0, [r3, #0]
}
    a138:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    a13a:	2101      	movs	r1, #1
		frequency /= 2U;
    a13c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    a13e:	005b      	lsls	r3, r3, #1
    a140:	e7f4      	b.n	a12c <log_output_timestamp_freq_set+0xc>
    a142:	bf00      	nop
    a144:	200089bc 	.word	0x200089bc
    a148:	000f4240 	.word	0x000f4240
    a14c:	200089b8 	.word	0x200089b8

0000a150 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a152:	460d      	mov	r5, r1
    a154:	4604      	mov	r4, r0
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    a156:	4f06      	ldr	r7, [pc, #24]	; (a170 <char_out+0x20>)
    a158:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    a15a:	42b4      	cmp	r4, r6
    a15c:	d101      	bne.n	a162 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    a15e:	4628      	mov	r0, r5
    a160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    a162:	6838      	ldr	r0, [r7, #0]
    a164:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    a168:	6883      	ldr	r3, [r0, #8]
    a16a:	685b      	ldr	r3, [r3, #4]
    a16c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    a16e:	e7f4      	b.n	a15a <char_out+0xa>
    a170:	200089d8 	.word	0x200089d8

0000a174 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    a174:	4b01      	ldr	r3, [pc, #4]	; (a17c <format_set+0x8>)
	return 0;
}
    a176:	2000      	movs	r0, #0
	log_format_current = log_type;
    a178:	6019      	str	r1, [r3, #0]
}
    a17a:	4770      	bx	lr
    a17c:	200089c8 	.word	0x200089c8

0000a180 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    a180:	4b01      	ldr	r3, [pc, #4]	; (a188 <log_backend_uart_init+0x8>)
    a182:	4a02      	ldr	r2, [pc, #8]	; (a18c <log_backend_uart_init+0xc>)
    a184:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    a186:	4770      	bx	lr
    a188:	200089d8 	.word	0x200089d8
    a18c:	00013298 	.word	0x00013298

0000a190 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    a190:	2201      	movs	r2, #1
    a192:	4b02      	ldr	r3, [pc, #8]	; (a19c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    a194:	4802      	ldr	r0, [pc, #8]	; (a1a0 <panic+0x10>)
    a196:	701a      	strb	r2, [r3, #0]
    a198:	f008 b806 	b.w	121a8 <log_output_flush>
    a19c:	200098a7 	.word	0x200098a7
    a1a0:	0001367c 	.word	0x0001367c

0000a1a4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    a1a4:	4801      	ldr	r0, [pc, #4]	; (a1ac <dropped+0x8>)
    a1a6:	f7ff bf8f 	b.w	a0c8 <log_output_dropped_process>
    a1aa:	bf00      	nop
    a1ac:	0001367c 	.word	0x0001367c

0000a1b0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a1b0:	4b06      	ldr	r3, [pc, #24]	; (a1cc <process+0x1c>)
{
    a1b2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a1b4:	6818      	ldr	r0, [r3, #0]
{
    a1b6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a1b8:	f7ff fbde 	bl	9978 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    a1bc:	4621      	mov	r1, r4
}
    a1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    a1c2:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    a1c4:	220f      	movs	r2, #15
    a1c6:	4802      	ldr	r0, [pc, #8]	; (a1d0 <process+0x20>)
    a1c8:	4718      	bx	r3
    a1ca:	bf00      	nop
    a1cc:	200089c8 	.word	0x200089c8
    a1d0:	0001367c 	.word	0x0001367c

0000a1d4 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    a1d4:	4b0c      	ldr	r3, [pc, #48]	; (a208 <class_handler+0x34>)
{
    a1d6:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    a1d8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a1da:	4e0c      	ldr	r6, [pc, #48]	; (a20c <class_handler+0x38>)
    a1dc:	4b0c      	ldr	r3, [pc, #48]	; (a210 <class_handler+0x3c>)
    a1de:	42b3      	cmp	r3, r6
    a1e0:	d303      	bcc.n	a1ea <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    a1e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a1e6:	bcf0      	pop	{r4, r5, r6, r7}
    a1e8:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    a1ea:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    a1ec:	42bd      	cmp	r5, r7
    a1ee:	d309      	bcc.n	a204 <class_handler+0x30>
		if (iface->class_handler &&
    a1f0:	691c      	ldr	r4, [r3, #16]
    a1f2:	b13c      	cbz	r4, a204 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    a1f4:	f895 c002 	ldrb.w	ip, [r5, #2]
    a1f8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    a1fa:	45ac      	cmp	ip, r5
    a1fc:	d102      	bne.n	a204 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    a1fe:	4623      	mov	r3, r4
}
    a200:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    a202:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a204:	3324      	adds	r3, #36	; 0x24
    a206:	e7ea      	b.n	a1de <class_handler+0xa>
    a208:	200089dc 	.word	0x200089dc
    a20c:	20008210 	.word	0x20008210
    a210:	200081ec 	.word	0x200081ec

0000a214 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    a214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a218:	4605      	mov	r5, r0
    a21a:	460e      	mov	r6, r1
    a21c:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a21e:	4c12      	ldr	r4, [pc, #72]	; (a268 <custom_handler+0x54>)
    a220:	f8df 8048 	ldr.w	r8, [pc, #72]	; a26c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    a224:	f8df 9048 	ldr.w	r9, [pc, #72]	; a270 <custom_handler+0x5c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a228:	4544      	cmp	r4, r8
    a22a:	d303      	bcc.n	a234 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    a22c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    a234:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    a236:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    a23a:	429a      	cmp	r2, r3
    a23c:	d312      	bcc.n	a264 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    a23e:	69a3      	ldr	r3, [r4, #24]
    a240:	b183      	cbz	r3, a264 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    a242:	7890      	ldrb	r0, [r2, #2]
    a244:	7929      	ldrb	r1, [r5, #4]
    a246:	4288      	cmp	r0, r1
    a248:	d105      	bne.n	a256 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    a24a:	463a      	mov	r2, r7
    a24c:	4631      	mov	r1, r6
    a24e:	4628      	mov	r0, r5
}
    a250:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    a254:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    a256:	7952      	ldrb	r2, [r2, #5]
    a258:	2a01      	cmp	r2, #1
    a25a:	d103      	bne.n	a264 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    a25c:	463a      	mov	r2, r7
    a25e:	4631      	mov	r1, r6
    a260:	4628      	mov	r0, r5
    a262:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a264:	3424      	adds	r4, #36	; 0x24
    a266:	e7df      	b.n	a228 <custom_handler+0x14>
    a268:	200081ec 	.word	0x200081ec
    a26c:	20008210 	.word	0x20008210
    a270:	200089dc 	.word	0x200089dc

0000a274 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a278:	4605      	mov	r5, r0
    a27a:	460e      	mov	r6, r1
    a27c:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a27e:	4c0a      	ldr	r4, [pc, #40]	; (a2a8 <vendor_handler+0x34>)
    a280:	f8df 8028 	ldr.w	r8, [pc, #40]	; a2ac <vendor_handler+0x38>
    a284:	4544      	cmp	r4, r8
    a286:	d302      	bcc.n	a28e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    a288:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a28c:	e009      	b.n	a2a2 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    a28e:	6963      	ldr	r3, [r4, #20]
    a290:	b90b      	cbnz	r3, a296 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a292:	3424      	adds	r4, #36	; 0x24
    a294:	e7f6      	b.n	a284 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    a296:	463a      	mov	r2, r7
    a298:	4631      	mov	r1, r6
    a29a:	4628      	mov	r0, r5
    a29c:	4798      	blx	r3
    a29e:	2800      	cmp	r0, #0
    a2a0:	d1f7      	bne.n	a292 <vendor_handler+0x1e>
}
    a2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2a6:	bf00      	nop
    a2a8:	200081ec 	.word	0x200081ec
    a2ac:	20008210 	.word	0x20008210

0000a2b0 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    a2b0:	2208      	movs	r2, #8
    a2b2:	2100      	movs	r1, #0
    a2b4:	4801      	ldr	r0, [pc, #4]	; (a2bc <usb_reset_alt_setting+0xc>)
    a2b6:	f008 b853 	b.w	12360 <memset>
    a2ba:	bf00      	nop
    a2bc:	20008a97 	.word	0x20008a97

0000a2c0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    a2c0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a2c2:	4b0b      	ldr	r3, [pc, #44]	; (a2f0 <is_ep_valid.part.0+0x30>)
    a2c4:	4c0b      	ldr	r4, [pc, #44]	; (a2f4 <is_ep_valid.part.0+0x34>)
    a2c6:	42a3      	cmp	r3, r4
    a2c8:	d301      	bcc.n	a2ce <is_ep_valid.part.0+0xe>
	return false;
    a2ca:	2000      	movs	r0, #0
}
    a2cc:	bd70      	pop	{r4, r5, r6, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a2ce:	2200      	movs	r2, #0
		ep_data = cfg_data->endpoint;
    a2d0:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a2d2:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
    a2d4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a2d6:	b2d5      	uxtb	r5, r2
    a2d8:	42ae      	cmp	r6, r5
    a2da:	d801      	bhi.n	a2e0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a2dc:	3324      	adds	r3, #36	; 0x24
    a2de:	e7f2      	b.n	a2c6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    a2e0:	3201      	adds	r2, #1
    a2e2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    a2e6:	4285      	cmp	r5, r0
    a2e8:	d1f5      	bne.n	a2d6 <is_ep_valid.part.0+0x16>
				return true;
    a2ea:	2001      	movs	r0, #1
    a2ec:	e7ee      	b.n	a2cc <is_ep_valid.part.0+0xc>
    a2ee:	bf00      	nop
    a2f0:	200081ec 	.word	0x200081ec
    a2f4:	20008210 	.word	0x20008210

0000a2f8 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    a2f8:	4809      	ldr	r0, [pc, #36]	; (a320 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    a2fa:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    a2fc:	7803      	ldrb	r3, [r0, #0]
    a2fe:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    a302:	330a      	adds	r3, #10
    a304:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    a308:	b13b      	cbz	r3, a31a <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    a30a:	f100 0208 	add.w	r2, r0, #8
    a30e:	f100 0110 	add.w	r1, r0, #16
    a312:	4798      	blx	r3
    a314:	43c0      	mvns	r0, r0
    a316:	0fc0      	lsrs	r0, r0, #31
}
    a318:	bd08      	pop	{r3, pc}
		return false;
    a31a:	4618      	mov	r0, r3
    a31c:	e7fc      	b.n	a318 <usb_handle_request.constprop.0+0x20>
    a31e:	bf00      	nop
    a320:	200089dc 	.word	0x200089dc

0000a324 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
    a324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    a326:	4b08      	ldr	r3, [pc, #32]	; (a348 <usb_device_init.part.0+0x24>)
    a328:	9305      	str	r3, [sp, #20]
    a32a:	2302      	movs	r3, #2
    a32c:	9304      	str	r3, [sp, #16]
    a32e:	2300      	movs	r3, #0
    a330:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a334:	4805      	ldr	r0, [pc, #20]	; (a34c <usb_device_init.part.0+0x28>)
    a336:	aa04      	add	r2, sp, #16
    a338:	f7ff fcca 	bl	9cd0 <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    a33c:	f04f 30ff 	mov.w	r0, #4294967295
    a340:	b007      	add	sp, #28
    a342:	f85d fb04 	ldr.w	pc, [sp], #4
    a346:	bf00      	nop
    a348:	00013c20 	.word	0x00013c20
    a34c:	0001359c 	.word	0x0001359c

0000a350 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    a350:	2804      	cmp	r0, #4
{
    a352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a356:	4604      	mov	r4, r0
    a358:	460e      	mov	r6, r1
    a35a:	f8df 8084 	ldr.w	r8, [pc, #132]	; a3e0 <forward_status_cb+0x90>
	if (status == USB_DC_DISCONNECTED) {
    a35e:	d10e      	bne.n	a37e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    a360:	f7ff ffa6 	bl	a2b0 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    a364:	f8df 907c 	ldr.w	r9, [pc, #124]	; a3e4 <forward_status_cb+0x94>
    a368:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    a36c:	b15b      	cbz	r3, a386 <forward_status_cb+0x36>
			usb_cancel_transfers();
    a36e:	f000 fe1b 	bl	afa8 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    a372:	2c04      	cmp	r4, #4
    a374:	d001      	beq.n	a37a <forward_status_cb+0x2a>
    a376:	2c01      	cmp	r4, #1
    a378:	d105      	bne.n	a386 <forward_status_cb+0x36>
    a37a:	4d1b      	ldr	r5, [pc, #108]	; (a3e8 <forward_status_cb+0x98>)
    a37c:	e016      	b.n	a3ac <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    a37e:	2805      	cmp	r0, #5
    a380:	d0f0      	beq.n	a364 <forward_status_cb+0x14>
    a382:	2801      	cmp	r0, #1
    a384:	d0ee      	beq.n	a364 <forward_status_cb+0x14>
    a386:	4d18      	ldr	r5, [pc, #96]	; (a3e8 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a388:	4545      	cmp	r5, r8
    a38a:	d31f      	bcc.n	a3cc <forward_status_cb+0x7c>
	if (usb_dev.user_status_callback) {
    a38c:	4b15      	ldr	r3, [pc, #84]	; (a3e4 <forward_status_cb+0x94>)
    a38e:	6a1b      	ldr	r3, [r3, #32]
    a390:	b323      	cbz	r3, a3dc <forward_status_cb+0x8c>
		usb_dev.user_status_callback(status, param);
    a392:	4631      	mov	r1, r6
    a394:	4620      	mov	r0, r4
}
    a396:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    a39a:	4718      	bx	r3
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a39c:	2700      	movs	r7, #0
		ep_data = cfg_data->endpoint;
    a39e:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    a3a2:	7f2a      	ldrb	r2, [r5, #28]
    a3a4:	b2fb      	uxtb	r3, r7
    a3a6:	429a      	cmp	r2, r3
    a3a8:	d803      	bhi.n	a3b2 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a3aa:	3524      	adds	r5, #36	; 0x24
    a3ac:	4545      	cmp	r5, r8
    a3ae:	d3f5      	bcc.n	a39c <forward_status_cb+0x4c>
    a3b0:	e008      	b.n	a3c4 <forward_status_cb+0x74>
	return usb_dc_ep_disable(ep_data->ep_addr);
    a3b2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    a3b6:	7918      	ldrb	r0, [r3, #4]
    a3b8:	f002 fd7c 	bl	ceb4 <usb_dc_ep_disable>
			if (ret < 0) {
    a3bc:	2800      	cmp	r0, #0
    a3be:	f107 0701 	add.w	r7, r7, #1
    a3c2:	daee      	bge.n	a3a2 <forward_status_cb+0x52>
				usb_dev.configured = false;
    a3c4:	2300      	movs	r3, #0
    a3c6:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    a3ca:	e7dc      	b.n	a386 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    a3cc:	68eb      	ldr	r3, [r5, #12]
    a3ce:	b11b      	cbz	r3, a3d8 <forward_status_cb+0x88>
			cfg_data->cb_usb_status(cfg_data, status, param);
    a3d0:	4632      	mov	r2, r6
    a3d2:	4621      	mov	r1, r4
    a3d4:	4628      	mov	r0, r5
    a3d6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    a3d8:	3524      	adds	r5, #36	; 0x24
    a3da:	e7d5      	b.n	a388 <forward_status_cb+0x38>
}
    a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a3e0:	20008210 	.word	0x20008210
    a3e4:	200089dc 	.word	0x200089dc
    a3e8:	200081ec 	.word	0x200081ec

0000a3ec <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    a3ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    a3ee:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    a3f0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    a3f2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    a3f4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    a3f8:	d007      	beq.n	a40a <usb_halt_endpoint_req.isra.0+0x1e>
    a3fa:	4620      	mov	r0, r4
    a3fc:	f7ff ff60 	bl	a2c0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    a400:	b188      	cbz	r0, a426 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    a402:	4b0f      	ldr	r3, [pc, #60]	; (a440 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    a404:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    a408:	b168      	cbz	r0, a426 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    a40a:	4620      	mov	r0, r4
    a40c:	4e0c      	ldr	r6, [pc, #48]	; (a440 <usb_halt_endpoint_req.isra.0+0x54>)
		if (halt) {
    a40e:	b165      	cbz	r5, a42a <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    a410:	f002 fcb2 	bl	cd78 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    a414:	69f3      	ldr	r3, [r6, #28]
    a416:	b90b      	cbnz	r3, a41c <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    a418:	2001      	movs	r0, #1
    a41a:	e004      	b.n	a426 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    a41c:	2008      	movs	r0, #8
    a41e:	f10d 0107 	add.w	r1, sp, #7
    a422:	4798      	blx	r3
		return true;
    a424:	4628      	mov	r0, r5
}
    a426:	b002      	add	sp, #8
    a428:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    a42a:	f002 fcdd 	bl	cde8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    a42e:	69f3      	ldr	r3, [r6, #28]
    a430:	2b00      	cmp	r3, #0
    a432:	d0f1      	beq.n	a418 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    a434:	2009      	movs	r0, #9
    a436:	f10d 0107 	add.w	r1, sp, #7
    a43a:	4798      	blx	r3
    a43c:	e7ec      	b.n	a418 <usb_halt_endpoint_req.isra.0+0x2c>
    a43e:	bf00      	nop
    a440:	200089dc 	.word	0x200089dc

0000a444 <set_endpoint>:
{
    a444:	b590      	push	{r4, r7, lr}
    a446:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    a448:	7883      	ldrb	r3, [r0, #2]
{
    a44a:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    a44c:	703b      	strb	r3, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    a44e:	7903      	ldrb	r3, [r0, #4]
    a450:	7942      	ldrb	r2, [r0, #5]
    a452:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a456:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    a458:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    a45a:	4638      	mov	r0, r7
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    a45c:	f003 0303 	and.w	r3, r3, #3
    a460:	713b      	strb	r3, [r7, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    a462:	f002 fc57 	bl	cd14 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    a466:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    a46a:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    a46c:	7838      	ldrb	r0, [r7, #0]
    a46e:	d014      	beq.n	a49a <set_endpoint+0x56>
	} else if (ret) {
    a470:	b19b      	cbz	r3, a49a <set_endpoint+0x56>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    a472:	466c      	mov	r4, sp
    a474:	b088      	sub	sp, #32
    a476:	466a      	mov	r2, sp
    a478:	4b11      	ldr	r3, [pc, #68]	; (a4c0 <set_endpoint+0x7c>)
    a47a:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    a47e:	2303      	movs	r3, #3
    a480:	f842 3f10 	str.w	r3, [r2, #16]!
    a484:	480f      	ldr	r0, [pc, #60]	; (a4c4 <set_endpoint+0x80>)
    a486:	2300      	movs	r3, #0
    a488:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a48c:	f7ff fc20 	bl	9cd0 <z_impl_z_log_msg_static_create>
		return false;
    a490:	2000      	movs	r0, #0
    a492:	46a5      	mov	sp, r4
}
    a494:	370c      	adds	r7, #12
    a496:	46bd      	mov	sp, r7
    a498:	bd90      	pop	{r4, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    a49a:	f002 fce1 	bl	ce60 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    a49e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a4a2:	d008      	beq.n	a4b6 <set_endpoint+0x72>
	} else if (ret) {
    a4a4:	b138      	cbz	r0, a4b6 <set_endpoint+0x72>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    a4a6:	466c      	mov	r4, sp
    a4a8:	b088      	sub	sp, #32
    a4aa:	466a      	mov	r2, sp
    a4ac:	783b      	ldrb	r3, [r7, #0]
    a4ae:	4906      	ldr	r1, [pc, #24]	; (a4c8 <set_endpoint+0x84>)
    a4b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a4b4:	e7e3      	b.n	a47e <set_endpoint+0x3a>
	usb_dev.configured = true;
    a4b6:	2001      	movs	r0, #1
    a4b8:	4b04      	ldr	r3, [pc, #16]	; (a4cc <set_endpoint+0x88>)
    a4ba:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    a4be:	e7e9      	b.n	a494 <set_endpoint+0x50>
    a4c0:	00013c45 	.word	0x00013c45
    a4c4:	0001359c 	.word	0x0001359c
    a4c8:	00013c69 	.word	0x00013c69
    a4cc:	200089dc 	.word	0x200089dc

0000a4d0 <usb_handle_standard_request>:
{
    a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4d4:	b083      	sub	sp, #12
	if (usb_dev.custom_req_handler &&
    a4d6:	4ead      	ldr	r6, [pc, #692]	; (a78c <usb_handle_standard_request+0x2bc>)
{
    a4d8:	4604      	mov	r4, r0
	if (usb_dev.custom_req_handler &&
    a4da:	69b3      	ldr	r3, [r6, #24]
{
    a4dc:	4688      	mov	r8, r1
    a4de:	4691      	mov	r9, r2
    a4e0:	af00      	add	r7, sp, #0
	if (usb_dev.custom_req_handler &&
    a4e2:	b963      	cbnz	r3, a4fe <usb_handle_standard_request+0x2e>
	switch (setup->RequestType.recipient) {
    a4e4:	7820      	ldrb	r0, [r4, #0]
    a4e6:	f000 001f 	and.w	r0, r0, #31
    a4ea:	2801      	cmp	r0, #1
    a4ec:	f000 80ac 	beq.w	a648 <usb_handle_standard_request+0x178>
    a4f0:	2802      	cmp	r0, #2
    a4f2:	f000 812b 	beq.w	a74c <usb_handle_standard_request+0x27c>
    a4f6:	b138      	cbz	r0, a508 <usb_handle_standard_request+0x38>
		switch (setup->bRequest) {
    a4f8:	f06f 0015 	mvn.w	r0, #21
    a4fc:	e099      	b.n	a632 <usb_handle_standard_request+0x162>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    a4fe:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    a500:	2800      	cmp	r0, #0
    a502:	d1ef      	bne.n	a4e4 <usb_handle_standard_request+0x14>
	int rc = 0;
    a504:	2000      	movs	r0, #0
    a506:	e094      	b.n	a632 <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    a508:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    a50c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    a50e:	2a00      	cmp	r2, #0
    a510:	da32      	bge.n	a578 <usb_handle_standard_request+0xa8>
		switch (setup->bRequest) {
    a512:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    a514:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    a518:	d010      	beq.n	a53c <usb_handle_standard_request+0x6c>
    a51a:	2b08      	cmp	r3, #8
    a51c:	d025      	beq.n	a56a <usb_handle_standard_request+0x9a>
    a51e:	2b00      	cmp	r3, #0
    a520:	d1ea      	bne.n	a4f8 <usb_handle_standard_request+0x28>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    a522:	2101      	movs	r1, #1
	data[1] = 0U;
    a524:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    a526:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    a528:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    a52c:	2900      	cmp	r1, #0
    a52e:	bf18      	it	ne
    a530:	2302      	movne	r3, #2
    a532:	f043 0301 	orr.w	r3, r3, #1
    a536:	7013      	strb	r3, [r2, #0]
		*len = 2;
    a538:	2302      	movs	r3, #2
    a53a:	e01a      	b.n	a572 <usb_handle_standard_request+0xa2>
			return usb_get_descriptor(setup, len, data_buf);
    a53c:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    a53e:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    a540:	1f11      	subs	r1, r2, #4
    a542:	2901      	cmp	r1, #1
    a544:	d9d8      	bls.n	a4f8 <usb_handle_standard_request+0x28>
    a546:	2a07      	cmp	r2, #7
    a548:	d8d6      	bhi.n	a4f8 <usb_handle_standard_request+0x28>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    a54a:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    a54c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    a54e:	781c      	ldrb	r4, [r3, #0]
    a550:	2c00      	cmp	r4, #0
    a552:	d0d1      	beq.n	a4f8 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == type) {
    a554:	785d      	ldrb	r5, [r3, #1]
    a556:	4295      	cmp	r5, r2
    a558:	d103      	bne.n	a562 <usb_handle_standard_request+0x92>
			if (cur_index == index) {
    a55a:	4281      	cmp	r1, r0
    a55c:	f000 8134 	beq.w	a7c8 <usb_handle_standard_request+0x2f8>
			cur_index++;
    a560:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    a562:	4423      	add	r3, r4
    a564:	e7f3      	b.n	a54e <usb_handle_standard_request+0x7e>
			*len = p[DESC_bLength];
    a566:	781b      	ldrb	r3, [r3, #0]
    a568:	e134      	b.n	a7d4 <usb_handle_standard_request+0x304>
			data[0] = usb_dev.configuration;
    a56a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    a56e:	7013      	strb	r3, [r2, #0]
			*len = 1;
    a570:	2301      	movs	r3, #1
		*len = 2;
    a572:	f8c8 3000 	str.w	r3, [r8]
		return true;
    a576:	e05c      	b.n	a632 <usb_handle_standard_request+0x162>
		switch (setup->bRequest) {
    a578:	3b01      	subs	r3, #1
    a57a:	2b08      	cmp	r3, #8
    a57c:	d8bc      	bhi.n	a4f8 <usb_handle_standard_request+0x28>
    a57e:	a201      	add	r2, pc, #4	; (adr r2, a584 <usb_handle_standard_request+0xb4>)
    a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a584:	0000a625 	.word	0x0000a625
    a588:	0000a4f9 	.word	0x0000a4f9
    a58c:	0000a63b 	.word	0x0000a63b
    a590:	0000a4f9 	.word	0x0000a4f9
    a594:	0000a5a9 	.word	0x0000a5a9
    a598:	0000a4f9 	.word	0x0000a4f9
    a59c:	0000a4f9 	.word	0x0000a4f9
    a5a0:	0000a4f9 	.word	0x0000a4f9
    a5a4:	0000a5b5 	.word	0x0000a5b5
			return !usb_dc_set_address(setup->wValue);
    a5a8:	78a0      	ldrb	r0, [r4, #2]
    a5aa:	f002 fb77 	bl	cc9c <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    a5ae:	2800      	cmp	r0, #0
    a5b0:	d0a8      	beq.n	a504 <usb_handle_standard_request+0x34>
    a5b2:	e7a1      	b.n	a4f8 <usb_handle_standard_request+0x28>
	if (setup->wValue == 0U) {
    a5b4:	8865      	ldrh	r5, [r4, #2]
    a5b6:	b155      	cbz	r5, a5ce <usb_handle_standard_request+0xfe>
	uint8_t cur_config = 0xFF;
    a5b8:	f04f 09ff 	mov.w	r9, #255	; 0xff
	bool found = false;
    a5bc:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    a5be:	46ca      	mov	sl, r9
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    a5c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    a5c4:	f898 5000 	ldrb.w	r5, [r8]
    a5c8:	b96d      	cbnz	r5, a5e6 <usb_handle_standard_request+0x116>
	if (found) {
    a5ca:	2800      	cmp	r0, #0
    a5cc:	d094      	beq.n	a4f8 <usb_handle_standard_request+0x28>
		usb_reset_alt_setting();
    a5ce:	f7ff fe6f 	bl	a2b0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    a5d2:	8863      	ldrh	r3, [r4, #2]
    a5d4:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    a5d8:	69f3      	ldr	r3, [r6, #28]
    a5da:	2b00      	cmp	r3, #0
    a5dc:	d092      	beq.n	a504 <usb_handle_standard_request+0x34>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    a5de:	2003      	movs	r0, #3
    a5e0:	496b      	ldr	r1, [pc, #428]	; (a790 <usb_handle_standard_request+0x2c0>)
    a5e2:	4798      	blx	r3
    a5e4:	e78e      	b.n	a504 <usb_handle_standard_request+0x34>
		switch (p[DESC_bDescriptorType]) {
    a5e6:	f898 3001 	ldrb.w	r3, [r8, #1]
    a5ea:	2b04      	cmp	r3, #4
    a5ec:	d00d      	beq.n	a60a <usb_handle_standard_request+0x13a>
    a5ee:	2b05      	cmp	r3, #5
    a5f0:	d00e      	beq.n	a610 <usb_handle_standard_request+0x140>
    a5f2:	2b02      	cmp	r3, #2
    a5f4:	d105      	bne.n	a602 <usb_handle_standard_request+0x132>
			cur_config = p[CONF_DESC_bConfigurationValue];
    a5f6:	f898 9005 	ldrb.w	r9, [r8, #5]
			if (cur_config == setup->wValue) {
    a5fa:	8862      	ldrh	r2, [r4, #2]
				found = true;
    a5fc:	454a      	cmp	r2, r9
    a5fe:	bf08      	it	eq
    a600:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    a602:	f898 3000 	ldrb.w	r3, [r8]
    a606:	4498      	add	r8, r3
    a608:	e7dc      	b.n	a5c4 <usb_handle_standard_request+0xf4>
			cur_alt_setting =
    a60a:	f898 a003 	ldrb.w	sl, [r8, #3]
			break;
    a60e:	e7f8      	b.n	a602 <usb_handle_standard_request+0x132>
			if ((cur_config != setup->wValue) ||
    a610:	8863      	ldrh	r3, [r4, #2]
    a612:	454b      	cmp	r3, r9
    a614:	d1f5      	bne.n	a602 <usb_handle_standard_request+0x132>
    a616:	f1ba 0f00 	cmp.w	sl, #0
    a61a:	d1f2      	bne.n	a602 <usb_handle_standard_request+0x132>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    a61c:	4640      	mov	r0, r8
    a61e:	f7ff ff11 	bl	a444 <set_endpoint>
			break;
    a622:	e7ee      	b.n	a602 <usb_handle_standard_request+0x132>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    a624:	8863      	ldrh	r3, [r4, #2]
    a626:	2b01      	cmp	r3, #1
    a628:	f47f af66 	bne.w	a4f8 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = false;
    a62c:	2000      	movs	r0, #0
    a62e:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    a632:	370c      	adds	r7, #12
    a634:	46bd      	mov	sp, r7
    a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    a63a:	8863      	ldrh	r3, [r4, #2]
    a63c:	2b01      	cmp	r3, #1
    a63e:	f47f af5b 	bne.w	a4f8 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = true;
    a642:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    a646:	e75d      	b.n	a504 <usb_handle_standard_request+0x34>
	if (!is_device_configured() ||
    a648:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    a64c:	2b00      	cmp	r3, #0
    a64e:	f43f af53 	beq.w	a4f8 <usb_handle_standard_request+0x28>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    a652:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    a654:	f8b4 c004 	ldrh.w	ip, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    a658:	462b      	mov	r3, r5
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    a65a:	7920      	ldrb	r0, [r4, #4]
	while (p[DESC_bLength] != 0U) {
    a65c:	781a      	ldrb	r2, [r3, #0]
    a65e:	2a00      	cmp	r2, #0
    a660:	f43f af4a 	beq.w	a4f8 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    a664:	7859      	ldrb	r1, [r3, #1]
    a666:	2902      	cmp	r1, #2
    a668:	d104      	bne.n	a674 <usb_handle_standard_request+0x1a4>
			if (interface < cfg_descr->bNumInterfaces) {
    a66a:	f893 e004 	ldrb.w	lr, [r3, #4]
    a66e:	4586      	cmp	lr, r0
    a670:	f200 80b3 	bhi.w	a7da <usb_handle_standard_request+0x30a>
		p += p[DESC_bLength];
    a674:	4413      	add	r3, r2
    a676:	e7f1      	b.n	a65c <usb_handle_standard_request+0x18c>
			data[0] = 0U;
    a678:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    a67a:	7050      	strb	r0, [r2, #1]
			*len = 2;
    a67c:	f8c8 1000 	str.w	r1, [r8]
			return true;
    a680:	e7d7      	b.n	a632 <usb_handle_standard_request+0x162>
		p += p[DESC_bLength];
    a682:	440d      	add	r5, r1
    a684:	e0b7      	b.n	a7f6 <usb_handle_standard_request+0x326>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    a686:	280b      	cmp	r0, #11
    a688:	f47f af36 	bne.w	a4f8 <usb_handle_standard_request+0x28>
	bool ret = false;
    a68c:	f04f 0b00 	mov.w	fp, #0
	uint8_t cur_iface = 0xFF;
    a690:	f04f 0aff 	mov.w	sl, #255	; 0xff
	const uint8_t *if_desc = NULL;
    a694:	46d9      	mov	r9, fp
	uint8_t cur_alt_setting = 0xFF;
    a696:	46d0      	mov	r8, sl
    a698:	e006      	b.n	a6a8 <usb_handle_standard_request+0x1d8>
		switch (p[DESC_bDescriptorType]) {
    a69a:	786b      	ldrb	r3, [r5, #1]
    a69c:	2b04      	cmp	r3, #4
    a69e:	d010      	beq.n	a6c2 <usb_handle_standard_request+0x1f2>
    a6a0:	2b05      	cmp	r3, #5
    a6a2:	d024      	beq.n	a6ee <usb_handle_standard_request+0x21e>
		p += p[DESC_bLength];
    a6a4:	782b      	ldrb	r3, [r5, #0]
    a6a6:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    a6a8:	782b      	ldrb	r3, [r5, #0]
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	d1f5      	bne.n	a69a <usb_handle_standard_request+0x1ca>
	if (usb_dev.status_callback) {
    a6ae:	69f3      	ldr	r3, [r6, #28]
    a6b0:	b113      	cbz	r3, a6b8 <usb_handle_standard_request+0x1e8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    a6b2:	4649      	mov	r1, r9
    a6b4:	2007      	movs	r0, #7
    a6b6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    a6b8:	f1bb 0f00 	cmp.w	fp, #0
    a6bc:	f47f af22 	bne.w	a504 <usb_handle_standard_request+0x34>
    a6c0:	e71a      	b.n	a4f8 <usb_handle_standard_request+0x28>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    a6c2:	f895 a002 	ldrb.w	sl, [r5, #2]
			if (cur_iface == setup->wIndex &&
    a6c6:	88a2      	ldrh	r2, [r4, #4]
    a6c8:	4653      	mov	r3, sl
    a6ca:	4592      	cmp	sl, r2
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    a6cc:	f895 8003 	ldrb.w	r8, [r5, #3]
			if (cur_iface == setup->wIndex &&
    a6d0:	d1e8      	bne.n	a6a4 <usb_handle_standard_request+0x1d4>
			    cur_alt_setting == setup->wValue) {
    a6d2:	8861      	ldrh	r1, [r4, #2]
			if (cur_iface == setup->wIndex &&
    a6d4:	fa1f f288 	uxth.w	r2, r8
    a6d8:	4588      	cmp	r8, r1
    a6da:	d1e3      	bne.n	a6a4 <usb_handle_standard_request+0x1d4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    a6dc:	2b07      	cmp	r3, #7
    a6de:	d833      	bhi.n	a748 <usb_handle_standard_request+0x278>
		return true;
    a6e0:	46a9      	mov	r9, r5
		usb_dev.alt_setting[iface] = alt_setting;
    a6e2:	4433      	add	r3, r6
				ret = usb_set_alt_setting(setup->wIndex,
    a6e4:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    a6e8:	f04f 0b01 	mov.w	fp, #1
    a6ec:	e7da      	b.n	a6a4 <usb_handle_standard_request+0x1d4>
			if (cur_iface == setup->wIndex) {
    a6ee:	88a3      	ldrh	r3, [r4, #4]
    a6f0:	4553      	cmp	r3, sl
    a6f2:	d1d7      	bne.n	a6a4 <usb_handle_standard_request+0x1d4>
	if (cur_alt_setting != alt_setting) {
    a6f4:	78a3      	ldrb	r3, [r4, #2]
    a6f6:	4543      	cmp	r3, r8
    a6f8:	d021      	beq.n	a73e <usb_handle_standard_request+0x26e>
		ret = reset_endpoint(ep_desc);
    a6fa:	78ab      	ldrb	r3, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    a6fc:	4618      	mov	r0, r3
    a6fe:	607b      	str	r3, [r7, #4]
    a700:	f000 fc34 	bl	af6c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	4618      	mov	r0, r3
    a708:	f002 fbd4 	bl	ceb4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    a70c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a710:	d0ea      	beq.n	a6e8 <usb_handle_standard_request+0x218>
	} else if (ret) {
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	2800      	cmp	r0, #0
    a716:	d0e7      	beq.n	a6e8 <usb_handle_standard_request+0x218>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    a718:	46eb      	mov	fp, sp
    a71a:	b088      	sub	sp, #32
    a71c:	466a      	mov	r2, sp
    a71e:	491d      	ldr	r1, [pc, #116]	; (a794 <usb_handle_standard_request+0x2c4>)
    a720:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a724:	2303      	movs	r3, #3
    a726:	f842 3f10 	str.w	r3, [r2, #16]!
    a72a:	2300      	movs	r3, #0
    a72c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a730:	4819      	ldr	r0, [pc, #100]	; (a798 <usb_handle_standard_request+0x2c8>)
    a732:	f7ff facd 	bl	9cd0 <z_impl_z_log_msg_static_create>
    a736:	46dd      	mov	sp, fp
	return false;
    a738:	f04f 0b00 	mov.w	fp, #0
    a73c:	e7b2      	b.n	a6a4 <usb_handle_standard_request+0x1d4>
		ret = set_endpoint(ep_desc);
    a73e:	4628      	mov	r0, r5
    a740:	f7ff fe80 	bl	a444 <set_endpoint>
    a744:	4683      	mov	fp, r0
    a746:	e7ad      	b.n	a6a4 <usb_handle_standard_request+0x1d4>
    a748:	46a9      	mov	r9, r5
    a74a:	e7f5      	b.n	a738 <usb_handle_standard_request+0x268>
	if (usb_reqtype_is_to_host(setup)) {
    a74c:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    a750:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    a752:	2a00      	cmp	r2, #0
    a754:	da22      	bge.n	a79c <usb_handle_standard_request+0x2cc>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    a756:	2b00      	cmp	r3, #0
    a758:	f47f aece 	bne.w	a4f8 <usb_handle_standard_request+0x28>
	uint8_t ep = setup->wIndex;
    a75c:	7924      	ldrb	r4, [r4, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    a75e:	0663      	lsls	r3, r4, #25
    a760:	d00a      	beq.n	a778 <usb_handle_standard_request+0x2a8>
    a762:	4620      	mov	r0, r4
    a764:	f7ff fdac 	bl	a2c0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    a768:	2800      	cmp	r0, #0
    a76a:	f43f aec5 	beq.w	a4f8 <usb_handle_standard_request+0x28>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    a76e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    a772:	2b00      	cmp	r3, #0
    a774:	f43f aec0 	beq.w	a4f8 <usb_handle_standard_request+0x28>
    a778:	f8d9 5000 	ldr.w	r5, [r9]
		usb_dc_ep_is_stalled(ep, &data[0]);
    a77c:	4620      	mov	r0, r4
    a77e:	4629      	mov	r1, r5
    a780:	f002 fb52 	bl	ce28 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    a784:	2000      	movs	r0, #0
    a786:	7068      	strb	r0, [r5, #1]
    a788:	e6d6      	b.n	a538 <usb_handle_standard_request+0x68>
    a78a:	bf00      	nop
    a78c:	200089dc 	.word	0x200089dc
    a790:	20008a96 	.word	0x20008a96
    a794:	00013c8a 	.word	0x00013c8a
    a798:	0001359c 	.word	0x0001359c
		switch (setup->bRequest) {
    a79c:	2b01      	cmp	r3, #1
    a79e:	d008      	beq.n	a7b2 <usb_handle_standard_request+0x2e2>
    a7a0:	2b03      	cmp	r3, #3
    a7a2:	f47f aea9 	bne.w	a4f8 <usb_handle_standard_request+0x28>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    a7a6:	8863      	ldrh	r3, [r4, #2]
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	f47f aea5 	bne.w	a4f8 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    a7ae:	2101      	movs	r1, #1
    a7b0:	e003      	b.n	a7ba <usb_handle_standard_request+0x2ea>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    a7b2:	8861      	ldrh	r1, [r4, #2]
    a7b4:	2900      	cmp	r1, #0
    a7b6:	f47f ae9f 	bne.w	a4f8 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    a7ba:	88a0      	ldrh	r0, [r4, #4]
    a7bc:	f7ff fe16 	bl	a3ec <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    a7c0:	2800      	cmp	r0, #0
    a7c2:	f47f ae9f 	bne.w	a504 <usb_handle_standard_request+0x34>
    a7c6:	e697      	b.n	a4f8 <usb_handle_standard_request+0x28>
		if (type == USB_DESC_CONFIGURATION) {
    a7c8:	2a02      	cmp	r2, #2
		*data = p;
    a7ca:	f8c9 3000 	str.w	r3, [r9]
		if (type == USB_DESC_CONFIGURATION) {
    a7ce:	f47f aeca 	bne.w	a566 <usb_handle_standard_request+0x96>
			*len = (p[CONF_DESC_wTotalLength]) |
    a7d2:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    a7d4:	f8c8 3000 	str.w	r3, [r8]
    a7d8:	e694      	b.n	a504 <usb_handle_standard_request+0x34>
	if (usb_reqtype_is_to_host(setup)) {
    a7da:	f994 3000 	ldrsb.w	r3, [r4]
		switch (setup->bRequest) {
    a7de:	7860      	ldrb	r0, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	f6bf af50 	bge.w	a686 <usb_handle_standard_request+0x1b6>
    a7e6:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    a7ea:	2800      	cmp	r0, #0
    a7ec:	f43f af44 	beq.w	a678 <usb_handle_standard_request+0x1a8>
    a7f0:	280a      	cmp	r0, #10
    a7f2:	f47f ae81 	bne.w	a4f8 <usb_handle_standard_request+0x28>
	while (p[DESC_bLength] != 0U) {
    a7f6:	7829      	ldrb	r1, [r5, #0]
    a7f8:	2900      	cmp	r1, #0
    a7fa:	f43f ae7d 	beq.w	a4f8 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    a7fe:	786b      	ldrb	r3, [r5, #1]
    a800:	2b04      	cmp	r3, #4
    a802:	f47f af3e 	bne.w	a682 <usb_handle_standard_request+0x1b2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    a806:	78ab      	ldrb	r3, [r5, #2]
			if (cur_iface == setup->wIndex) {
    a808:	459c      	cmp	ip, r3
    a80a:	f47f af3a 	bne.w	a682 <usb_handle_standard_request+0x1b2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    a80e:	2b07      	cmp	r3, #7
	return 0;
    a810:	bf8e      	itee	hi
    a812:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    a814:	199b      	addls	r3, r3, r6
    a816:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    a81a:	7013      	strb	r3, [r2, #0]
				*len = 1;
    a81c:	2301      	movs	r3, #1
    a81e:	e7d9      	b.n	a7d4 <usb_handle_standard_request+0x304>

0000a820 <usb_data_to_host>:
{
    a820:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    a822:	4c13      	ldr	r4, [pc, #76]	; (a870 <usb_data_to_host+0x50>)
    a824:	7d23      	ldrb	r3, [r4, #20]
    a826:	b9cb      	cbnz	r3, a85c <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    a828:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    a82a:	ab01      	add	r3, sp, #4
    a82c:	2080      	movs	r0, #128	; 0x80
    a82e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    a830:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    a832:	f007 fcea 	bl	1220a <usb_write>
		usb_dev.data_buf += chunk;
    a836:	9a01      	ldr	r2, [sp, #4]
    a838:	68a3      	ldr	r3, [r4, #8]
    a83a:	4413      	add	r3, r2
    a83c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    a83e:	68e3      	ldr	r3, [r4, #12]
    a840:	1a9b      	subs	r3, r3, r2
    a842:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    a844:	b943      	cbnz	r3, a858 <usb_data_to_host+0x38>
    a846:	b13a      	cbz	r2, a858 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    a848:	6923      	ldr	r3, [r4, #16]
    a84a:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    a84c:	429a      	cmp	r2, r3
    a84e:	dd03      	ble.n	a858 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    a850:	069b      	lsls	r3, r3, #26
    a852:	d101      	bne.n	a858 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    a854:	2301      	movs	r3, #1
    a856:	7523      	strb	r3, [r4, #20]
}
    a858:	b002      	add	sp, #8
    a85a:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    a85c:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    a85e:	2080      	movs	r0, #128	; 0x80
    a860:	461a      	mov	r2, r3
    a862:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
    a864:	7523      	strb	r3, [r4, #20]
}
    a866:	b002      	add	sp, #8
    a868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    a86c:	f002 bb48 	b.w	cf00 <usb_dc_ep_write>
    a870:	200089dc 	.word	0x200089dc

0000a874 <usb_handle_control_transfer>:
	uint32_t chunk = 0U;
    a874:	2300      	movs	r3, #0
{
    a876:	b570      	push	{r4, r5, r6, lr}
    a878:	b08a      	sub	sp, #40	; 0x28
    a87a:	460d      	mov	r5, r1
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    a87c:	4606      	mov	r6, r0
	uint32_t chunk = 0U;
    a87e:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    a880:	2800      	cmp	r0, #0
    a882:	d16f      	bne.n	a964 <usb_handle_control_transfer+0xf0>
    a884:	2900      	cmp	r1, #0
    a886:	d147      	bne.n	a918 <usb_handle_control_transfer+0xa4>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    a888:	2208      	movs	r2, #8
    a88a:	460b      	mov	r3, r1
    a88c:	eb0d 0102 	add.w	r1, sp, r2
    a890:	f007 fd9d 	bl	123ce <usb_dc_ep_read>
    a894:	2800      	cmp	r0, #0
    a896:	da04      	bge.n	a8a2 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    a898:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    a89a:	f002 fa6d 	bl	cd78 <usb_dc_ep_set_stall>
}
    a89e:	b00a      	add	sp, #40	; 0x28
    a8a0:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    a8a2:	4c35      	ldr	r4, [pc, #212]	; (a978 <usb_handle_control_transfer+0x104>)
		setup->bRequest = setup_raw.bRequest;
    a8a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    a8a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    a8ac:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    a8ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		setup->bmRequestType = setup_raw.bmRequestType;
    a8b2:	7022      	strb	r2, [r4, #0]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    a8b4:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    a8b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		usb_dev.data_buf = usb_dev.req_data;
    a8ba:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    a8be:	80a3      	strh	r3, [r4, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    a8c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		if (usb_reqtype_is_to_device(setup)) {
    a8c4:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    a8c6:	e9c4 5503 	strd	r5, r5, [r4, #12]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    a8ca:	80e3      	strh	r3, [r4, #6]
		usb_dev.data_buf = usb_dev.req_data;
    a8cc:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    a8ce:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    a8d0:	d415      	bmi.n	a8fe <usb_handle_control_transfer+0x8a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    a8d2:	2b80      	cmp	r3, #128	; 0x80
    a8d4:	d90f      	bls.n	a8f6 <usb_handle_control_transfer+0x82>
				LOG_ERR("Request buffer too small");
    a8d6:	4b29      	ldr	r3, [pc, #164]	; (a97c <usb_handle_control_transfer+0x108>)
    a8d8:	9309      	str	r3, [sp, #36]	; 0x24
    a8da:	2302      	movs	r3, #2
    a8dc:	9308      	str	r3, [sp, #32]
    a8de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a8e2:	462b      	mov	r3, r5
    a8e4:	4826      	ldr	r0, [pc, #152]	; (a980 <usb_handle_control_transfer+0x10c>)
    a8e6:	aa08      	add	r2, sp, #32
    a8e8:	f7ff f9f2 	bl	9cd0 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    a8ec:	2080      	movs	r0, #128	; 0x80
    a8ee:	f002 fa43 	bl	cd78 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    a8f2:	4628      	mov	r0, r5
    a8f4:	e7d1      	b.n	a89a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    a8f6:	b113      	cbz	r3, a8fe <usb_handle_control_transfer+0x8a>
				usb_dev.data_buf_residue = setup->wLength;
    a8f8:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    a8fc:	e7cf      	b.n	a89e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    a8fe:	f7ff fcfb 	bl	a2f8 <usb_handle_request.constprop.0>
    a902:	2800      	cmp	r0, #0
    a904:	d0c8      	beq.n	a898 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    a906:	88e2      	ldrh	r2, [r4, #6]
    a908:	6923      	ldr	r3, [r4, #16]
    a90a:	429a      	cmp	r2, r3
    a90c:	bfd4      	ite	le
    a90e:	60e2      	strle	r2, [r4, #12]
    a910:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    a912:	f7ff ff85 	bl	a820 <usb_data_to_host>
    a916:	e7c2      	b.n	a89e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    a918:	4c17      	ldr	r4, [pc, #92]	; (a978 <usb_handle_control_transfer+0x104>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a91a:	ab01      	add	r3, sp, #4
    a91c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    a920:	2a00      	cmp	r2, #0
    a922:	dc05      	bgt.n	a930 <usb_handle_control_transfer+0xbc>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a924:	4602      	mov	r2, r0
    a926:	f007 fd52 	bl	123ce <usb_dc_ep_read>
    a92a:	2800      	cmp	r0, #0
    a92c:	dab7      	bge.n	a89e <usb_handle_control_transfer+0x2a>
    a92e:	e7b3      	b.n	a898 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    a930:	f007 fd4d 	bl	123ce <usb_dc_ep_read>
    a934:	2800      	cmp	r0, #0
    a936:	da04      	bge.n	a942 <usb_handle_control_transfer+0xce>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    a938:	2080      	movs	r0, #128	; 0x80
    a93a:	f002 fa1d 	bl	cd78 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    a93e:	4630      	mov	r0, r6
    a940:	e7ab      	b.n	a89a <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    a942:	9901      	ldr	r1, [sp, #4]
    a944:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    a946:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    a948:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    a94a:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    a94c:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    a94e:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    a950:	2b00      	cmp	r3, #0
    a952:	d1a4      	bne.n	a89e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    a954:	f104 0338 	add.w	r3, r4, #56	; 0x38
    a958:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    a95a:	f7ff fccd 	bl	a2f8 <usb_handle_request.constprop.0>
    a95e:	2800      	cmp	r0, #0
    a960:	d1d7      	bne.n	a912 <usb_handle_control_transfer+0x9e>
    a962:	e799      	b.n	a898 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    a964:	2880      	cmp	r0, #128	; 0x80
    a966:	d19a      	bne.n	a89e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    a968:	4b03      	ldr	r3, [pc, #12]	; (a978 <usb_handle_control_transfer+0x104>)
    a96a:	68da      	ldr	r2, [r3, #12]
    a96c:	2a00      	cmp	r2, #0
    a96e:	d1d0      	bne.n	a912 <usb_handle_control_transfer+0x9e>
    a970:	7d1b      	ldrb	r3, [r3, #20]
    a972:	2b00      	cmp	r3, #0
    a974:	d1cd      	bne.n	a912 <usb_handle_control_transfer+0x9e>
    a976:	e792      	b.n	a89e <usb_handle_control_transfer+0x2a>
    a978:	200089dc 	.word	0x200089dc
    a97c:	00013cac 	.word	0x00013cac
    a980:	0001359c 	.word	0x0001359c

0000a984 <usb_wakeup_request>:
	return usb_dev.remote_wakeup;
    a984:	4b04      	ldr	r3, [pc, #16]	; (a998 <usb_wakeup_request+0x14>)
		if (usb_get_remote_wakeup_status()) {
    a986:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    a98a:	b10b      	cbz	r3, a990 <usb_wakeup_request+0xc>
			return usb_dc_wakeup_request();
    a98c:	f007 bd2e 	b.w	123ec <usb_dc_wakeup_request>
}
    a990:	f06f 000c 	mvn.w	r0, #12
    a994:	4770      	bx	lr
    a996:	bf00      	nop
    a998:	200089dc 	.word	0x200089dc

0000a99c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    a99c:	4b05      	ldr	r3, [pc, #20]	; (a9b4 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    a99e:	4a06      	ldr	r2, [pc, #24]	; (a9b8 <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
    a9a0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.req_handlers[type] = handler;
    a9a2:	629a      	str	r2, [r3, #40]	; 0x28
    a9a4:	4a05      	ldr	r2, [pc, #20]	; (a9bc <usb_set_config+0x20>)
}
    a9a6:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
    a9a8:	62da      	str	r2, [r3, #44]	; 0x2c
    a9aa:	4a05      	ldr	r2, [pc, #20]	; (a9c0 <usb_set_config+0x24>)
    a9ac:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    a9ae:	4a05      	ldr	r2, [pc, #20]	; (a9c4 <usb_set_config+0x28>)
    a9b0:	619a      	str	r2, [r3, #24]
}
    a9b2:	4770      	bx	lr
    a9b4:	200089dc 	.word	0x200089dc
    a9b8:	0000a4d1 	.word	0x0000a4d1
    a9bc:	0000a1d5 	.word	0x0000a1d5
    a9c0:	0000a275 	.word	0x0000a275
    a9c4:	0000a215 	.word	0x0000a215

0000a9c8 <usb_device_init>:
	if (usb_dev.enabled == true) {
    a9c8:	4b09      	ldr	r3, [pc, #36]	; (a9f0 <usb_device_init+0x28>)
{
    a9ca:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    a9cc:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    a9d0:	b954      	cbnz	r4, a9e8 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    a9d2:	f000 f9e7 	bl	ada4 <usb_get_device_descriptor>
	if (!device_descriptor) {
    a9d6:	b918      	cbnz	r0, a9e0 <usb_device_init+0x18>
}
    a9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a9dc:	f7ff bca2 	b.w	a324 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    a9e0:	f7ff ffdc 	bl	a99c <usb_set_config>
	return 0;
    a9e4:	4620      	mov	r0, r4
}
    a9e6:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a9e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a9ec:	e7fb      	b.n	a9e6 <usb_device_init+0x1e>
    a9ee:	bf00      	nop
    a9f0:	200089dc 	.word	0x200089dc

0000a9f4 <usb_enable>:
{
    a9f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a9f8:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    a9fa:	4d35      	ldr	r5, [pc, #212]	; (aad0 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    a9fc:	f04f 32ff 	mov.w	r2, #4294967295
    aa00:	f04f 33ff 	mov.w	r3, #4294967295
    aa04:	4833      	ldr	r0, [pc, #204]	; (aad4 <usb_enable+0xe0>)
    aa06:	f005 fd35 	bl	10474 <z_impl_k_mutex_lock>
    aa0a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    aa0e:	2e00      	cmp	r6, #0
    aa10:	d15b      	bne.n	aaca <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    aa12:	4831      	ldr	r0, [pc, #196]	; (aad8 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    aa14:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    aa16:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    aa18:	f002 fbe2 	bl	d1e0 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    aa1c:	f002 f8fe 	bl	cc1c <usb_dc_attach>
	if (ret < 0) {
    aa20:	1e04      	subs	r4, r0, #0
    aa22:	db36      	blt.n	aa92 <usb_enable+0x9e>
	ret = usb_transfer_init();
    aa24:	f000 fae8 	bl	aff8 <usb_transfer_init>
	if (ret < 0) {
    aa28:	1e04      	subs	r4, r0, #0
    aa2a:	db32      	blt.n	aa92 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    aa2c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    aa2e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    aa30:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    aa34:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    aa38:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    aa3c:	f002 f96a 	bl	cd14 <usb_dc_ep_configure>
	if (ret < 0) {
    aa40:	1e04      	subs	r4, r0, #0
    aa42:	db26      	blt.n	aa92 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    aa44:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    aa46:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    aa48:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    aa4c:	f002 f962 	bl	cd14 <usb_dc_ep_configure>
	if (ret < 0) {
    aa50:	1e04      	subs	r4, r0, #0
    aa52:	db1e      	blt.n	aa92 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    aa54:	4630      	mov	r0, r6
    aa56:	4921      	ldr	r1, [pc, #132]	; (aadc <usb_enable+0xe8>)
    aa58:	f002 fbae 	bl	d1b8 <usb_dc_ep_set_callback>
	if (ret < 0) {
    aa5c:	1e04      	subs	r4, r0, #0
    aa5e:	db18      	blt.n	aa92 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    aa60:	4638      	mov	r0, r7
    aa62:	491e      	ldr	r1, [pc, #120]	; (aadc <usb_enable+0xe8>)
    aa64:	f002 fba8 	bl	d1b8 <usb_dc_ep_set_callback>
	if (ret < 0) {
    aa68:	1e04      	subs	r4, r0, #0
    aa6a:	db12      	blt.n	aa92 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    aa6c:	4c1c      	ldr	r4, [pc, #112]	; (aae0 <usb_enable+0xec>)
    aa6e:	f8df 8074 	ldr.w	r8, [pc, #116]	; aae4 <usb_enable+0xf0>
    aa72:	4544      	cmp	r4, r8
    aa74:	d314      	bcc.n	aaa0 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    aa76:	2000      	movs	r0, #0
    aa78:	f002 f9f2 	bl	ce60 <usb_dc_ep_enable>
	if (ret < 0) {
    aa7c:	1e04      	subs	r4, r0, #0
    aa7e:	db08      	blt.n	aa92 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    aa80:	2080      	movs	r0, #128	; 0x80
    aa82:	f002 f9ed 	bl	ce60 <usb_dc_ep_enable>
	if (ret < 0) {
    aa86:	1e04      	subs	r4, r0, #0
    aa88:	db03      	blt.n	aa92 <usb_enable+0x9e>
	usb_dev.enabled = true;
    aa8a:	2301      	movs	r3, #1
	ret = 0;
    aa8c:	2400      	movs	r4, #0
	usb_dev.enabled = true;
    aa8e:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	return z_impl_k_mutex_unlock(mutex);
    aa92:	4810      	ldr	r0, [pc, #64]	; (aad4 <usb_enable+0xe0>)
    aa94:	f005 fd66 	bl	10564 <z_impl_k_mutex_unlock>
}
    aa98:	4620      	mov	r0, r4
    aa9a:	b002      	add	sp, #8
    aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    aaa0:	2600      	movs	r6, #0
		ep_data = cfg_data->endpoint;
    aaa2:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    aaa4:	7f22      	ldrb	r2, [r4, #28]
    aaa6:	b2f3      	uxtb	r3, r6
    aaa8:	429a      	cmp	r2, r3
    aaaa:	d801      	bhi.n	aab0 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    aaac:	3424      	adds	r4, #36	; 0x24
    aaae:	e7e0      	b.n	aa72 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    aab0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    aab4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    aab8:	7910      	ldrb	r0, [r2, #4]
    aaba:	f002 fb7d 	bl	d1b8 <usb_dc_ep_set_callback>
    aabe:	3601      	adds	r6, #1
    aac0:	2800      	cmp	r0, #0
    aac2:	d0ef      	beq.n	aaa4 <usb_enable+0xb0>
    aac4:	f04f 34ff 	mov.w	r4, #4294967295
    aac8:	e7e3      	b.n	aa92 <usb_enable+0x9e>
		ret = -EALREADY;
    aaca:	f06f 0477 	mvn.w	r4, #119	; 0x77
    aace:	e7e0      	b.n	aa92 <usb_enable+0x9e>
    aad0:	200089dc 	.word	0x200089dc
    aad4:	20008114 	.word	0x20008114
    aad8:	0000a351 	.word	0x0000a351
    aadc:	0000a875 	.word	0x0000a875
    aae0:	200081ec 	.word	0x200081ec
    aae4:	20008210 	.word	0x20008210

0000aae8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    aae8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    aaea:	4b1f      	ldr	r3, [pc, #124]	; (ab68 <usb_update_sn_string_descriptor+0x80>)
{
    aaec:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    aaee:	aa05      	add	r2, sp, #20
    aaf0:	f103 0510 	add.w	r5, r3, #16
    aaf4:	4614      	mov	r4, r2
    aaf6:	6818      	ldr	r0, [r3, #0]
    aaf8:	6859      	ldr	r1, [r3, #4]
    aafa:	3308      	adds	r3, #8
    aafc:	c403      	stmia	r4!, {r0, r1}
    aafe:	42ab      	cmp	r3, r5
    ab00:	4622      	mov	r2, r4
    ab02:	d1f7      	bne.n	aaf4 <usb_update_sn_string_descriptor+0xc>
    ab04:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    ab06:	2210      	movs	r2, #16
	const char hex[] = "0123456789ABCDEF";
    ab08:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
    ab0a:	2100      	movs	r1, #0
    ab0c:	a801      	add	r0, sp, #4
    ab0e:	f007 fc27 	bl	12360 <memset>
	memset(sn, 0, sizeof(sn));
    ab12:	2212      	movs	r2, #18
    ab14:	2100      	movs	r1, #0
    ab16:	4815      	ldr	r0, [pc, #84]	; (ab6c <usb_update_sn_string_descriptor+0x84>)
    ab18:	f007 fc22 	bl	12360 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    ab1c:	2110      	movs	r1, #16
    ab1e:	a801      	add	r0, sp, #4
    ab20:	f002 fe6c 	bl	d7fc <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    ab24:	2800      	cmp	r0, #0
    ab26:	dd1b      	ble.n	ab60 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    ab28:	2808      	cmp	r0, #8
    ab2a:	bfb8      	it	lt
    ab2c:	2008      	movlt	r0, #8
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    ab2e:	2100      	movs	r1, #0
    ab30:	3808      	subs	r0, #8
    ab32:	ab01      	add	r3, sp, #4
    ab34:	4a0d      	ldr	r2, [pc, #52]	; (ab6c <usb_update_sn_string_descriptor+0x84>)
    ab36:	4418      	add	r0, r3
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    ab38:	f810 3b01 	ldrb.w	r3, [r0], #1
    ab3c:	ac0a      	add	r4, sp, #40	; 0x28
    ab3e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
    ab42:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    ab46:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    ab4a:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    ab4c:	ac0a      	add	r4, sp, #40	; 0x28
    ab4e:	4423      	add	r3, r4
    ab50:	f813 3c14 	ldrb.w	r3, [r3, #-20]
		for (int i = 0; i < usblen; i++) {
    ab54:	3101      	adds	r1, #1
    ab56:	2908      	cmp	r1, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    ab58:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    ab5a:	f102 0202 	add.w	r2, r2, #2
    ab5e:	d1eb      	bne.n	ab38 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    ab60:	4802      	ldr	r0, [pc, #8]	; (ab6c <usb_update_sn_string_descriptor+0x84>)
    ab62:	b00b      	add	sp, #44	; 0x2c
    ab64:	bd30      	pop	{r4, r5, pc}
    ab66:	bf00      	nop
    ab68:	00013cd0 	.word	0x00013cd0
    ab6c:	200098a9 	.word	0x200098a9

0000ab70 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab74:	4604      	mov	r4, r0
    ab76:	b08b      	sub	sp, #44	; 0x2c
    ab78:	af00      	add	r7, sp, #0
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    ab7a:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    ab7c:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    ab80:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    ab82:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    ab84:	46b0      	mov	r8, r6

	while (head->bLength != 0U) {
    ab86:	7820      	ldrb	r0, [r4, #0]
    ab88:	b938      	cbnz	r0, ab9a <usb_fix_descriptor+0x2a>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    ab8a:	4b7c      	ldr	r3, [pc, #496]	; (ad7c <usb_fix_descriptor+0x20c>)
    ab8c:	3402      	adds	r4, #2
    ab8e:	429c      	cmp	r4, r3
    ab90:	d1f3      	bne.n	ab7a <usb_fix_descriptor+0xa>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    ab92:	372c      	adds	r7, #44	; 0x2c
    ab94:	46bd      	mov	sp, r7
    ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    ab9a:	7863      	ldrb	r3, [r4, #1]
    ab9c:	2b05      	cmp	r3, #5
    ab9e:	d805      	bhi.n	abac <usb_fix_descriptor+0x3c>
    aba0:	e8df f003 	tbb	[pc, r3]
    aba4:	97030497 	.word	0x97030497
    aba8:	2c07      	.short	0x2c07
    abaa:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    abac:	7823      	ldrb	r3, [r4, #0]
    abae:	441c      	add	r4, r3
    abb0:	e7e9      	b.n	ab86 <usb_fix_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    abb2:	78e3      	ldrb	r3, [r4, #3]
    abb4:	2b00      	cmp	r3, #0
    abb6:	d1f9      	bne.n	abac <usb_fix_descriptor+0x3c>
			if (if_descr->bInterfaceNumber == 0U) {
    abb8:	78a3      	ldrb	r3, [r4, #2]
    abba:	b1e3      	cbz	r3, abf6 <usb_fix_descriptor+0x86>
			numof_ifaces++;
    abbc:	f10a 0a01 	add.w	sl, sl, #1
    abc0:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    abc4:	e7f2      	b.n	abac <usb_fix_descriptor+0x3c>
		if (cfg_data->interface_descriptor == iface) {
    abc6:	686a      	ldr	r2, [r5, #4]
    abc8:	4294      	cmp	r4, r2
    abca:	f000 80ce 	beq.w	ad6a <usb_fix_descriptor+0x1fa>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    abce:	3524      	adds	r5, #36	; 0x24
    abd0:	429d      	cmp	r5, r3
    abd2:	d3f8      	bcc.n	abc6 <usb_fix_descriptor+0x56>
					LOG_ERR("There is no usb_cfg_data "
    abd4:	466d      	mov	r5, sp
    abd6:	b088      	sub	sp, #32
    abd8:	466a      	mov	r2, sp
    abda:	4b69      	ldr	r3, [pc, #420]	; (ad80 <usb_fix_descriptor+0x210>)
    abdc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    abe0:	2303      	movs	r3, #3
    abe2:	f842 3f10 	str.w	r3, [r2, #16]!
    abe6:	2300      	movs	r3, #0
    abe8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    abec:	4865      	ldr	r0, [pc, #404]	; (ad84 <usb_fix_descriptor+0x214>)
    abee:	f7ff f86f 	bl	9cd0 <z_impl_z_log_msg_static_create>
    abf2:	46ad      	mov	sp, r5
    abf4:	e010      	b.n	ac18 <usb_fix_descriptor+0xa8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    abf6:	4d64      	ldr	r5, [pc, #400]	; (ad88 <usb_fix_descriptor+0x218>)
    abf8:	4b64      	ldr	r3, [pc, #400]	; (ad8c <usb_fix_descriptor+0x21c>)
    abfa:	e7e9      	b.n	abd0 <usb_fix_descriptor+0x60>
			if (!cfg_data) {
    abfc:	2d00      	cmp	r5, #0
    abfe:	d166      	bne.n	acce <usb_fix_descriptor+0x15e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    ac00:	4b63      	ldr	r3, [pc, #396]	; (ad90 <usb_fix_descriptor+0x220>)
				LOG_ERR("Failed to validate endpoints");
    ac02:	627b      	str	r3, [r7, #36]	; 0x24
    ac04:	2302      	movs	r3, #2
    ac06:	623b      	str	r3, [r7, #32]
    ac08:	2300      	movs	r3, #0
    ac0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ac0e:	485d      	ldr	r0, [pc, #372]	; (ad84 <usb_fix_descriptor+0x214>)
    ac10:	f107 0220 	add.w	r2, r7, #32
    ac14:	f7ff f85c 	bl	9cd0 <z_impl_z_log_msg_static_create>
					return -1;
    ac18:	f04f 30ff 	mov.w	r0, #4294967295
    ac1c:	e7b9      	b.n	ab92 <usb_fix_descriptor+0x22>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    ac1e:	6a29      	ldr	r1, [r5, #32]
    ac20:	78a0      	ldrb	r0, [r4, #2]
    ac22:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    ac26:	790b      	ldrb	r3, [r1, #4]
    ac28:	4298      	cmp	r0, r3
    ac2a:	d005      	beq.n	ac38 <usb_fix_descriptor+0xc8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    ac2c:	3201      	adds	r2, #1
    ac2e:	7f2b      	ldrb	r3, [r5, #28]
    ac30:	429a      	cmp	r2, r3
    ac32:	d3f4      	bcc.n	ac1e <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    ac34:	4b57      	ldr	r3, [pc, #348]	; (ad94 <usb_fix_descriptor+0x224>)
    ac36:	e7e4      	b.n	ac02 <usb_fix_descriptor+0x92>
    ac38:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    ac3c:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    ac3e:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    ac42:	f000 0003 	and.w	r0, r0, #3
    ac46:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    ac48:	7920      	ldrb	r0, [r4, #4]
    ac4a:	fa5f f389 	uxtb.w	r3, r9
    ac4e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    ac52:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    ac54:	f994 0002 	ldrsb.w	r0, [r4, #2]
    ac58:	2800      	cmp	r0, #0
    ac5a:	da2a      	bge.n	acb2 <usb_fix_descriptor+0x142>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    ac5c:	f04f 0c01 	mov.w	ip, #1
    ac60:	f109 0010 	add.w	r0, r9, #16
    ac64:	fa0c f000 	lsl.w	r0, ip, r0
    ac68:	ea10 0f0b 	tst.w	r0, fp
    ac6c:	d129      	bne.n	acc2 <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    ac6e:	f063 007f 	orn	r0, r3, #127	; 0x7f
    ac72:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    ac74:	f107 0010 	add.w	r0, r7, #16
    ac78:	e9c7 3101 	strd	r3, r1, [r7, #4]
    ac7c:	60fa      	str	r2, [r7, #12]
    ac7e:	f002 f81f 	bl	ccc0 <usb_dc_ep_check_cap>
    ac82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    ac86:	687b      	ldr	r3, [r7, #4]
    ac88:	b9d8      	cbnz	r0, acc2 <usb_fix_descriptor+0x152>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    ac8a:	7c3a      	ldrb	r2, [r7, #16]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    ac8c:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    ac90:	70a2      	strb	r2, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    ac92:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    ac94:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
    ac98:	bf1d      	ittte	ne
    ac9a:	3310      	addne	r3, #16
    ac9c:	b2db      	uxtbne	r3, r3
    ac9e:	fa02 f303 	lslne.w	r3, r2, r3
					*requested_ep |= (1U << idx);
    aca2:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
    aca6:	bf14      	ite	ne
    aca8:	ea4b 0b03 	orrne.w	fp, fp, r3
					*requested_ep |= (1U << idx);
    acac:	ea4b 0b02 	orreq.w	fp, fp, r2
				return 0;
    acb0:	e77c      	b.n	abac <usb_fix_descriptor+0x3c>
				if ((*requested_ep & (1U << (idx)))) {
    acb2:	2001      	movs	r0, #1
    acb4:	fa00 f009 	lsl.w	r0, r0, r9
    acb8:	ea10 0f0b 	tst.w	r0, fp
    acbc:	d101      	bne.n	acc2 <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = idx;
    acbe:	743b      	strb	r3, [r7, #16]
    acc0:	e7d8      	b.n	ac74 <usb_fix_descriptor+0x104>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    acc2:	f109 0901 	add.w	r9, r9, #1
    acc6:	f1b9 0f10 	cmp.w	r9, #16
    acca:	d1b7      	bne.n	ac3c <usb_fix_descriptor+0xcc>
    accc:	e7ae      	b.n	ac2c <usb_fix_descriptor+0xbc>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    acce:	2200      	movs	r2, #0
    acd0:	e7ad      	b.n	ac2e <usb_fix_descriptor+0xbe>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    acd2:	2e03      	cmp	r6, #3
    acd4:	d12a      	bne.n	ad2c <usb_fix_descriptor+0x1bc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    acd6:	f7ff ff07 	bl	aae8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    acda:	4681      	mov	r9, r0
    acdc:	b1a8      	cbz	r0, ad0a <usb_fix_descriptor+0x19a>
	runtime_sn_len = strlen(runtime_sn);
    acde:	f007 fb18 	bl	12312 <strlen>
	if (!runtime_sn_len) {
    ace2:	60f8      	str	r0, [r7, #12]
    ace4:	b188      	cbz	r0, ad0a <usb_fix_descriptor+0x19a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    ace6:	482c      	ldr	r0, [pc, #176]	; (ad98 <usb_fix_descriptor+0x228>)
    ace8:	f007 fb13 	bl	12312 <strlen>
	if (runtime_sn_len != default_sn_len) {
    acec:	68fa      	ldr	r2, [r7, #12]
    acee:	4282      	cmp	r2, r0
    acf0:	d017      	beq.n	ad22 <usb_fix_descriptor+0x1b2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    acf2:	4b2a      	ldr	r3, [pc, #168]	; (ad9c <usb_fix_descriptor+0x22c>)
    acf4:	627b      	str	r3, [r7, #36]	; 0x24
    acf6:	2302      	movs	r3, #2
    acf8:	623b      	str	r3, [r7, #32]
    acfa:	2300      	movs	r3, #0
    acfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ad00:	4820      	ldr	r0, [pc, #128]	; (ad84 <usb_fix_descriptor+0x214>)
    ad02:	f107 0220 	add.w	r2, r7, #32
    ad06:	f7fe ffe3 	bl	9cd0 <z_impl_z_log_msg_static_create>
	for (int i = idx_max; i >= 0; i -= 2) {
    ad0a:	f06f 0102 	mvn.w	r1, #2
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    ad0e:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    ad10:	1b09      	subs	r1, r1, r4
    ad12:	18e2      	adds	r2, r4, r3
    ad14:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    ad18:	42d1      	cmn	r1, r2
    ad1a:	d512      	bpl.n	ad42 <usb_fix_descriptor+0x1d2>
			str_descr_idx += 1U;
    ad1c:	3601      	adds	r6, #1
    ad1e:	b2f6      	uxtb	r6, r6
			break;
    ad20:	e744      	b.n	abac <usb_fix_descriptor+0x3c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    ad22:	4649      	mov	r1, r9
    ad24:	1ca0      	adds	r0, r4, #2
    ad26:	f007 fb10 	bl	1234a <memcpy>
    ad2a:	e7ee      	b.n	ad0a <usb_fix_descriptor+0x19a>
			if (str_descr_idx) {
    ad2c:	2e00      	cmp	r6, #0
    ad2e:	d1ec      	bne.n	ad0a <usb_fix_descriptor+0x19a>
				if (!cfg_descr) {
    ad30:	f1b8 0f00 	cmp.w	r8, #0
    ad34:	d10e      	bne.n	ad54 <usb_fix_descriptor+0x1e4>
					LOG_ERR("Incomplete device descriptor");
    ad36:	4b1a      	ldr	r3, [pc, #104]	; (ada0 <usb_fix_descriptor+0x230>)
    ad38:	627b      	str	r3, [r7, #36]	; 0x24
    ad3a:	2302      	movs	r3, #2
    ad3c:	623b      	str	r3, [r7, #32]
    ad3e:	4643      	mov	r3, r8
    ad40:	e763      	b.n	ac0a <usb_fix_descriptor+0x9a>
		buf[i] = 0U;
    ad42:	f04f 0000 	mov.w	r0, #0
    ad46:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    ad4a:	f813 0901 	ldrb.w	r0, [r3], #-1
    ad4e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    ad52:	e7e1      	b.n	ad18 <usb_fix_descriptor+0x1a8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    ad54:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    ad58:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    ad5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ad60:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    ad64:	f888 a004 	strb.w	sl, [r8, #4]
    ad68:	e7d8      	b.n	ad1c <usb_fix_descriptor+0x1ac>
				if (cfg_data->interface_config) {
    ad6a:	68ab      	ldr	r3, [r5, #8]
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	f43f af25 	beq.w	abbc <usb_fix_descriptor+0x4c>
					cfg_data->interface_config(head,
    ad72:	4651      	mov	r1, sl
    ad74:	4620      	mov	r0, r4
    ad76:	4798      	blx	r3
    ad78:	e720      	b.n	abbc <usb_fix_descriptor+0x4c>
    ad7a:	bf00      	nop
    ad7c:	200081ea 	.word	0x200081ea
    ad80:	00013da7 	.word	0x00013da7
    ad84:	00013594 	.word	0x00013594
    ad88:	200081ec 	.word	0x200081ec
    ad8c:	20008210 	.word	0x20008210
    ad90:	00013ce1 	.word	0x00013ce1
    ad94:	00013d22 	.word	0x00013d22
    ad98:	00013cd0 	.word	0x00013cd0
    ad9c:	00013d3f 	.word	0x00013d3f
    ada0:	00013d8a 	.word	0x00013d8a

0000ada4 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    ada4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    ada6:	480a      	ldr	r0, [pc, #40]	; (add0 <usb_get_device_descriptor+0x2c>)
    ada8:	f7ff fee2 	bl	ab70 <usb_fix_descriptor>
    adac:	b170      	cbz	r0, adcc <usb_get_device_descriptor+0x28>
		LOG_ERR("Failed to fixup USB descriptor");
    adae:	4b09      	ldr	r3, [pc, #36]	; (add4 <usb_get_device_descriptor+0x30>)
    adb0:	9305      	str	r3, [sp, #20]
    adb2:	2302      	movs	r3, #2
    adb4:	9304      	str	r3, [sp, #16]
    adb6:	4808      	ldr	r0, [pc, #32]	; (add8 <usb_get_device_descriptor+0x34>)
    adb8:	2300      	movs	r3, #0
    adba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    adbe:	aa04      	add	r2, sp, #16
    adc0:	f7fe ff86 	bl	9cd0 <z_impl_z_log_msg_static_create>
		return NULL;
    adc4:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    adc6:	b007      	add	sp, #28
    adc8:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    adcc:	4800      	ldr	r0, [pc, #0]	; (add0 <usb_get_device_descriptor+0x2c>)
    adce:	e7fa      	b.n	adc6 <usb_get_device_descriptor+0x22>
    add0:	20008158 	.word	0x20008158
    add4:	00013dc7 	.word	0x00013dc7
    add8:	00013594 	.word	0x00013594

0000addc <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    addc:	4b09      	ldr	r3, [pc, #36]	; (ae04 <usb_ep_get_transfer+0x28>)
    adde:	2100      	movs	r1, #0
    ade0:	461a      	mov	r2, r3
{
    ade2:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    ade4:	781c      	ldrb	r4, [r3, #0]
    ade6:	4284      	cmp	r4, r0
    ade8:	d104      	bne.n	adf4 <usb_ep_get_transfer+0x18>
    adea:	685c      	ldr	r4, [r3, #4]
    adec:	b114      	cbz	r4, adf4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    adee:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    adf2:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    adf4:	3101      	adds	r1, #1
    adf6:	2904      	cmp	r1, #4
    adf8:	f103 0340 	add.w	r3, r3, #64	; 0x40
    adfc:	d1f2      	bne.n	ade4 <usb_ep_get_transfer+0x8>
	return NULL;
    adfe:	2000      	movs	r0, #0
    ae00:	e7f7      	b.n	adf2 <usb_ep_get_transfer+0x16>
    ae02:	bf00      	nop
    ae04:	20008aa0 	.word	0x20008aa0

0000ae08 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    ae08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ae0c:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    ae0e:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
    ae12:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    ae14:	3310      	adds	r3, #16
	ep = trans->ep;
    ae16:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
{
    ae1a:	af00      	add	r7, sp, #0
	if (trans->status != -EBUSY) {
    ae1c:	d111      	bne.n	ae42 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    ae1e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    ae20:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    ae24:	f013 0602 	ands.w	r6, r3, #2
    ae28:	d04e      	beq.n	aec8 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    ae2a:	bb0a      	cbnz	r2, ae70 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    ae2c:	f013 0304 	ands.w	r3, r3, #4
    ae30:	d104      	bne.n	ae3c <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    ae32:	461a      	mov	r2, r3
    ae34:	4619      	mov	r1, r3
    ae36:	4628      	mov	r0, r5
    ae38:	f007 f9e7 	bl	1220a <usb_write>
			}
			trans->status = 0;
    ae3c:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    ae3e:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    ae42:	f854 3c28 	ldr.w	r3, [r4, #-40]
    ae46:	3310      	adds	r3, #16
    ae48:	d00e      	beq.n	ae68 <usb_transfer_work+0x60>
    ae4a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    ae4e:	b15e      	cbz	r6, ae68 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    ae50:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    ae54:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    ae58:	f007 fea8 	bl	12bac <k_is_in_isr>
    ae5c:	2800      	cmp	r0, #0
    ae5e:	d06f      	beq.n	af40 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    ae60:	4621      	mov	r1, r4
    ae62:	483f      	ldr	r0, [pc, #252]	; (af60 <usb_transfer_work+0x158>)
    ae64:	f007 ff77 	bl	12d56 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    ae68:	370c      	adds	r7, #12
    ae6a:	46bd      	mov	sp, r7
    ae6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    ae70:	f850 1c24 	ldr.w	r1, [r0, #-36]
    ae74:	1d3b      	adds	r3, r7, #4
    ae76:	4628      	mov	r0, r5
    ae78:	f007 f9c7 	bl	1220a <usb_write>
		if (ret) {
    ae7c:	b198      	cbz	r0, aea6 <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    ae7e:	466e      	mov	r6, sp
    ae80:	b088      	sub	sp, #32
    ae82:	466a      	mov	r2, sp
    ae84:	4b37      	ldr	r3, [pc, #220]	; (af64 <usb_transfer_work+0x15c>)
    ae86:	61d5      	str	r5, [r2, #28]
    ae88:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ae8c:	2304      	movs	r3, #4
    ae8e:	f842 3f10 	str.w	r3, [r2, #16]!
    ae92:	2300      	movs	r3, #0
    ae94:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ae98:	4833      	ldr	r0, [pc, #204]	; (af68 <usb_transfer_work+0x160>)
    ae9a:	f7fe ff19 	bl	9cd0 <z_impl_z_log_msg_static_create>
    ae9e:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    aea0:	f06f 0315 	mvn.w	r3, #21
    aea4:	e7cb      	b.n	ae3e <usb_transfer_work+0x36>
		trans->buffer += bytes;
    aea6:	687a      	ldr	r2, [r7, #4]
    aea8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    aeac:	4413      	add	r3, r2
    aeae:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    aeb2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    aeb6:	1a9b      	subs	r3, r3, r2
    aeb8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    aebc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    aec0:	4413      	add	r3, r2
    aec2:	f844 3c1c 	str.w	r3, [r4, #-28]
    aec6:	e7bc      	b.n	ae42 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    aec8:	f850 1c24 	ldr.w	r1, [r0, #-36]
    aecc:	1d3b      	adds	r3, r7, #4
    aece:	4628      	mov	r0, r5
    aed0:	f002 f8b4 	bl	d03c <usb_dc_ep_read_wait>
		if (ret) {
    aed4:	b188      	cbz	r0, aefa <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    aed6:	46e8      	mov	r8, sp
    aed8:	b088      	sub	sp, #32
    aeda:	466a      	mov	r2, sp
    aedc:	4b21      	ldr	r3, [pc, #132]	; (af64 <usb_transfer_work+0x15c>)
    aede:	61d5      	str	r5, [r2, #28]
    aee0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    aee4:	2304      	movs	r3, #4
    aee6:	f842 3f10 	str.w	r3, [r2, #16]!
    aeea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    aeee:	4633      	mov	r3, r6
    aef0:	481d      	ldr	r0, [pc, #116]	; (af68 <usb_transfer_work+0x160>)
    aef2:	f7fe feed 	bl	9cd0 <z_impl_z_log_msg_static_create>
    aef6:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    aef8:	e7d2      	b.n	aea0 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    aefa:	687e      	ldr	r6, [r7, #4]
    aefc:	f854 3c24 	ldr.w	r3, [r4, #-36]
    af00:	4433      	add	r3, r6
    af02:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    af06:	f854 3c20 	ldr.w	r3, [r4, #-32]
    af0a:	1b9b      	subs	r3, r3, r6
    af0c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    af10:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    af14:	4433      	add	r3, r6
    af16:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    af1a:	2e00      	cmp	r6, #0
    af1c:	d08e      	beq.n	ae3c <usb_transfer_work+0x34>
    af1e:	4628      	mov	r0, r5
    af20:	f002 f964 	bl	d1ec <usb_dc_ep_mps>
    af24:	fbb6 f3f0 	udiv	r3, r6, r0
    af28:	fb03 6610 	mls	r6, r3, r0, r6
    af2c:	2e00      	cmp	r6, #0
    af2e:	d185      	bne.n	ae3c <usb_transfer_work+0x34>
    af30:	f854 3c20 	ldr.w	r3, [r4, #-32]
    af34:	2b00      	cmp	r3, #0
    af36:	d081      	beq.n	ae3c <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    af38:	4628      	mov	r0, r5
    af3a:	f002 f8e5 	bl	d108 <usb_dc_ep_read_continue>
    af3e:	e780      	b.n	ae42 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    af40:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    af44:	f1a4 0010 	sub.w	r0, r4, #16
    af48:	f005 fb7c 	bl	10644 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    af4c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    af50:	338c      	adds	r3, #140	; 0x8c
    af52:	d089      	beq.n	ae68 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    af54:	464a      	mov	r2, r9
    af56:	4641      	mov	r1, r8
    af58:	4628      	mov	r0, r5
    af5a:	47b0      	blx	r6
    af5c:	e784      	b.n	ae68 <usb_transfer_work+0x60>
    af5e:	bf00      	nop
    af60:	20008898 	.word	0x20008898
    af64:	00013df5 	.word	0x00013df5
    af68:	000135b4 	.word	0x000135b4

0000af6c <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    af6c:	b510      	push	{r4, lr}
	__asm__ volatile(
    af6e:	f04f 0320 	mov.w	r3, #32
    af72:	f3ef 8411 	mrs	r4, BASEPRI
    af76:	f383 8812 	msr	BASEPRI_MAX, r3
    af7a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    af7e:	f7ff ff2d 	bl	addc <usb_ep_get_transfer>
	if (!trans) {
    af82:	b150      	cbz	r0, af9a <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    af84:	6843      	ldr	r3, [r0, #4]
    af86:	3310      	adds	r3, #16
    af88:	d107      	bne.n	af9a <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    af8a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    af8e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
    af92:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    af94:	4803      	ldr	r0, [pc, #12]	; (afa4 <usb_cancel_transfer+0x38>)
    af96:	f007 fede 	bl	12d56 <k_work_submit_to_queue>
	__asm__ volatile(
    af9a:	f384 8811 	msr	BASEPRI, r4
    af9e:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    afa2:	bd10      	pop	{r4, pc}
    afa4:	20008898 	.word	0x20008898

0000afa8 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    afa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afac:	2504      	movs	r5, #4
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    afae:	f06f 078b 	mvn.w	r7, #139	; 0x8b
    afb2:	4c0f      	ldr	r4, [pc, #60]	; (aff0 <usb_cancel_transfers+0x48>)
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    afb4:	f8df 803c 	ldr.w	r8, [pc, #60]	; aff4 <usb_cancel_transfers+0x4c>
	__asm__ volatile(
    afb8:	f04f 0320 	mov.w	r3, #32
    afbc:	f3ef 8611 	mrs	r6, BASEPRI
    afc0:	f383 8812 	msr	BASEPRI_MAX, r3
    afc4:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    afc8:	6863      	ldr	r3, [r4, #4]
    afca:	3310      	adds	r3, #16
    afcc:	d105      	bne.n	afda <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    afce:	4640      	mov	r0, r8
    afd0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
			trans->status = -ECANCELED;
    afd4:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    afd6:	f007 febe 	bl	12d56 <k_work_submit_to_queue>
	__asm__ volatile(
    afda:	f386 8811 	msr	BASEPRI, r6
    afde:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    afe2:	3d01      	subs	r5, #1
    afe4:	f104 0440 	add.w	r4, r4, #64	; 0x40
    afe8:	d1e6      	bne.n	afb8 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afee:	bf00      	nop
    aff0:	20008aa0 	.word	0x20008aa0
    aff4:	20008898 	.word	0x20008898

0000aff8 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    aff8:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    affa:	2500      	movs	r5, #0
    affc:	4c09      	ldr	r4, [pc, #36]	; (b024 <usb_transfer_init+0x2c>)
		k_work_init(&ut_data[i].work, usb_transfer_work);
    affe:	4e0a      	ldr	r6, [pc, #40]	; (b028 <usb_transfer_init+0x30>)
    b000:	4631      	mov	r1, r6
    b002:	4620      	mov	r0, r4
    b004:	f007 fe8a 	bl	12d1c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    b008:	2201      	movs	r2, #1
    b00a:	f1a4 0010 	sub.w	r0, r4, #16
    b00e:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    b010:	3501      	adds	r5, #1
    b012:	f007 fe65 	bl	12ce0 <z_impl_k_sem_init>
    b016:	2d04      	cmp	r5, #4
    b018:	f104 0440 	add.w	r4, r4, #64	; 0x40
    b01c:	d1f0      	bne.n	b000 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    b01e:	2000      	movs	r0, #0
    b020:	bd70      	pop	{r4, r5, r6, pc}
    b022:	bf00      	nop
    b024:	20008acc 	.word	0x20008acc
    b028:	0000ae09 	.word	0x0000ae09

0000b02c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b030:	4605      	mov	r5, r0
	__asm__ volatile(
    b032:	f04f 0320 	mov.w	r3, #32
    b036:	f3ef 8611 	mrs	r6, BASEPRI
    b03a:	f383 8812 	msr	BASEPRI_MAX, r3
    b03e:	f3bf 8f6f 	isb	sy
	return list->head;
    b042:	4b0e      	ldr	r3, [pc, #56]	; (b07c <pm_state_notify+0x50>)
    b044:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b046:	b19c      	cbz	r4, b070 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b048:	f04f 090c 	mov.w	r9, #12
    b04c:	4f0c      	ldr	r7, [pc, #48]	; (b080 <pm_state_notify+0x54>)
    b04e:	f8df 8034 	ldr.w	r8, [pc, #52]	; b084 <pm_state_notify+0x58>
			callback = notifier->state_exit;
    b052:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    b056:	2d00      	cmp	r5, #0
    b058:	bf08      	it	eq
    b05a:	4613      	moveq	r3, r2
		if (callback) {
    b05c:	b12b      	cbz	r3, b06a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b05e:	f898 2014 	ldrb.w	r2, [r8, #20]
    b062:	fb09 f202 	mul.w	r2, r9, r2
    b066:	5cb8      	ldrb	r0, [r7, r2]
    b068:	4798      	blx	r3
	return node->next;
    b06a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b06c:	2c00      	cmp	r4, #0
    b06e:	d1f0      	bne.n	b052 <pm_state_notify+0x26>
	__asm__ volatile(
    b070:	f386 8811 	msr	BASEPRI, r6
    b074:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    b078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b07c:	20008ba0 	.word	0x20008ba0
    b080:	20008bb4 	.word	0x20008bb4
    b084:	20009858 	.word	0x20009858

0000b088 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b088:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    b08a:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    b08c:	4b17      	ldr	r3, [pc, #92]	; (b0ec <pm_system_resume+0x64>)
    b08e:	7d1c      	ldrb	r4, [r3, #20]
    b090:	f004 031f 	and.w	r3, r4, #31
    b094:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b096:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b098:	4b15      	ldr	r3, [pc, #84]	; (b0f0 <pm_system_resume+0x68>)
    b09a:	0961      	lsrs	r1, r4, #5
    b09c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b0a0:	e8d3 1fef 	ldaex	r1, [r3]
    b0a4:	ea01 0500 	and.w	r5, r1, r0
    b0a8:	e8c3 5fec 	stlex	ip, r5, [r3]
    b0ac:	f1bc 0f00 	cmp.w	ip, #0
    b0b0:	d1f6      	bne.n	b0a0 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b0b2:	4211      	tst	r1, r2
    b0b4:	d013      	beq.n	b0de <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
    b0b6:	4b0f      	ldr	r3, [pc, #60]	; (b0f4 <pm_system_resume+0x6c>)
    b0b8:	4d0f      	ldr	r5, [pc, #60]	; (b0f8 <pm_system_resume+0x70>)
    b0ba:	b18b      	cbz	r3, b0e0 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
    b0bc:	230c      	movs	r3, #12
    b0be:	4363      	muls	r3, r4
    b0c0:	18ea      	adds	r2, r5, r3
    b0c2:	7851      	ldrb	r1, [r2, #1]
    b0c4:	5ce8      	ldrb	r0, [r5, r3]
    b0c6:	f006 ffef 	bl	120a8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    b0ca:	2000      	movs	r0, #0
    b0cc:	f7ff ffae 	bl	b02c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b0d0:	230c      	movs	r3, #12
    b0d2:	435c      	muls	r4, r3
    b0d4:	2300      	movs	r3, #0
    b0d6:	192a      	adds	r2, r5, r4
    b0d8:	512b      	str	r3, [r5, r4]
    b0da:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b0de:	bd38      	pop	{r3, r4, r5, pc}
    b0e0:	f383 8811 	msr	BASEPRI, r3
    b0e4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b0e8:	e7ef      	b.n	b0ca <pm_system_resume+0x42>
    b0ea:	bf00      	nop
    b0ec:	20009858 	.word	0x20009858
    b0f0:	20008bc0 	.word	0x20008bc0
    b0f4:	000120a9 	.word	0x000120a9
    b0f8:	20008bb4 	.word	0x20008bb4

0000b0fc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    b100:	4b31      	ldr	r3, [pc, #196]	; (b1c8 <pm_system_suspend+0xcc>)
{
    b102:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    b104:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    b106:	f04f 0320 	mov.w	r3, #32
    b10a:	f3ef 8811 	mrs	r8, BASEPRI
    b10e:	f383 8812 	msr	BASEPRI_MAX, r3
    b112:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    b116:	240c      	movs	r4, #12
    b118:	436c      	muls	r4, r5
    b11a:	4b2c      	ldr	r3, [pc, #176]	; (b1cc <pm_system_suspend+0xd0>)
    b11c:	4e2c      	ldr	r6, [pc, #176]	; (b1d0 <pm_system_suspend+0xd4>)
    b11e:	5d19      	ldrb	r1, [r3, r4]
    b120:	191a      	adds	r2, r3, r4
    b122:	2900      	cmp	r1, #0
    b124:	d045      	beq.n	b1b2 <pm_system_suspend+0xb6>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    b126:	ca07      	ldmia	r2, {r0, r1, r2}
    b128:	eb06 0c04 	add.w	ip, r6, r4
    b12c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    b130:	2200      	movs	r2, #0
    b132:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    b134:	f388 8811 	msr	BASEPRI, r8
    b138:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b13c:	230c      	movs	r3, #12
    b13e:	436b      	muls	r3, r5
    b140:	5cf0      	ldrb	r0, [r6, r3]
    b142:	18f2      	adds	r2, r6, r3
    b144:	b398      	cbz	r0, b1ae <pm_system_suspend+0xb2>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    b146:	1c7b      	adds	r3, r7, #1
    b148:	d00f      	beq.n	b16a <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    b14a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    b14e:	2100      	movs	r1, #0
    b150:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b154:	481f      	ldr	r0, [pc, #124]	; (b1d4 <pm_system_suspend+0xd8>)
    b156:	2300      	movs	r3, #0
    b158:	fbec 0104 	umlal	r0, r1, ip, r4
    b15c:	4a1e      	ldr	r2, [pc, #120]	; (b1d8 <pm_system_suspend+0xdc>)
    b15e:	f7fc fff9 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    b162:	2101      	movs	r1, #1
    b164:	1a38      	subs	r0, r7, r0
    b166:	f007 ff35 	bl	12fd4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b16a:	f005 fc43 	bl	109f4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    b16e:	2001      	movs	r0, #1
    b170:	f7ff ff5c 	bl	b02c <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b174:	2101      	movs	r1, #1
    b176:	f005 021f 	and.w	r2, r5, #31
    b17a:	4091      	lsls	r1, r2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b17c:	4a17      	ldr	r2, [pc, #92]	; (b1dc <pm_system_suspend+0xe0>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b17e:	096b      	lsrs	r3, r5, #5
    b180:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b184:	e8d3 2fef 	ldaex	r2, [r3]
    b188:	430a      	orrs	r2, r1
    b18a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    b18e:	2800      	cmp	r0, #0
    b190:	d1f8      	bne.n	b184 <pm_system_suspend+0x88>
	if (pm_state_set != NULL) {
    b192:	4b13      	ldr	r3, [pc, #76]	; (b1e0 <pm_system_suspend+0xe4>)
    b194:	b133      	cbz	r3, b1a4 <pm_system_suspend+0xa8>
		pm_state_set(info->state, info->substate_id);
    b196:	200c      	movs	r0, #12
    b198:	4368      	muls	r0, r5
    b19a:	1833      	adds	r3, r6, r0
    b19c:	7859      	ldrb	r1, [r3, #1]
    b19e:	5c30      	ldrb	r0, [r6, r0]
    b1a0:	f006 ff76 	bl	12090 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    b1a4:	f7ff ff70 	bl	b088 <pm_system_resume>
	k_sched_unlock();
    b1a8:	f005 fdf4 	bl	10d94 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    b1ac:	2001      	movs	r0, #1
}
    b1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    b1b2:	4601      	mov	r1, r0
    b1b4:	4628      	mov	r0, r5
    b1b6:	f000 f815 	bl	b1e4 <pm_policy_next_state>
		if (info != NULL) {
    b1ba:	2800      	cmp	r0, #0
    b1bc:	d0ba      	beq.n	b134 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    b1be:	c807      	ldmia	r0, {r0, r1, r2}
    b1c0:	4434      	add	r4, r6
    b1c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    b1c6:	e7b5      	b.n	b134 <pm_system_suspend+0x38>
    b1c8:	20009858 	.word	0x20009858
    b1cc:	20008ba8 	.word	0x20008ba8
    b1d0:	20008bb4 	.word	0x20008bb4
    b1d4:	000f423f 	.word	0x000f423f
    b1d8:	000f4240 	.word	0x000f4240
    b1dc:	20008bc0 	.word	0x20008bc0
    b1e0:	00012091 	.word	0x00012091

0000b1e4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1e8:	b085      	sub	sp, #20
    b1ea:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b1ec:	a903      	add	r1, sp, #12
    b1ee:	f000 f841 	bl	b274 <pm_state_cpu_get_all>
    b1f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b1f6:	f04f 0b00 	mov.w	fp, #0

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    b1fa:	9b03      	ldr	r3, [sp, #12]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b1fc:	1e44      	subs	r4, r0, #1
		const struct pm_state_info *state = &cpu_states[i];
    b1fe:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b200:	4b19      	ldr	r3, [pc, #100]	; (b268 <pm_policy_next_state+0x84>)
    b202:	f8df 8068 	ldr.w	r8, [pc, #104]	; b26c <pm_policy_next_state+0x88>
    b206:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b20a:	b224      	sxth	r4, r4
    b20c:	1c63      	adds	r3, r4, #1
    b20e:	d104      	bne.n	b21a <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b210:	2500      	movs	r5, #0
}
    b212:	4628      	mov	r0, r5
    b214:	b005      	add	sp, #20
    b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b21a:	46c4      	mov	ip, r8
    b21c:	4659      	mov	r1, fp
		const struct pm_state_info *state = &cpu_states[i];
    b21e:	9b01      	ldr	r3, [sp, #4]
    b220:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    b224:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    b228:	6868      	ldr	r0, [r5, #4]
    b22a:	2300      	movs	r3, #0
    b22c:	fbe0 c107 	umlal	ip, r1, r0, r7
    b230:	4a0f      	ldr	r2, [pc, #60]	; (b270 <pm_policy_next_state+0x8c>)
    b232:	4660      	mov	r0, ip
    b234:	f7fc ff8e 	bl	8154 <__aeabi_uldivmod>
    b238:	46c4      	mov	ip, r8
    b23a:	4659      	mov	r1, fp
    b23c:	4681      	mov	r9, r0
    b23e:	68a8      	ldr	r0, [r5, #8]
    b240:	2300      	movs	r3, #0
    b242:	fbe0 c107 	umlal	ip, r1, r0, r7
    b246:	4a0a      	ldr	r2, [pc, #40]	; (b270 <pm_policy_next_state+0x8c>)
    b248:	4660      	mov	r0, ip
    b24a:	f7fc ff83 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b24e:	f1ba 3fff 	cmp.w	sl, #4294967295
    b252:	d001      	beq.n	b258 <pm_policy_next_state+0x74>
    b254:	4582      	cmp	sl, r0
    b256:	d904      	bls.n	b262 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    b258:	1c72      	adds	r2, r6, #1
    b25a:	d0da      	beq.n	b212 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    b25c:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    b25e:	42b0      	cmp	r0, r6
    b260:	d9d7      	bls.n	b212 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b262:	3c01      	subs	r4, #1
    b264:	b224      	sxth	r4, r4
    b266:	e7d1      	b.n	b20c <pm_policy_next_state+0x28>
    b268:	20008008 	.word	0x20008008
    b26c:	000f423f 	.word	0x000f423f
    b270:	000f4240 	.word	0x000f4240

0000b274 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b274:	b908      	cbnz	r0, b27a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b276:	4b02      	ldr	r3, [pc, #8]	; (b280 <pm_state_cpu_get_all+0xc>)
    b278:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b27a:	2000      	movs	r0, #0
    b27c:	4770      	bx	lr
    b27e:	bf00      	nop
    b280:	0001368c 	.word	0x0001368c

0000b284 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b284:	4901      	ldr	r1, [pc, #4]	; (b28c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b286:	2210      	movs	r2, #16
	str	r2, [r1]
    b288:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b28a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b28c:	e000ed10 	.word	0xe000ed10

0000b290 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b290:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b292:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b294:	f380 8811 	msr	BASEPRI, r0
	isb
    b298:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    b29c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    b2a0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b2a2:	b662      	cpsie	i
	isb
    b2a4:	f3bf 8f6f 	isb	sy

	bx	lr
    b2a8:	4770      	bx	lr
    b2aa:	bf00      	nop

0000b2ac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b2ac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b2ae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b2b0:	f381 8811 	msr	BASEPRI, r1

	wfe
    b2b4:	bf20      	wfe

	msr	BASEPRI, r0
    b2b6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b2ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b2bc:	4770      	bx	lr
    b2be:	bf00      	nop

0000b2c0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2c4:	4681      	mov	r9, r0

	if (esf != NULL) {
    b2c6:	460c      	mov	r4, r1
{
    b2c8:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    b2ca:	2900      	cmp	r1, #0
    b2cc:	d04c      	beq.n	b368 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    b2ce:	e9d1 1200 	ldrd	r1, r2, [r1]
    b2d2:	466e      	mov	r6, sp
    b2d4:	b08a      	sub	sp, #40	; 0x28
    b2d6:	68a3      	ldr	r3, [r4, #8]
    b2d8:	466d      	mov	r5, sp
    b2da:	f04f 0a05 	mov.w	sl, #5
    b2de:	46a8      	mov	r8, r5
    b2e0:	4825      	ldr	r0, [pc, #148]	; (b378 <z_arm_fatal_error+0xb8>)
    b2e2:	e9c5 2307 	strd	r2, r3, [r5, #28]
    b2e6:	e9c5 0105 	strd	r0, r1, [r5, #20]
    b2ea:	f848 af10 	str.w	sl, [r8, #16]!
    b2ee:	2300      	movs	r3, #0
    b2f0:	4642      	mov	r2, r8
    b2f2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b2f6:	4821      	ldr	r0, [pc, #132]	; (b37c <z_arm_fatal_error+0xbc>)
    b2f8:	f7fe fcea 	bl	9cd0 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    b2fc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    b300:	46b5      	mov	sp, r6
    b302:	6963      	ldr	r3, [r4, #20]
    b304:	46ad      	mov	sp, r5
    b306:	481e      	ldr	r0, [pc, #120]	; (b380 <z_arm_fatal_error+0xc0>)
    b308:	e9c5 2307 	strd	r2, r3, [r5, #28]
    b30c:	e9c5 0105 	strd	r0, r1, [r5, #20]
    b310:	f8c5 a010 	str.w	sl, [r5, #16]
    b314:	2300      	movs	r3, #0
    b316:	4642      	mov	r2, r8
    b318:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b31c:	4817      	ldr	r0, [pc, #92]	; (b37c <z_arm_fatal_error+0xbc>)
    b31e:	f7fe fcd7 	bl	9cd0 <z_impl_z_log_msg_static_create>
    b322:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    b324:	b088      	sub	sp, #32
    b326:	69e3      	ldr	r3, [r4, #28]
    b328:	466d      	mov	r5, sp
    b32a:	f04f 0a03 	mov.w	sl, #3
    b32e:	46a8      	mov	r8, r5
    b330:	4a14      	ldr	r2, [pc, #80]	; (b384 <z_arm_fatal_error+0xc4>)
    b332:	e9c5 2305 	strd	r2, r3, [r5, #20]
    b336:	f848 af10 	str.w	sl, [r8, #16]!
    b33a:	2300      	movs	r3, #0
    b33c:	4642      	mov	r2, r8
    b33e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b342:	480e      	ldr	r0, [pc, #56]	; (b37c <z_arm_fatal_error+0xbc>)
    b344:	f7fe fcc4 	bl	9cd0 <z_impl_z_log_msg_static_create>
    b348:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    b34a:	69a3      	ldr	r3, [r4, #24]
    b34c:	46ad      	mov	sp, r5
    b34e:	4a0e      	ldr	r2, [pc, #56]	; (b388 <z_arm_fatal_error+0xc8>)
    b350:	f8c5 a010 	str.w	sl, [r5, #16]
    b354:	e9c5 2305 	strd	r2, r3, [r5, #20]
    b358:	2300      	movs	r3, #0
    b35a:	4642      	mov	r2, r8
    b35c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b360:	4806      	ldr	r0, [pc, #24]	; (b37c <z_arm_fatal_error+0xbc>)
    b362:	f7fe fcb5 	bl	9cd0 <z_impl_z_log_msg_static_create>
    b366:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b368:	4621      	mov	r1, r4
    b36a:	4648      	mov	r0, r9
    b36c:	f004 fe1a 	bl	ffa4 <z_fatal_error>
}
    b370:	46bd      	mov	sp, r7
    b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b376:	bf00      	nop
    b378:	00013e22 	.word	0x00013e22
    b37c:	0001356c 	.word	0x0001356c
    b380:	00013e51 	.word	0x00013e51
    b384:	00013e80 	.word	0x00013e80
    b388:	00013e8f 	.word	0x00013e8f

0000b38c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b38c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b38e:	2b00      	cmp	r3, #0
    b390:	db08      	blt.n	b3a4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b392:	2201      	movs	r2, #1
    b394:	f000 001f 	and.w	r0, r0, #31
    b398:	fa02 f000 	lsl.w	r0, r2, r0
    b39c:	4a02      	ldr	r2, [pc, #8]	; (b3a8 <arch_irq_enable+0x1c>)
    b39e:	095b      	lsrs	r3, r3, #5
    b3a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    b3a4:	4770      	bx	lr
    b3a6:	bf00      	nop
    b3a8:	e000e100 	.word	0xe000e100

0000b3ac <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b3ac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	db0d      	blt.n	b3ce <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b3b2:	2201      	movs	r2, #1
    b3b4:	f000 001f 	and.w	r0, r0, #31
    b3b8:	fa02 f000 	lsl.w	r0, r2, r0
    b3bc:	095b      	lsrs	r3, r3, #5
    b3be:	4a04      	ldr	r2, [pc, #16]	; (b3d0 <arch_irq_disable+0x24>)
    b3c0:	3320      	adds	r3, #32
    b3c2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b3c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b3ca:	f3bf 8f6f 	isb	sy
}
    b3ce:	4770      	bx	lr
    b3d0:	e000e100 	.word	0xe000e100

0000b3d4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b3d4:	4b05      	ldr	r3, [pc, #20]	; (b3ec <arch_irq_is_enabled+0x18>)
    b3d6:	0942      	lsrs	r2, r0, #5
    b3d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b3dc:	2301      	movs	r3, #1
    b3de:	f000 001f 	and.w	r0, r0, #31
    b3e2:	fa03 f000 	lsl.w	r0, r3, r0
}
    b3e6:	4010      	ands	r0, r2
    b3e8:	4770      	bx	lr
    b3ea:	bf00      	nop
    b3ec:	e000e100 	.word	0xe000e100

0000b3f0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b3f0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b3f2:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    b3f4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3f8:	bfac      	ite	ge
    b3fa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3fe:	4b06      	ldrlt	r3, [pc, #24]	; (b418 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b400:	ea4f 1141 	mov.w	r1, r1, lsl #5
    b404:	b2c9      	uxtb	r1, r1
    b406:	bfab      	itete	ge
    b408:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b40c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b410:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b414:	5419      	strblt	r1, [r3, r0]
}
    b416:	4770      	bx	lr
    b418:	e000ed14 	.word	0xe000ed14

0000b41c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b41c:	bf30      	wfi
    b z_SysNmiOnReset
    b41e:	f7ff bffd 	b.w	b41c <z_SysNmiOnReset>
    b422:	bf00      	nop

0000b424 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b424:	4a0b      	ldr	r2, [pc, #44]	; (b454 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b426:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b428:	4b0b      	ldr	r3, [pc, #44]	; (b458 <z_arm_prep_c+0x34>)
    b42a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b42e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b434:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b438:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b43c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b444:	f004 fe46 	bl	100d4 <z_bss_zero>
	z_data_copy();
    b448:	f005 fde6 	bl	11018 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b44c:	f000 fbac 	bl	bba8 <z_arm_interrupt_init>
	z_cstart();
    b450:	f004 fe80 	bl	10154 <z_cstart>
    b454:	00008000 	.word	0x00008000
    b458:	e000ed00 	.word	0xe000ed00

0000b45c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b45c:	4a09      	ldr	r2, [pc, #36]	; (b484 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b45e:	490a      	ldr	r1, [pc, #40]	; (b488 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b460:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b462:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    b464:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    b466:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b468:	4908      	ldr	r1, [pc, #32]	; (b48c <arch_swap+0x30>)
    b46a:	684b      	ldr	r3, [r1, #4]
    b46c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b470:	604b      	str	r3, [r1, #4]
    b472:	2300      	movs	r3, #0
    b474:	f383 8811 	msr	BASEPRI, r3
    b478:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b47c:	6893      	ldr	r3, [r2, #8]
}
    b47e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    b480:	4770      	bx	lr
    b482:	bf00      	nop
    b484:	20009858 	.word	0x20009858
    b488:	00013844 	.word	0x00013844
    b48c:	e000ed00 	.word	0xe000ed00

0000b490 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b490:	4915      	ldr	r1, [pc, #84]	; (b4e8 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b492:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    b494:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b498:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b49c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b49e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b4a2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b4a6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    b4a8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b4ac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b4b0:	4f0e      	ldr	r7, [pc, #56]	; (b4ec <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b4b2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b4b6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    b4b8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b4ba:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    b4bc:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b4c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    b4c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b4c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b4c6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b4ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b4ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b4d2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    b4d6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    b4da:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    b4dc:	f006 feea 	bl	122b4 <configure_builtin_stack_guard>
    pop {r2, lr}
    b4e0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b4e4:	4770      	bx	lr
    b4e6:	0000      	.short	0x0000
    ldr r1, =_kernel
    b4e8:	20009858 	.word	0x20009858
    ldr v4, =_SCS_ICSR
    b4ec:	e000ed04 	.word	0xe000ed04

0000b4f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b4f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b4f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b4f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b4fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b4fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b500:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b504:	2902      	cmp	r1, #2
    beq _oops
    b506:	d0ff      	beq.n	b508 <_oops>

0000b508 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b508:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    b50a:	f006 fec4 	bl	12296 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    b50e:	bd01      	pop	{r0, pc}

0000b510 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b510:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b514:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    b516:	490c      	ldr	r1, [pc, #48]	; (b548 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    b518:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    b51c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    b51e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    b522:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b526:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    b528:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    b52c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b534:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b538:	2300      	movs	r3, #0
    b53a:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    b53c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b540:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b542:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    b544:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b546:	4770      	bx	lr
    b548:	0001180f 	.word	0x0001180f

0000b54c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b54c:	4b08      	ldr	r3, [pc, #32]	; (b570 <arch_switch_to_main_thread+0x24>)
    b54e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    b550:	6e43      	ldr	r3, [r0, #100]	; 0x64
    b552:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b556:	4610      	mov	r0, r2
    b558:	f381 8809 	msr	PSP, r1
    b55c:	2100      	movs	r1, #0
    b55e:	b663      	cpsie	if
    b560:	f381 8811 	msr	BASEPRI, r1
    b564:	f3bf 8f6f 	isb	sy
    b568:	2200      	movs	r2, #0
    b56a:	2300      	movs	r3, #0
    b56c:	f006 f94f 	bl	1180e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b570:	20009858 	.word	0x20009858

0000b574 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b574:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b576:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b578:	4a0b      	ldr	r2, [pc, #44]	; (b5a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b57a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    b57c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b57e:	bf1e      	ittt	ne
	movne	r1, #0
    b580:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b582:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    b584:	f007 fb1f 	blne	12bc6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b588:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b58a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b58e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b592:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b596:	4905      	ldr	r1, [pc, #20]	; (b5ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b598:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b59a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b59c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b59e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b5a2:	4903      	ldr	r1, [pc, #12]	; (b5b0 <_isr_wrapper+0x3c>)
	bx r1
    b5a4:	4708      	bx	r1
    b5a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    b5a8:	20009858 	.word	0x20009858
	ldr r1, =_sw_isr_table
    b5ac:	000132e0 	.word	0x000132e0
	ldr r1, =z_arm_int_exit
    b5b0:	0000b5b5 	.word	0x0000b5b5

0000b5b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b5b4:	4b04      	ldr	r3, [pc, #16]	; (b5c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b5b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b5b8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    b5ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b5bc:	d003      	beq.n	b5c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b5be:	4903      	ldr	r1, [pc, #12]	; (b5cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b5c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b5c4:	600a      	str	r2, [r1, #0]

0000b5c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b5c6:	4770      	bx	lr
	ldr r3, =_kernel
    b5c8:	20009858 	.word	0x20009858
	ldr r1, =_SCS_ICSR
    b5cc:	e000ed04 	.word	0xe000ed04

0000b5d0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    b5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5d4:	b086      	sub	sp, #24
    b5d6:	4606      	mov	r6, r0
    b5d8:	460d      	mov	r5, r1
    b5da:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    b5dc:	2402      	movs	r4, #2
    b5de:	4b41      	ldr	r3, [pc, #260]	; (b6e4 <mem_manage_fault.constprop.0+0x114>)
    b5e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b5e4:	4840      	ldr	r0, [pc, #256]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b5e6:	f107 0210 	add.w	r2, r7, #16
    b5ea:	617b      	str	r3, [r7, #20]
    b5ec:	613c      	str	r4, [r7, #16]
    b5ee:	f006 fe65 	bl	122bc <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b5f2:	4b3e      	ldr	r3, [pc, #248]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)
    b5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b5f6:	06db      	lsls	r3, r3, #27
    b5f8:	d509      	bpl.n	b60e <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    b5fa:	4b3d      	ldr	r3, [pc, #244]	; (b6f0 <mem_manage_fault.constprop.0+0x120>)
    b5fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b600:	4839      	ldr	r0, [pc, #228]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b602:	f107 0210 	add.w	r2, r7, #16
    b606:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b60a:	f006 fe57 	bl	122bc <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b60e:	4b37      	ldr	r3, [pc, #220]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)
    b610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b612:	0718      	lsls	r0, r3, #28
    b614:	d50a      	bpl.n	b62c <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    b616:	4b37      	ldr	r3, [pc, #220]	; (b6f4 <mem_manage_fault.constprop.0+0x124>)
    b618:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b61c:	617b      	str	r3, [r7, #20]
    b61e:	2302      	movs	r3, #2
    b620:	4831      	ldr	r0, [pc, #196]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b622:	f107 0210 	add.w	r2, r7, #16
    b626:	613b      	str	r3, [r7, #16]
    b628:	f006 fe48 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b62c:	4c2f      	ldr	r4, [pc, #188]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)
    b62e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b630:	0799      	lsls	r1, r3, #30
    b632:	d522      	bpl.n	b67a <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    b634:	46e8      	mov	r8, sp
    b636:	4b30      	ldr	r3, [pc, #192]	; (b6f8 <mem_manage_fault.constprop.0+0x128>)
    b638:	f107 0210 	add.w	r2, r7, #16
    b63c:	617b      	str	r3, [r7, #20]
    b63e:	2302      	movs	r3, #2
    b640:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b644:	4828      	ldr	r0, [pc, #160]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b646:	613b      	str	r3, [r7, #16]
    b648:	f006 fe38 	bl	122bc <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    b64c:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    b64e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b650:	0612      	lsls	r2, r2, #24
    b652:	d512      	bpl.n	b67a <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    b654:	b088      	sub	sp, #32
    b656:	466a      	mov	r2, sp
    b658:	4928      	ldr	r1, [pc, #160]	; (b6fc <mem_manage_fault.constprop.0+0x12c>)
    b65a:	4823      	ldr	r0, [pc, #140]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b65c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b660:	2303      	movs	r3, #3
    b662:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b666:	f842 3f10 	str.w	r3, [r2, #16]!
    b66a:	f006 fe27 	bl	122bc <z_log_msg_static_create.constprop.0>
    b66e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    b670:	b11e      	cbz	r6, b67a <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    b672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b678:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b67a:	4b1c      	ldr	r3, [pc, #112]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)
    b67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b67e:	07dc      	lsls	r4, r3, #31
    b680:	d50a      	bpl.n	b698 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    b682:	4b1f      	ldr	r3, [pc, #124]	; (b700 <mem_manage_fault.constprop.0+0x130>)
    b684:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b688:	617b      	str	r3, [r7, #20]
    b68a:	2302      	movs	r3, #2
    b68c:	4816      	ldr	r0, [pc, #88]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b68e:	f107 0210 	add.w	r2, r7, #16
    b692:	613b      	str	r3, [r7, #16]
    b694:	f006 fe12 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b698:	4b14      	ldr	r3, [pc, #80]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)
    b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b69c:	0698      	lsls	r0, r3, #26
    b69e:	d50a      	bpl.n	b6b6 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    b6a0:	4b18      	ldr	r3, [pc, #96]	; (b704 <mem_manage_fault.constprop.0+0x134>)
    b6a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b6a6:	617b      	str	r3, [r7, #20]
    b6a8:	2302      	movs	r3, #2
    b6aa:	480f      	ldr	r0, [pc, #60]	; (b6e8 <mem_manage_fault.constprop.0+0x118>)
    b6ac:	f107 0210 	add.w	r2, r7, #16
    b6b0:	613b      	str	r3, [r7, #16]
    b6b2:	f006 fe03 	bl	122bc <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    b6b6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b6b8:	4b0c      	ldr	r3, [pc, #48]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
    b6ba:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b6bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6be:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b6c0:	bf58      	it	pl
    b6c2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b6c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6c6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    b6c8:	bf42      	ittt	mi
    b6ca:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    b6cc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    b6d0:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b6d2:	4a06      	ldr	r2, [pc, #24]	; (b6ec <mem_manage_fault.constprop.0+0x11c>)
    b6d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b6d6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    b6da:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b6dc:	7028      	strb	r0, [r5, #0]
}
    b6de:	46bd      	mov	sp, r7
    b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6e4:	00013ebd 	.word	0x00013ebd
    b6e8:	0001356c 	.word	0x0001356c
    b6ec:	e000ed00 	.word	0xe000ed00
    b6f0:	00013ed3 	.word	0x00013ed3
    b6f4:	00013f06 	.word	0x00013f06
    b6f8:	00013f19 	.word	0x00013f19
    b6fc:	00013f31 	.word	0x00013f31
    b700:	00013f47 	.word	0x00013f47
    b704:	00013f66 	.word	0x00013f66

0000b708 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b70c:	b086      	sub	sp, #24
    b70e:	4606      	mov	r6, r0
    b710:	460d      	mov	r5, r1
    b712:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    b714:	2402      	movs	r4, #2
    b716:	4b3e      	ldr	r3, [pc, #248]	; (b810 <bus_fault.constprop.0+0x108>)
    b718:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b71c:	483d      	ldr	r0, [pc, #244]	; (b814 <bus_fault.constprop.0+0x10c>)
    b71e:	f107 0210 	add.w	r2, r7, #16
    b722:	617b      	str	r3, [r7, #20]
    b724:	613c      	str	r4, [r7, #16]
    b726:	f006 fdc9 	bl	122bc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b72a:	4b3b      	ldr	r3, [pc, #236]	; (b818 <bus_fault.constprop.0+0x110>)
    b72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b72e:	04d9      	lsls	r1, r3, #19
    b730:	d509      	bpl.n	b746 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    b732:	4b3a      	ldr	r3, [pc, #232]	; (b81c <bus_fault.constprop.0+0x114>)
    b734:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b738:	4836      	ldr	r0, [pc, #216]	; (b814 <bus_fault.constprop.0+0x10c>)
    b73a:	f107 0210 	add.w	r2, r7, #16
    b73e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b742:	f006 fdbb 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    b746:	4b34      	ldr	r3, [pc, #208]	; (b818 <bus_fault.constprop.0+0x110>)
    b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b74a:	051a      	lsls	r2, r3, #20
    b74c:	d50a      	bpl.n	b764 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    b74e:	4b34      	ldr	r3, [pc, #208]	; (b820 <bus_fault.constprop.0+0x118>)
    b750:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b754:	617b      	str	r3, [r7, #20]
    b756:	2302      	movs	r3, #2
    b758:	482e      	ldr	r0, [pc, #184]	; (b814 <bus_fault.constprop.0+0x10c>)
    b75a:	f107 0210 	add.w	r2, r7, #16
    b75e:	613b      	str	r3, [r7, #16]
    b760:	f006 fdac 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b764:	4c2c      	ldr	r4, [pc, #176]	; (b818 <bus_fault.constprop.0+0x110>)
    b766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b768:	059b      	lsls	r3, r3, #22
    b76a:	d522      	bpl.n	b7b2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    b76c:	46e8      	mov	r8, sp
    b76e:	4b2d      	ldr	r3, [pc, #180]	; (b824 <bus_fault.constprop.0+0x11c>)
    b770:	4828      	ldr	r0, [pc, #160]	; (b814 <bus_fault.constprop.0+0x10c>)
    b772:	617b      	str	r3, [r7, #20]
    b774:	2302      	movs	r3, #2
    b776:	f107 0210 	add.w	r2, r7, #16
    b77a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b77e:	613b      	str	r3, [r7, #16]
    b780:	f006 fd9c 	bl	122bc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    b784:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    b786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b788:	0410      	lsls	r0, r2, #16
    b78a:	d512      	bpl.n	b7b2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    b78c:	b088      	sub	sp, #32
    b78e:	466a      	mov	r2, sp
    b790:	4925      	ldr	r1, [pc, #148]	; (b828 <bus_fault.constprop.0+0x120>)
    b792:	4820      	ldr	r0, [pc, #128]	; (b814 <bus_fault.constprop.0+0x10c>)
    b794:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b798:	2303      	movs	r3, #3
    b79a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b79e:	f842 3f10 	str.w	r3, [r2, #16]!
    b7a2:	f006 fd8b 	bl	122bc <z_log_msg_static_create.constprop.0>
    b7a6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    b7a8:	b11e      	cbz	r6, b7b2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    b7aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b7ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    b7b0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    b7b2:	4b19      	ldr	r3, [pc, #100]	; (b818 <bus_fault.constprop.0+0x110>)
    b7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7b6:	0559      	lsls	r1, r3, #21
    b7b8:	d50a      	bpl.n	b7d0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    b7ba:	4b1c      	ldr	r3, [pc, #112]	; (b82c <bus_fault.constprop.0+0x124>)
    b7bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7c0:	617b      	str	r3, [r7, #20]
    b7c2:	2302      	movs	r3, #2
    b7c4:	4813      	ldr	r0, [pc, #76]	; (b814 <bus_fault.constprop.0+0x10c>)
    b7c6:	f107 0210 	add.w	r2, r7, #16
    b7ca:	613b      	str	r3, [r7, #16]
    b7cc:	f006 fd76 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b7d0:	4b11      	ldr	r3, [pc, #68]	; (b818 <bus_fault.constprop.0+0x110>)
    b7d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b7d4:	05d2      	lsls	r2, r2, #23
    b7d6:	d515      	bpl.n	b804 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    b7d8:	4b15      	ldr	r3, [pc, #84]	; (b830 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    b7da:	617b      	str	r3, [r7, #20]
    b7dc:	2302      	movs	r3, #2
    b7de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7e2:	480c      	ldr	r0, [pc, #48]	; (b814 <bus_fault.constprop.0+0x10c>)
    b7e4:	f107 0210 	add.w	r2, r7, #16
    b7e8:	613b      	str	r3, [r7, #16]
    b7ea:	f006 fd67 	bl	122bc <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    b7ee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b7f0:	4a09      	ldr	r2, [pc, #36]	; (b818 <bus_fault.constprop.0+0x110>)

	return reason;
}
    b7f2:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b7f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b7f6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    b7fa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b7fc:	7028      	strb	r0, [r5, #0]
}
    b7fe:	46bd      	mov	sp, r7
    b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b806:	049b      	lsls	r3, r3, #18
    b808:	d5f1      	bpl.n	b7ee <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    b80a:	4b0a      	ldr	r3, [pc, #40]	; (b834 <bus_fault.constprop.0+0x12c>)
    b80c:	e7e5      	b.n	b7da <bus_fault.constprop.0+0xd2>
    b80e:	bf00      	nop
    b810:	00013f95 	.word	0x00013f95
    b814:	0001356c 	.word	0x0001356c
    b818:	e000ed00 	.word	0xe000ed00
    b81c:	00013fab 	.word	0x00013fab
    b820:	00013f06 	.word	0x00013f06
    b824:	00013fbc 	.word	0x00013fbc
    b828:	00013fd5 	.word	0x00013fd5
    b82c:	00013fea 	.word	0x00013fea
    b830:	00014005 	.word	0x00014005
    b834:	00013f66 	.word	0x00013f66

0000b838 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    b838:	b510      	push	{r4, lr}
    b83a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    b83c:	2402      	movs	r4, #2
    b83e:	4b3a      	ldr	r3, [pc, #232]	; (b928 <usage_fault.constprop.0+0xf0>)
    b840:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b844:	4839      	ldr	r0, [pc, #228]	; (b92c <usage_fault.constprop.0+0xf4>)
    b846:	aa04      	add	r2, sp, #16
    b848:	9305      	str	r3, [sp, #20]
    b84a:	9404      	str	r4, [sp, #16]
    b84c:	f006 fd36 	bl	122bc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b850:	4b37      	ldr	r3, [pc, #220]	; (b930 <usage_fault.constprop.0+0xf8>)
    b852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b854:	019b      	lsls	r3, r3, #6
    b856:	d508      	bpl.n	b86a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    b858:	4b36      	ldr	r3, [pc, #216]	; (b934 <usage_fault.constprop.0+0xfc>)
    b85a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b85e:	4833      	ldr	r0, [pc, #204]	; (b92c <usage_fault.constprop.0+0xf4>)
    b860:	aa04      	add	r2, sp, #16
    b862:	e9cd 4304 	strd	r4, r3, [sp, #16]
    b866:	f006 fd29 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    b86a:	4b31      	ldr	r3, [pc, #196]	; (b930 <usage_fault.constprop.0+0xf8>)
    b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b86e:	01dc      	lsls	r4, r3, #7
    b870:	d509      	bpl.n	b886 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    b872:	4b31      	ldr	r3, [pc, #196]	; (b938 <usage_fault.constprop.0+0x100>)
    b874:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b878:	9305      	str	r3, [sp, #20]
    b87a:	2302      	movs	r3, #2
    b87c:	482b      	ldr	r0, [pc, #172]	; (b92c <usage_fault.constprop.0+0xf4>)
    b87e:	aa04      	add	r2, sp, #16
    b880:	9304      	str	r3, [sp, #16]
    b882:	f006 fd1b 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    b886:	4b2a      	ldr	r3, [pc, #168]	; (b930 <usage_fault.constprop.0+0xf8>)
    b888:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    b88a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    b88e:	d009      	beq.n	b8a4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    b890:	2402      	movs	r4, #2
    b892:	4b2a      	ldr	r3, [pc, #168]	; (b93c <usage_fault.constprop.0+0x104>)
    b894:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b898:	4824      	ldr	r0, [pc, #144]	; (b92c <usage_fault.constprop.0+0xf4>)
    b89a:	aa04      	add	r2, sp, #16
    b89c:	9305      	str	r3, [sp, #20]
    b89e:	9404      	str	r4, [sp, #16]
    b8a0:	f006 fd0c 	bl	122bc <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    b8a4:	4b22      	ldr	r3, [pc, #136]	; (b930 <usage_fault.constprop.0+0xf8>)
    b8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8a8:	0318      	lsls	r0, r3, #12
    b8aa:	d509      	bpl.n	b8c0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    b8ac:	4b24      	ldr	r3, [pc, #144]	; (b940 <usage_fault.constprop.0+0x108>)
    b8ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8b2:	9305      	str	r3, [sp, #20]
    b8b4:	2302      	movs	r3, #2
    b8b6:	481d      	ldr	r0, [pc, #116]	; (b92c <usage_fault.constprop.0+0xf4>)
    b8b8:	aa04      	add	r2, sp, #16
    b8ba:	9304      	str	r3, [sp, #16]
    b8bc:	f006 fcfe 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    b8c0:	4b1b      	ldr	r3, [pc, #108]	; (b930 <usage_fault.constprop.0+0xf8>)
    b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8c4:	0359      	lsls	r1, r3, #13
    b8c6:	d509      	bpl.n	b8dc <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    b8c8:	4b1e      	ldr	r3, [pc, #120]	; (b944 <usage_fault.constprop.0+0x10c>)
    b8ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8ce:	9305      	str	r3, [sp, #20]
    b8d0:	2302      	movs	r3, #2
    b8d2:	4816      	ldr	r0, [pc, #88]	; (b92c <usage_fault.constprop.0+0xf4>)
    b8d4:	aa04      	add	r2, sp, #16
    b8d6:	9304      	str	r3, [sp, #16]
    b8d8:	f006 fcf0 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    b8dc:	4b14      	ldr	r3, [pc, #80]	; (b930 <usage_fault.constprop.0+0xf8>)
    b8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8e0:	039a      	lsls	r2, r3, #14
    b8e2:	d509      	bpl.n	b8f8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    b8e4:	4b18      	ldr	r3, [pc, #96]	; (b948 <usage_fault.constprop.0+0x110>)
    b8e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8ea:	9305      	str	r3, [sp, #20]
    b8ec:	2302      	movs	r3, #2
    b8ee:	480f      	ldr	r0, [pc, #60]	; (b92c <usage_fault.constprop.0+0xf4>)
    b8f0:	aa04      	add	r2, sp, #16
    b8f2:	9304      	str	r3, [sp, #16]
    b8f4:	f006 fce2 	bl	122bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    b8f8:	4b0d      	ldr	r3, [pc, #52]	; (b930 <usage_fault.constprop.0+0xf8>)
    b8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8fc:	03db      	lsls	r3, r3, #15
    b8fe:	d509      	bpl.n	b914 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    b900:	4b12      	ldr	r3, [pc, #72]	; (b94c <usage_fault.constprop.0+0x114>)
    b902:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b906:	9305      	str	r3, [sp, #20]
    b908:	2302      	movs	r3, #2
    b90a:	4808      	ldr	r0, [pc, #32]	; (b92c <usage_fault.constprop.0+0xf4>)
    b90c:	aa04      	add	r2, sp, #16
    b90e:	9304      	str	r3, [sp, #16]
    b910:	f006 fcd4 	bl	122bc <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b914:	4a06      	ldr	r2, [pc, #24]	; (b930 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    b916:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b918:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b91a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    b91e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    b922:	6293      	str	r3, [r2, #40]	; 0x28
}
    b924:	b006      	add	sp, #24
    b926:	bd10      	pop	{r4, pc}
    b928:	0001401d 	.word	0x0001401d
    b92c:	0001356c 	.word	0x0001356c
    b930:	e000ed00 	.word	0xe000ed00
    b934:	00014035 	.word	0x00014035
    b938:	00014048 	.word	0x00014048
    b93c:	00014062 	.word	0x00014062
    b940:	0001408c 	.word	0x0001408c
    b944:	000140aa 	.word	0x000140aa
    b948:	000140cf 	.word	0x000140cf
    b94c:	000140e9 	.word	0x000140e9

0000b950 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b954:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b956:	4b7c      	ldr	r3, [pc, #496]	; (bb48 <z_arm_fault+0x1f8>)
{
    b958:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b95a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    b95e:	468a      	mov	sl, r1
    b960:	4614      	mov	r4, r2
    b962:	2600      	movs	r6, #0
    b964:	af00      	add	r7, sp, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b966:	f3c9 0808 	ubfx	r8, r9, #0, #9
    b96a:	f386 8811 	msr	BASEPRI, r6
    b96e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    b972:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    b976:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    b97a:	d125      	bne.n	b9c8 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    b97c:	07d0      	lsls	r0, r2, #31
    b97e:	d423      	bmi.n	b9c8 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    b980:	0651      	lsls	r1, r2, #25
    b982:	d403      	bmi.n	b98c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    b984:	0722      	lsls	r2, r4, #28
    b986:	d40f      	bmi.n	b9a8 <z_arm_fault+0x58>
			*nested_exc = true;
    b988:	2601      	movs	r6, #1
    b98a:	e00f      	b.n	b9ac <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    b98c:	4b6f      	ldr	r3, [pc, #444]	; (bb4c <z_arm_fault+0x1fc>)
    b98e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b992:	61fb      	str	r3, [r7, #28]
    b994:	2302      	movs	r3, #2
    b996:	486e      	ldr	r0, [pc, #440]	; (bb50 <z_arm_fault+0x200>)
    b998:	f107 0218 	add.w	r2, r7, #24
    b99c:	61bb      	str	r3, [r7, #24]
    b99e:	f006 fc8d 	bl	122bc <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    b9a2:	f014 0604 	ands.w	r6, r4, #4
    b9a6:	d001      	beq.n	b9ac <z_arm_fault+0x5c>
			ptr_esf = (z_arch_esf_t *)psp;
    b9a8:	4655      	mov	r5, sl
	*nested_exc = false;
    b9aa:	2600      	movs	r6, #0
	*recoverable = false;
    b9ac:	2300      	movs	r3, #0
    b9ae:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    b9b0:	f1a8 0303 	sub.w	r3, r8, #3
    b9b4:	2b09      	cmp	r3, #9
    b9b6:	f200 80a6 	bhi.w	bb06 <z_arm_fault+0x1b6>
    b9ba:	e8df f003 	tbb	[pc, r3]
    b9be:	9907      	.short	0x9907
    b9c0:	a4a4969c 	.word	0xa4a4969c
    b9c4:	9fa4a4a4 	.word	0x9fa4a4a4
		return NULL;
    b9c8:	4635      	mov	r5, r6
    b9ca:	e7ef      	b.n	b9ac <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    b9cc:	46e9      	mov	r9, sp
    b9ce:	f04f 0a02 	mov.w	sl, #2
	*recoverable = false;
    b9d2:	f04f 0b00 	mov.w	fp, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    b9d6:	4b5f      	ldr	r3, [pc, #380]	; (bb54 <z_arm_fault+0x204>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b9d8:	f8df 816c 	ldr.w	r8, [pc, #364]	; bb48 <z_arm_fault+0x1f8>
	PR_FAULT_INFO("***** HARD FAULT *****");
    b9dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9e0:	485b      	ldr	r0, [pc, #364]	; (bb50 <z_arm_fault+0x200>)
    b9e2:	f107 0218 	add.w	r2, r7, #24
    b9e6:	61fb      	str	r3, [r7, #28]
    b9e8:	f8c7 a018 	str.w	sl, [r7, #24]
    b9ec:	f006 fc66 	bl	122bc <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b9f0:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    b9f4:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b9f8:	ea14 040a 	ands.w	r4, r4, sl
    b9fc:	d00b      	beq.n	ba16 <z_arm_fault+0xc6>
		PR_EXC("  Bus fault on vector table read");
    b9fe:	4b56      	ldr	r3, [pc, #344]	; (bb58 <z_arm_fault+0x208>)
    ba00:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    ba04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba08:	4851      	ldr	r0, [pc, #324]	; (bb50 <z_arm_fault+0x200>)
    ba0a:	f107 0218 	add.w	r2, r7, #24
    ba0e:	f006 fc55 	bl	122bc <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ba12:	2400      	movs	r4, #0
}
    ba14:	e00d      	b.n	ba32 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    ba16:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	da25      	bge.n	ba6a <z_arm_fault+0x11a>
		PR_EXC("  Debug event");
    ba1e:	4b4f      	ldr	r3, [pc, #316]	; (bb5c <z_arm_fault+0x20c>)
    ba20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba24:	484a      	ldr	r0, [pc, #296]	; (bb50 <z_arm_fault+0x200>)
    ba26:	f107 0218 	add.w	r2, r7, #24
    ba2a:	e9c7 a306 	strd	sl, r3, [r7, #24]
    ba2e:	f006 fc45 	bl	122bc <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    ba32:	79fb      	ldrb	r3, [r7, #7]
    ba34:	b9ab      	cbnz	r3, ba62 <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    ba36:	2220      	movs	r2, #32
    ba38:	4629      	mov	r1, r5
    ba3a:	f107 0008 	add.w	r0, r7, #8
    ba3e:	f006 fc84 	bl	1234a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ba44:	2e00      	cmp	r6, #0
    ba46:	d07a      	beq.n	bb3e <z_arm_fault+0x1ee>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    ba48:	f3c3 0208 	ubfx	r2, r3, #0, #9
    ba4c:	b922      	cbnz	r2, ba58 <z_arm_fault+0x108>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    ba4e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    ba52:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    ba56:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    ba58:	4620      	mov	r0, r4
    ba5a:	f107 0108 	add.w	r1, r7, #8
    ba5e:	f7ff fc2f 	bl	b2c0 <z_arm_fatal_error>
}
    ba62:	372c      	adds	r7, #44	; 0x2c
    ba64:	46bd      	mov	sp, r7
    ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    ba6a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    ba6e:	005b      	lsls	r3, r3, #1
    ba70:	d5df      	bpl.n	ba32 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    ba72:	4b3b      	ldr	r3, [pc, #236]	; (bb60 <z_arm_fault+0x210>)
    ba74:	f107 0218 	add.w	r2, r7, #24
    ba78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba7c:	4834      	ldr	r0, [pc, #208]	; (bb50 <z_arm_fault+0x200>)
    ba7e:	e9c7 a306 	strd	sl, r3, [r7, #24]
    ba82:	f006 fc1b 	bl	122bc <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    ba86:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ba88:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    ba8c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    ba90:	429a      	cmp	r2, r3
    ba92:	d110      	bne.n	bab6 <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    ba94:	b088      	sub	sp, #32
    ba96:	466a      	mov	r2, sp
    ba98:	682b      	ldr	r3, [r5, #0]
    ba9a:	4932      	ldr	r1, [pc, #200]	; (bb64 <z_arm_fault+0x214>)
    ba9c:	482c      	ldr	r0, [pc, #176]	; (bb50 <z_arm_fault+0x200>)
    ba9e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    baa2:	2303      	movs	r3, #3
    baa4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    baa8:	f842 3f10 	str.w	r3, [r2, #16]!
    baac:	f006 fc06 	bl	122bc <z_log_msg_static_create.constprop.0>
    bab0:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    bab2:	682c      	ldr	r4, [r5, #0]
    bab4:	e7bd      	b.n	ba32 <z_arm_fault+0xe2>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    bab6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    baba:	b2db      	uxtb	r3, r3
    babc:	b12b      	cbz	r3, baca <z_arm_fault+0x17a>
			reason = mem_manage_fault(esf, 1, recoverable);
    babe:	2001      	movs	r0, #1
    bac0:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    bac2:	f7ff fd85 	bl	b5d0 <mem_manage_fault.constprop.0>
    bac6:	4604      	mov	r4, r0
		break;
    bac8:	e7b3      	b.n	ba32 <z_arm_fault+0xe2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    baca:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bace:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    bad2:	d004      	beq.n	bade <z_arm_fault+0x18e>
			reason = bus_fault(esf, 1, recoverable);
    bad4:	2001      	movs	r0, #1
    bad6:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    bad8:	f7ff fe16 	bl	b708 <bus_fault.constprop.0>
    badc:	e7f3      	b.n	bac6 <z_arm_fault+0x176>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    bade:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bae2:	0c1b      	lsrs	r3, r3, #16
    bae4:	041b      	lsls	r3, r3, #16
    bae6:	2b00      	cmp	r3, #0
    bae8:	d0a3      	beq.n	ba32 <z_arm_fault+0xe2>
		reason = usage_fault(esf);
    baea:	f7ff fea5 	bl	b838 <usage_fault.constprop.0>
    baee:	e7ea      	b.n	bac6 <z_arm_fault+0x176>
		reason = mem_manage_fault(esf, 0, recoverable);
    baf0:	2000      	movs	r0, #0
    baf2:	1df9      	adds	r1, r7, #7
    baf4:	e7e5      	b.n	bac2 <z_arm_fault+0x172>
		reason = bus_fault(esf, 0, recoverable);
    baf6:	2000      	movs	r0, #0
    baf8:	1df9      	adds	r1, r7, #7
    bafa:	e7ed      	b.n	bad8 <z_arm_fault+0x188>
	PR_FAULT_INFO(
    bafc:	4b1a      	ldr	r3, [pc, #104]	; (bb68 <z_arm_fault+0x218>)
    bafe:	61fb      	str	r3, [r7, #28]
    bb00:	2302      	movs	r3, #2
    bb02:	61bb      	str	r3, [r7, #24]
    bb04:	e77e      	b.n	ba04 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    bb06:	4a19      	ldr	r2, [pc, #100]	; (bb6c <z_arm_fault+0x21c>)
    bb08:	466c      	mov	r4, sp
    bb0a:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    bb0e:	b08a      	sub	sp, #40	; 0x28
    bb10:	4b17      	ldr	r3, [pc, #92]	; (bb70 <z_arm_fault+0x220>)
    bb12:	bf18      	it	ne
    bb14:	4613      	movne	r3, r2
    bb16:	466a      	mov	r2, sp
    bb18:	4916      	ldr	r1, [pc, #88]	; (bb74 <z_arm_fault+0x224>)
    bb1a:	480d      	ldr	r0, [pc, #52]	; (bb50 <z_arm_fault+0x200>)
    bb1c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bb20:	f1a8 0310 	sub.w	r3, r8, #16
    bb24:	61d3      	str	r3, [r2, #28]
    bb26:	2302      	movs	r3, #2
    bb28:	f882 3020 	strb.w	r3, [r2, #32]
    bb2c:	4b12      	ldr	r3, [pc, #72]	; (bb78 <z_arm_fault+0x228>)
    bb2e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    bb32:	f842 3f10 	str.w	r3, [r2, #16]!
    bb36:	f006 fbc1 	bl	122bc <z_log_msg_static_create.constprop.0>
    bb3a:	46a5      	mov	sp, r4
    bb3c:	e769      	b.n	ba12 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bb3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    bb42:	f023 0301 	bic.w	r3, r3, #1
    bb46:	e786      	b.n	ba56 <z_arm_fault+0x106>
    bb48:	e000ed00 	.word	0xe000ed00
    bb4c:	00014142 	.word	0x00014142
    bb50:	0001356c 	.word	0x0001356c
    bb54:	00014165 	.word	0x00014165
    bb58:	0001417c 	.word	0x0001417c
    bb5c:	0001419d 	.word	0x0001419d
    bb60:	000141ab 	.word	0x000141ab
    bb64:	000141ca 	.word	0x000141ca
    bb68:	000141e6 	.word	0x000141e6
    bb6c:	00014129 	.word	0x00014129
    bb70:	00014114 	.word	0x00014114
    bb74:	0001420a 	.word	0x0001420a
    bb78:	01000004 	.word	0x01000004

0000bb7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    bb7c:	4b04      	ldr	r3, [pc, #16]	; (bb90 <z_arm_fault_init+0x14>)
    bb7e:	695a      	ldr	r2, [r3, #20]
    bb80:	f042 0210 	orr.w	r2, r2, #16
    bb84:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    bb86:	695a      	ldr	r2, [r3, #20]
    bb88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bb8c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    bb8e:	4770      	bx	lr
    bb90:	e000ed00 	.word	0xe000ed00

0000bb94 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    bb94:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    bb98:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    bb9c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    bb9e:	4672      	mov	r2, lr
	bl z_arm_fault
    bba0:	f7ff fed6 	bl	b950 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    bba4:	bd01      	pop	{r0, pc}
    bba6:	bf00      	nop

0000bba8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    bba8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bbaa:	2120      	movs	r1, #32
    bbac:	4803      	ldr	r0, [pc, #12]	; (bbbc <z_arm_interrupt_init+0x14>)
    bbae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bbb0:	3301      	adds	r3, #1
    bbb2:	2b45      	cmp	r3, #69	; 0x45
    bbb4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bbb8:	d1f9      	bne.n	bbae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    bbba:	4770      	bx	lr
    bbbc:	e000e100 	.word	0xe000e100

0000bbc0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    bbc0:	2000      	movs	r0, #0
    msr CONTROL, r0
    bbc2:	f380 8814 	msr	CONTROL, r0
    isb
    bbc6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    bbca:	2000      	movs	r0, #0
    msr MSPLIM, r0
    bbcc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    bbd0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    bbd4:	f7fd fe18 	bl	9808 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    bbd8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    bbda:	490e      	ldr	r1, [pc, #56]	; (bc14 <__start+0x54>)
    str r0, [r1]
    bbdc:	6008      	str	r0, [r1, #0]
    dsb
    bbde:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bbe2:	480d      	ldr	r0, [pc, #52]	; (bc18 <__start+0x58>)
    msr msp, r0
    bbe4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    bbe8:	f000 f83e 	bl	bc68 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bbec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    bbee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    bbf2:	480a      	ldr	r0, [pc, #40]	; (bc1c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bbf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    bbf8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    bbfa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    bbfe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    bc02:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    bc04:	4308      	orrs	r0, r1
    msr CONTROL, r0
    bc06:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    bc0a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    bc0e:	f7ff fc09 	bl	b424 <z_arm_prep_c>
    bc12:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    bc14:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bc18:	2000a3c8 	.word	0x2000a3c8
    ldr r0, =z_interrupt_stacks
    bc1c:	2000a508 	.word	0x2000a508

0000bc20 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    bc20:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    bc24:	4905      	ldr	r1, [pc, #20]	; (bc3c <sys_arch_reboot+0x1c>)
    bc26:	4b06      	ldr	r3, [pc, #24]	; (bc40 <sys_arch_reboot+0x20>)
    bc28:	68ca      	ldr	r2, [r1, #12]
    bc2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    bc2e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    bc30:	60cb      	str	r3, [r1, #12]
    bc32:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    bc36:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    bc38:	e7fd      	b.n	bc36 <sys_arch_reboot+0x16>
    bc3a:	bf00      	nop
    bc3c:	e000ed00 	.word	0xe000ed00
    bc40:	05fa0004 	.word	0x05fa0004

0000bc44 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    bc44:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    bc46:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    bc48:	4906      	ldr	r1, [pc, #24]	; (bc64 <z_arm_clear_arm_mpu_config+0x20>)
    bc4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    bc4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    bc52:	4293      	cmp	r3, r2
    bc54:	d100      	bne.n	bc58 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    bc56:	4770      	bx	lr
  mpu->RNR = rnr;
    bc58:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    bc5c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    bc60:	3301      	adds	r3, #1
    bc62:	e7f6      	b.n	bc52 <z_arm_clear_arm_mpu_config+0xe>
    bc64:	e000ed00 	.word	0xe000ed00

0000bc68 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    bc68:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    bc6a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    bc6c:	2400      	movs	r4, #0
    bc6e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    bc72:	f7ff ffe7 	bl	bc44 <z_arm_clear_arm_mpu_config>
    bc76:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    bc78:	f04f 30ff 	mov.w	r0, #4294967295
    bc7c:	4a0b      	ldr	r2, [pc, #44]	; (bcac <z_arm_init_arch_hw_at_boot+0x44>)
    bc7e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    bc82:	3301      	adds	r3, #1
    bc84:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    bc86:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    bc8a:	d1f8      	bne.n	bc7e <z_arm_init_arch_hw_at_boot+0x16>
    bc8c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    bc8e:	f04f 30ff 	mov.w	r0, #4294967295
    bc92:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    bc96:	3301      	adds	r3, #1
    bc98:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    bc9a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    bc9e:	d1f8      	bne.n	bc92 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    bca0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    bca2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bca6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    bcaa:	bd10      	pop	{r4, pc}
    bcac:	e000e100 	.word	0xe000e100

0000bcb0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bcb0:	4b08      	ldr	r3, [pc, #32]	; (bcd4 <z_impl_k_thread_abort+0x24>)
    bcb2:	689b      	ldr	r3, [r3, #8]
    bcb4:	4283      	cmp	r3, r0
    bcb6:	d10b      	bne.n	bcd0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bcb8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    bcbc:	b143      	cbz	r3, bcd0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bcbe:	4b06      	ldr	r3, [pc, #24]	; (bcd8 <z_impl_k_thread_abort+0x28>)
    bcc0:	685a      	ldr	r2, [r3, #4]
    bcc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    bcc6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    bcc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bcca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bcce:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    bcd0:	f005 b930 	b.w	10f34 <z_thread_abort>
    bcd4:	20009858 	.word	0x20009858
    bcd8:	e000ed00 	.word	0xe000ed00

0000bcdc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    bcdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bcde:	4c09      	ldr	r4, [pc, #36]	; (bd04 <z_arm_configure_static_mpu_regions+0x28>)
    bce0:	4a09      	ldr	r2, [pc, #36]	; (bd08 <z_arm_configure_static_mpu_regions+0x2c>)
    bce2:	4623      	mov	r3, r4
    bce4:	2101      	movs	r1, #1
    bce6:	4809      	ldr	r0, [pc, #36]	; (bd0c <z_arm_configure_static_mpu_regions+0x30>)
    bce8:	f000 f92a 	bl	bf40 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    bcec:	2300      	movs	r3, #0
    bcee:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    bcf0:	4b07      	ldr	r3, [pc, #28]	; (bd10 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bcf2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    bcf4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bcf6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    bcf8:	9301      	str	r3, [sp, #4]
    bcfa:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bcfc:	f000 f92a 	bl	bf54 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    bd00:	b004      	add	sp, #16
    bd02:	bd10      	pop	{r4, pc}
    bd04:	20080000 	.word	0x20080000
    bd08:	20008000 	.word	0x20008000
    bd0c:	0001368c 	.word	0x0001368c
    bd10:	20008210 	.word	0x20008210

0000bd14 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    bd14:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    bd16:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    bd18:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    bd1a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    bd1e:	f004 031f 	and.w	r3, r4, #31
    bd22:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    bd24:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    bd26:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    bd28:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    bd2c:	4905      	ldr	r1, [pc, #20]	; (bd44 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    bd2e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    bd32:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    bd36:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    bd3a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    bd3e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    bd42:	bd10      	pop	{r4, pc}
    bd44:	e000ed00 	.word	0xe000ed00

0000bd48 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    bd48:	b580      	push	{r7, lr}
    bd4a:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    bd4c:	b088      	sub	sp, #32
    bd4e:	466a      	mov	r2, sp
    bd50:	4b07      	ldr	r3, [pc, #28]	; (bd70 <region_allocate_and_init.part.0+0x28>)
    bd52:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bd56:	2303      	movs	r3, #3
    bd58:	f842 3f10 	str.w	r3, [r2, #16]!
    bd5c:	2300      	movs	r3, #0
    bd5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd62:	4804      	ldr	r0, [pc, #16]	; (bd74 <region_allocate_and_init.part.0+0x2c>)
    bd64:	f7fd ffb4 	bl	9cd0 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    bd68:	f06f 0015 	mvn.w	r0, #21
    bd6c:	46bd      	mov	sp, r7
    bd6e:	bd80      	pop	{r7, pc}
    bd70:	00014221 	.word	0x00014221
    bd74:	00013564 	.word	0x00013564

0000bd78 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd7c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    bd7e:	4606      	mov	r6, r0
    bd80:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bd84:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    bd86:	4d5f      	ldr	r5, [pc, #380]	; (bf04 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bd88:	af00      	add	r7, sp, #0
    bd8a:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    bd8c:	687b      	ldr	r3, [r7, #4]
    bd8e:	4599      	cmp	r9, r3
    bd90:	da35      	bge.n	bdfe <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    bd92:	f8d6 8004 	ldr.w	r8, [r6, #4]
    bd96:	f1b8 0f00 	cmp.w	r8, #0
    bd9a:	d054      	beq.n	be46 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    bd9c:	f1b8 0f1f 	cmp.w	r8, #31
    bda0:	d91b      	bls.n	bdda <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    bda2:	f018 0f1f 	tst.w	r8, #31
    bda6:	d118      	bne.n	bdda <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    bda8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    bdac:	f01b 0f1f 	tst.w	fp, #31
    bdb0:	d113      	bne.n	bdda <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bdb2:	4658      	mov	r0, fp
    bdb4:	f006 fa87 	bl	122c6 <arm_cmse_mpu_region_get>
    bdb8:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bdba:	eb08 000b 	add.w	r0, r8, fp
    bdbe:	3801      	subs	r0, #1
    bdc0:	f006 fa81 	bl	122c6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    bdc4:	4582      	cmp	sl, r0
    bdc6:	d01f      	beq.n	be08 <mpu_configure_regions_and_partition.constprop.0+0x90>
	return -EINVAL;
    bdc8:	f06f 0a15 	mvn.w	sl, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    bdcc:	466c      	mov	r4, sp
    bdce:	b088      	sub	sp, #32
    bdd0:	466a      	mov	r2, sp
    bdd2:	494d      	ldr	r1, [pc, #308]	; (bf08 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    bdd4:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    bdd8:	e005      	b.n	bde6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    bdda:	466c      	mov	r4, sp
    bddc:	b088      	sub	sp, #32
    bdde:	466a      	mov	r2, sp
    bde0:	4b4a      	ldr	r3, [pc, #296]	; (bf0c <mpu_configure_regions_and_partition.constprop.0+0x194>)
    bde2:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    bde6:	2303      	movs	r3, #3
    bde8:	f842 3f10 	str.w	r3, [r2, #16]!
    bdec:	2300      	movs	r3, #0
    bdee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bdf2:	4847      	ldr	r0, [pc, #284]	; (bf10 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    bdf4:	f7fd ff6c 	bl	9cd0 <z_impl_z_log_msg_static_create>
    bdf8:	46a5      	mov	sp, r4

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    bdfa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    bdfe:	4620      	mov	r0, r4
    be00:	371c      	adds	r7, #28
    be02:	46bd      	mov	sp, r7
    be04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    be08:	f11a 0f16 	cmn.w	sl, #22
    be0c:	d0de      	beq.n	bdcc <mpu_configure_regions_and_partition.constprop.0+0x54>
    be0e:	4554      	cmp	r4, sl
    be10:	dddc      	ble.n	bdcc <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    be12:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    be16:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    be1a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    be1e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    be22:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    be26:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    be2a:	e9d6 1200 	ldrd	r1, r2, [r6]
    be2e:	440a      	add	r2, r1
		if ((regions[i].start == u_reg_base) &&
    be30:	4288      	cmp	r0, r1
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    be32:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    be36:	d11e      	bne.n	be76 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    be38:	45d8      	cmp	r8, fp
    be3a:	d108      	bne.n	be4e <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    be3c:	4631      	mov	r1, r6
    be3e:	fa5f f08a 	uxtb.w	r0, sl
    be42:	f006 fa49 	bl	122d8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    be46:	f109 0901 	add.w	r9, r9, #1
    be4a:	360c      	adds	r6, #12
    be4c:	e79e      	b.n	bd8c <mpu_configure_regions_and_partition.constprop.0+0x14>
				mpu_configure_region(reg_index, &regions[i]);
    be4e:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    be50:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    be54:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    be58:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    be5c:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    be60:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    be62:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    be66:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    be68:	f006 fa36 	bl	122d8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    be6c:	f110 0f16 	cmn.w	r0, #22
    be70:	d0c3      	beq.n	bdfa <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    be72:	1c44      	adds	r4, r0, #1
    be74:	e7e7      	b.n	be46 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    be76:	3901      	subs	r1, #1
		} else if (reg_last == u_reg_last) {
    be78:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    be7a:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    be7c:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = rnr;
    be80:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    be84:	d108      	bne.n	be98 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    be86:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    be8a:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    be8e:	4319      	orrs	r1, r3
	MPU->RLAR = rlar;
    be90:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    be94:	4631      	mov	r1, r6
    be96:	e7e7      	b.n	be68 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    be98:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    be9c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    bea0:	4311      	orrs	r1, r2
	MPU->RLAR = rlar;
    bea2:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    bea6:	4631      	mov	r1, r6
    bea8:	f006 fa16 	bl	122d8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    beac:	f110 0f16 	cmn.w	r0, #22
    beb0:	d0a3      	beq.n	bdfa <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    beb2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    beb6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    beba:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    bebc:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    bec0:	f362 0304 	bfi	r3, r2, #0, #5
    bec4:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    bec6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    beca:	7c3a      	ldrb	r2, [r7, #16]
    becc:	085b      	lsrs	r3, r3, #1
    bece:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    bed2:	e9d6 3100 	ldrd	r3, r1, [r6]
    bed6:	440b      	add	r3, r1
    bed8:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    beda:	f023 031f 	bic.w	r3, r3, #31
    bede:	4443      	add	r3, r8
			reg_index++;
    bee0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    bee2:	eba3 0b0b 	sub.w	fp, r3, fp
				region_allocate_and_init(reg_index,
    bee6:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    bee8:	f02b 031f 	bic.w	r3, fp, #31
	if (index > (get_num_regions() - 1U)) {
    beec:	2807      	cmp	r0, #7
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    beee:	743a      	strb	r2, [r7, #16]
			fill_region.attr.r_limit =
    bef0:	617b      	str	r3, [r7, #20]
    bef2:	d902      	bls.n	befa <mpu_configure_regions_and_partition.constprop.0+0x182>
    bef4:	f7ff ff28 	bl	bd48 <region_allocate_and_init.part.0>
    bef8:	e7b8      	b.n	be6c <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    befa:	f107 0108 	add.w	r1, r7, #8
    befe:	f7ff ff09 	bl	bd14 <region_init>
			if (reg_index == -EINVAL) {
    bf02:	e7b6      	b.n	be72 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    bf04:	e000ed00 	.word	0xe000ed00
    bf08:	0001426a 	.word	0x0001426a
    bf0c:	00014247 	.word	0x00014247
    bf10:	00013564 	.word	0x00013564

0000bf14 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    bf14:	2205      	movs	r2, #5
    bf16:	4b04      	ldr	r3, [pc, #16]	; (bf28 <arm_core_mpu_enable+0x14>)
    bf18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    bf1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bf20:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    bf24:	4770      	bx	lr
    bf26:	bf00      	nop
    bf28:	e000ed00 	.word	0xe000ed00

0000bf2c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    bf2c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    bf30:	2200      	movs	r2, #0
    bf32:	4b02      	ldr	r3, [pc, #8]	; (bf3c <arm_core_mpu_disable+0x10>)
    bf34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bf38:	4770      	bx	lr
    bf3a:	bf00      	nop
    bf3c:	e000ed00 	.word	0xe000ed00

0000bf40 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    bf40:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    bf42:	4c03      	ldr	r4, [pc, #12]	; (bf50 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    bf44:	7822      	ldrb	r2, [r4, #0]
    bf46:	f7ff ff17 	bl	bd78 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    bf4a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    bf4c:	bd10      	pop	{r4, pc}
    bf4e:	bf00      	nop
    bf50:	200098bb 	.word	0x200098bb

0000bf54 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    bf54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf58:	4d29      	ldr	r5, [pc, #164]	; (c000 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    bf5a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    bf5c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    bf5e:	f04f 0800 	mov.w	r8, #0
    bf62:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    bf64:	4f27      	ldr	r7, [pc, #156]	; (c004 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    bf66:	45d0      	cmp	r8, sl
    bf68:	da1b      	bge.n	bfa2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    bf6a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    bf6e:	f1b9 0f00 	cmp.w	r9, #0
    bf72:	d03f      	beq.n	bff4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    bf74:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bf76:	4608      	mov	r0, r1
    bf78:	9101      	str	r1, [sp, #4]
    bf7a:	f006 f9a4 	bl	122c6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bf7e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bf80:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bf82:	eb09 0001 	add.w	r0, r9, r1
    bf86:	3801      	subs	r0, #1
    bf88:	f006 f99d 	bl	122c6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    bf8c:	4284      	cmp	r4, r0
    bf8e:	f04f 0214 	mov.w	r2, #20
    bf92:	4b1d      	ldr	r3, [pc, #116]	; (c008 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    bf94:	d008      	beq.n	bfa8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    bf96:	f06f 0315 	mvn.w	r3, #21
    bf9a:	fb02 f808 	mul.w	r8, r2, r8
    bf9e:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    bfa2:	b003      	add	sp, #12
    bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    bfa8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    bfac:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    bfae:	d0f8      	beq.n	bfa2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    bfb0:	7819      	ldrb	r1, [r3, #0]
    bfb2:	42a1      	cmp	r1, r4
    bfb4:	ddf5      	ble.n	bfa2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    bfb6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    bfba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    bfbe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    bfc2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    bfc6:	f100 0108 	add.w	r1, r0, #8
    bfca:	7b00      	ldrb	r0, [r0, #12]
    bfcc:	f364 0004 	bfi	r0, r4, #0, #5
    bfd0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    bfd2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    bfd6:	790c      	ldrb	r4, [r1, #4]
    bfd8:	0840      	lsrs	r0, r0, #1
    bfda:	f360 1447 	bfi	r4, r0, #5, #3
    bfde:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    bfe0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    bfe4:	f021 011f 	bic.w	r1, r1, #31
    bfe8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    bfea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    bfee:	f021 011f 	bic.w	r1, r1, #31
    bff2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    bff4:	f108 0801 	add.w	r8, r8, #1
    bff8:	3514      	adds	r5, #20
    bffa:	360c      	adds	r6, #12
    bffc:	e7b3      	b.n	bf66 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    bffe:	bf00      	nop
    c000:	20008bc4 	.word	0x20008bc4
    c004:	e000ed00 	.word	0xe000ed00
    c008:	200098bb 	.word	0x200098bb

0000c00c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    c00c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c00e:	4d0e      	ldr	r5, [pc, #56]	; (c048 <z_arm_mpu_init+0x3c>)
    c010:	682c      	ldr	r4, [r5, #0]
    c012:	2c08      	cmp	r4, #8
    c014:	d815      	bhi.n	c042 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c016:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    c018:	f7ff ff88 	bl	bf2c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    c01c:	4b0b      	ldr	r3, [pc, #44]	; (c04c <z_arm_mpu_init+0x40>)
    c01e:	4a0c      	ldr	r2, [pc, #48]	; (c050 <z_arm_mpu_init+0x44>)
    c020:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c024:	4284      	cmp	r4, r0
    c026:	d105      	bne.n	c034 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c028:	4b0a      	ldr	r3, [pc, #40]	; (c054 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c02a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    c02c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    c02e:	f7ff ff71 	bl	bf14 <arm_core_mpu_enable>
}
    c032:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    c034:	6869      	ldr	r1, [r5, #4]
    c036:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    c03a:	f7ff fe6b 	bl	bd14 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c03e:	3001      	adds	r0, #1
    c040:	e7f0      	b.n	c024 <z_arm_mpu_init+0x18>
		return -1;
    c042:	f04f 30ff 	mov.w	r0, #4294967295
    c046:	e7f4      	b.n	c032 <z_arm_mpu_init+0x26>
    c048:	00013698 	.word	0x00013698
    c04c:	e000ed00 	.word	0xe000ed00
    c050:	0044ffaa 	.word	0x0044ffaa
    c054:	200098bb 	.word	0x200098bb

0000c058 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    c058:	4b01      	ldr	r3, [pc, #4]	; (c060 <__stdout_hook_install+0x8>)
    c05a:	6018      	str	r0, [r3, #0]
}
    c05c:	4770      	bx	lr
    c05e:	bf00      	nop
    c060:	2000800c 	.word	0x2000800c

0000c064 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    c064:	b580      	push	{r7, lr}
    c066:	af00      	add	r7, sp, #0

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    c068:	b088      	sub	sp, #32
    c06a:	466a      	mov	r2, sp
    c06c:	4b06      	ldr	r3, [pc, #24]	; (c088 <hid_status_cb.part.0+0x24>)
    c06e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c072:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c076:	2303      	movs	r3, #3
    c078:	4804      	ldr	r0, [pc, #16]	; (c08c <hid_status_cb.part.0+0x28>)
    c07a:	f842 3f10 	str.w	r3, [r2, #16]!
    c07e:	f006 f97f 	bl	12380 <z_log_msg_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    c082:	46bd      	mov	sp, r7
    c084:	bd80      	pop	{r7, pc}
    c086:	bf00      	nop
    c088:	0001429c 	.word	0x0001429c
    c08c:	000135a4 	.word	0x000135a4

0000c090 <hid_status_cb>:
{
    c090:	b570      	push	{r4, r5, r6, lr}
    c092:	4606      	mov	r6, r0
    c094:	460d      	mov	r5, r1
    c096:	b086      	sub	sp, #24
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    c098:	4601      	mov	r1, r0
    c09a:	4835      	ldr	r0, [pc, #212]	; (c170 <hid_status_cb+0xe0>)
    c09c:	f006 f8cd 	bl	1223a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    c0a0:	4604      	mov	r4, r0
    c0a2:	b928      	cbnz	r0, c0b0 <hid_status_cb+0x20>
    c0a4:	4630      	mov	r0, r6
}
    c0a6:	b006      	add	sp, #24
    c0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c0ac:	f7ff bfda 	b.w	c064 <hid_status_cb.part.0>
	switch (status) {
    c0b0:	2d0a      	cmp	r5, #10
    c0b2:	d85a      	bhi.n	c16a <hid_status_cb+0xda>
    c0b4:	e8df f005 	tbb	[pc, r5]
    c0b8:	23211106 	.word	0x23211106
    c0bc:	59403432 	.word	0x59403432
    c0c0:	5959      	.short	0x5959
    c0c2:	30          	.byte	0x30
    c0c3:	00          	.byte	0x00
		LOG_INF("Device error");
    c0c4:	4b2b      	ldr	r3, [pc, #172]	; (c174 <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    c0c6:	9305      	str	r3, [sp, #20]
    c0c8:	2302      	movs	r3, #2
    c0ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c0ce:	482a      	ldr	r0, [pc, #168]	; (c178 <hid_status_cb+0xe8>)
    c0d0:	aa04      	add	r2, sp, #16
    c0d2:	9304      	str	r3, [sp, #16]
    c0d4:	f006 f954 	bl	12380 <z_log_msg_static_create.constprop.0>
    c0d8:	e01e      	b.n	c118 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    c0da:	4b28      	ldr	r3, [pc, #160]	; (c17c <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    c0dc:	9305      	str	r3, [sp, #20]
    c0de:	2302      	movs	r3, #2
    c0e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c0e4:	4824      	ldr	r0, [pc, #144]	; (c178 <hid_status_cb+0xe8>)
    c0e6:	aa04      	add	r2, sp, #16
    c0e8:	9304      	str	r3, [sp, #16]
    c0ea:	f006 f949 	bl	12380 <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    c0ee:	2300      	movs	r3, #0
    c0f0:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    c0f4:	f804 3c03 	strb.w	r3, [r4, #-3]
    c0f8:	e00e      	b.n	c118 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    c0fa:	4b21      	ldr	r3, [pc, #132]	; (c180 <hid_status_cb+0xf0>)
    c0fc:	e7e3      	b.n	c0c6 <hid_status_cb+0x36>
		LOG_INF("Device configured");
    c0fe:	4b21      	ldr	r3, [pc, #132]	; (c184 <hid_status_cb+0xf4>)
    c100:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c104:	9305      	str	r3, [sp, #20]
    c106:	2302      	movs	r3, #2
    c108:	481b      	ldr	r0, [pc, #108]	; (c178 <hid_status_cb+0xe8>)
    c10a:	aa04      	add	r2, sp, #16
    c10c:	9304      	str	r3, [sp, #16]
    c10e:	f006 f937 	bl	12380 <z_log_msg_static_create.constprop.0>
		dev_data->configured = true;
    c112:	2301      	movs	r3, #1
    c114:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    c118:	b006      	add	sp, #24
    c11a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    c11c:	4b1a      	ldr	r3, [pc, #104]	; (c188 <hid_status_cb+0xf8>)
    c11e:	e7dd      	b.n	c0dc <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    c120:	4b1a      	ldr	r3, [pc, #104]	; (c18c <hid_status_cb+0xfc>)
    c122:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c126:	9305      	str	r3, [sp, #20]
    c128:	2302      	movs	r3, #2
    c12a:	4813      	ldr	r0, [pc, #76]	; (c178 <hid_status_cb+0xe8>)
    c12c:	aa04      	add	r2, sp, #16
    c12e:	9304      	str	r3, [sp, #16]
    c130:	f006 f926 	bl	12380 <z_log_msg_static_create.constprop.0>
		dev_data->suspended = true;
    c134:	2301      	movs	r3, #1
    c136:	e7dd      	b.n	c0f4 <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    c138:	2502      	movs	r5, #2
    c13a:	4b15      	ldr	r3, [pc, #84]	; (c190 <hid_status_cb+0x100>)
    c13c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c140:	480d      	ldr	r0, [pc, #52]	; (c178 <hid_status_cb+0xe8>)
    c142:	aa04      	add	r2, sp, #16
    c144:	9305      	str	r3, [sp, #20]
    c146:	9504      	str	r5, [sp, #16]
    c148:	f006 f91a 	bl	12380 <z_log_msg_static_create.constprop.0>
		if (dev_data->suspended) {
    c14c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    c150:	2b00      	cmp	r3, #0
    c152:	d0e1      	beq.n	c118 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    c154:	4b0f      	ldr	r3, [pc, #60]	; (c194 <hid_status_cb+0x104>)
    c156:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c15a:	4807      	ldr	r0, [pc, #28]	; (c178 <hid_status_cb+0xe8>)
    c15c:	aa04      	add	r2, sp, #16
    c15e:	e9cd 5304 	strd	r5, r3, [sp, #16]
    c162:	f006 f90d 	bl	12380 <z_log_msg_static_create.constprop.0>
			dev_data->suspended = false;
    c166:	2300      	movs	r3, #0
    c168:	e7c4      	b.n	c0f4 <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    c16a:	4b0b      	ldr	r3, [pc, #44]	; (c198 <hid_status_cb+0x108>)
    c16c:	e7ab      	b.n	c0c6 <hid_status_cb+0x36>
    c16e:	bf00      	nop
    c170:	20008bf0 	.word	0x20008bf0
    c174:	000142bd 	.word	0x000142bd
    c178:	000135a4 	.word	0x000135a4
    c17c:	000142ca 	.word	0x000142ca
    c180:	000142e0 	.word	0x000142e0
    c184:	000142f1 	.word	0x000142f1
    c188:	00014303 	.word	0x00014303
    c18c:	00014317 	.word	0x00014317
    c190:	00014328 	.word	0x00014328
    c194:	00014337 	.word	0x00014337
    c198:	00014344 	.word	0x00014344

0000c19c <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    c19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c1a0:	4604      	mov	r4, r0
    c1a2:	4688      	mov	r8, r1
    c1a4:	af00      	add	r7, sp, #0

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    c1a6:	7901      	ldrb	r1, [r0, #4]
    c1a8:	4827      	ldr	r0, [pc, #156]	; (c248 <hid_class_handle_req+0xac>)
{
    c1aa:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    c1ac:	f006 f850 	bl	12250 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    c1b0:	4606      	mov	r6, r0
    c1b2:	b9a0      	cbnz	r0, c1de <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    c1b4:	88a3      	ldrh	r3, [r4, #4]
    c1b6:	466c      	mov	r4, sp
    c1b8:	b088      	sub	sp, #32
    c1ba:	466a      	mov	r2, sp
    c1bc:	4923      	ldr	r1, [pc, #140]	; (c24c <hid_class_handle_req+0xb0>)
    c1be:	4824      	ldr	r0, [pc, #144]	; (c250 <hid_class_handle_req+0xb4>)
    c1c0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c1c4:	2303      	movs	r3, #3
    c1c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c1ca:	f842 3f10 	str.w	r3, [r2, #16]!
    c1ce:	f006 f8d7 	bl	12380 <z_log_msg_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    c1d2:	f06f 0012 	mvn.w	r0, #18
    c1d6:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    c1d8:	46bd      	mov	sp, r7
    c1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    c1de:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    c1e2:	6800      	ldr	r0, [r0, #0]
	if (usb_reqtype_is_to_host(setup)) {
    c1e4:	2b00      	cmp	r3, #0
		switch (setup->bRequest) {
    c1e6:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    c1e8:	da13      	bge.n	c212 <hid_class_handle_req+0x76>
		switch (setup->bRequest) {
    c1ea:	2d01      	cmp	r5, #1
    c1ec:	d005      	beq.n	c1fa <hid_class_handle_req+0x5e>
    c1ee:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    c1f0:	2b01      	cmp	r3, #1
    c1f2:	d819      	bhi.n	c228 <hid_class_handle_req+0x8c>
				return hid_on_get_report(dev_data, setup, len,
    c1f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c1f8:	e7ee      	b.n	c1d8 <hid_class_handle_req+0x3c>
			if (dev_data->ops && dev_data->ops->get_report) {
    c1fa:	f856 3c08 	ldr.w	r3, [r6, #-8]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d0f8      	beq.n	c1f4 <hid_class_handle_req+0x58>
    c202:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    c204:	2d00      	cmp	r5, #0
    c206:	d0f5      	beq.n	c1f4 <hid_class_handle_req+0x58>
				return dev_data->ops->set_report(dev, setup,
    c208:	464b      	mov	r3, r9
    c20a:	4642      	mov	r2, r8
    c20c:	4621      	mov	r1, r4
    c20e:	47a8      	blx	r5
    c210:	e7e2      	b.n	c1d8 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    c212:	2d09      	cmp	r5, #9
    c214:	d002      	beq.n	c21c <hid_class_handle_req+0x80>
    c216:	f1a5 030a 	sub.w	r3, r5, #10
    c21a:	e7e9      	b.n	c1f0 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    c21c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    c220:	2b00      	cmp	r3, #0
    c222:	d0e7      	beq.n	c1f4 <hid_class_handle_req+0x58>
    c224:	685d      	ldr	r5, [r3, #4]
    c226:	e7ed      	b.n	c204 <hid_class_handle_req+0x68>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    c228:	466c      	mov	r4, sp
    c22a:	b088      	sub	sp, #32
    c22c:	466a      	mov	r2, sp
    c22e:	4b09      	ldr	r3, [pc, #36]	; (c254 <hid_class_handle_req+0xb8>)
    c230:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c234:	e9c2 3505 	strd	r3, r5, [r2, #20]
    c238:	2303      	movs	r3, #3
    c23a:	4805      	ldr	r0, [pc, #20]	; (c250 <hid_class_handle_req+0xb4>)
    c23c:	f842 3f10 	str.w	r3, [r2, #16]!
    c240:	f006 f89e 	bl	12380 <z_log_msg_static_create.constprop.0>
    c244:	46a5      	mov	sp, r4
    c246:	e7d5      	b.n	c1f4 <hid_class_handle_req+0x58>
    c248:	20008bf0 	.word	0x20008bf0
    c24c:	00014352 	.word	0x00014352
    c250:	000135a4 	.word	0x000135a4
    c254:	00014379 	.word	0x00014379

0000c258 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    c25c:	f990 3000 	ldrsb.w	r3, [r0]
{
    c260:	4604      	mov	r4, r0
	if (usb_reqtype_is_to_host(setup) &&
    c262:	2b00      	cmp	r3, #0
{
    c264:	460e      	mov	r6, r1
    c266:	4615      	mov	r5, r2
    c268:	af00      	add	r7, sp, #0
	if (usb_reqtype_is_to_host(setup) &&
    c26a:	da20      	bge.n	c2ae <hid_custom_handle_req+0x56>
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    c26c:	f240 6201 	movw	r2, #1537	; 0x601
    c270:	8803      	ldrh	r3, [r0, #0]
    c272:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    c276:	b29b      	uxth	r3, r3
    c278:	4293      	cmp	r3, r2
    c27a:	d118      	bne.n	c2ae <hid_custom_handle_req+0x56>
	    setup->bRequest == USB_SREQ_GET_DESCRIPTOR) {
		uint8_t value = (uint8_t)(setup->wValue >> 8);
		uint8_t iface_num = (uint8_t)setup->wIndex;
    c27c:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    c280:	8843      	ldrh	r3, [r0, #2]
		struct hid_device_info *dev_data;
		struct usb_dev_data *common;
		const struct usb_cfg_data *cfg;
		const struct usb_hid_config *hid_desc;

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    c282:	4649      	mov	r1, r9
    c284:	481c      	ldr	r0, [pc, #112]	; (c2f8 <hid_custom_handle_req+0xa0>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    c286:	ea4f 2a13 	mov.w	sl, r3, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    c28a:	f005 ffe1 	bl	12250 <usb_get_dev_data_by_iface>
		if (common == NULL) {
    c28e:	b988      	cbnz	r0, c2b4 <hid_custom_handle_req+0x5c>
			LOG_WRN("Device data not found for interface %u",
    c290:	466c      	mov	r4, sp
    c292:	b088      	sub	sp, #32
    c294:	466a      	mov	r2, sp
    c296:	4b19      	ldr	r3, [pc, #100]	; (c2fc <hid_custom_handle_req+0xa4>)
    c298:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c29c:	e9c2 3905 	strd	r3, r9, [r2, #20]
    c2a0:	2303      	movs	r3, #3
    c2a2:	4817      	ldr	r0, [pc, #92]	; (c300 <hid_custom_handle_req+0xa8>)
    c2a4:	f842 3f10 	str.w	r3, [r2, #16]!
    c2a8:	f006 f86a 	bl	12380 <z_log_msg_static_create.constprop.0>
    c2ac:	46a5      	mov	sp, r4
		}

		return 0;
	}

	return -EINVAL;
    c2ae:	f06f 0015 	mvn.w	r0, #21
    c2b2:	e007      	b.n	c2c4 <hid_custom_handle_req+0x6c>
		switch (value) {
    c2b4:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
    c2b8:	d007      	beq.n	c2ca <hid_custom_handle_req+0x72>
    c2ba:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    c2be:	d011      	beq.n	c2e4 <hid_custom_handle_req+0x8c>
    c2c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    c2c4:	46bd      	mov	sp, r7
    c2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cfg = common->dev->config;
    c2ca:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    c2cc:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    c2ce:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    c2d0:	685b      	ldr	r3, [r3, #4]
    c2d2:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    c2d6:	4291      	cmp	r1, r2
    c2d8:	bf94      	ite	ls
    c2da:	6031      	strls	r1, [r6, #0]
    c2dc:	6032      	strhi	r2, [r6, #0]
		return 0;
    c2de:	2000      	movs	r0, #0
			*data = (uint8_t *)dev_data->report_desc;
    c2e0:	602b      	str	r3, [r5, #0]
			break;
    c2e2:	e7ef      	b.n	c2c4 <hid_custom_handle_req+0x6c>
			*len = MIN(setup->wLength, dev_data->report_size);
    c2e4:	88e3      	ldrh	r3, [r4, #6]
    c2e6:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    c2ea:	429a      	cmp	r2, r3
    c2ec:	bf94      	ite	ls
    c2ee:	6032      	strls	r2, [r6, #0]
    c2f0:	6033      	strhi	r3, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    c2f2:	f850 3c10 	ldr.w	r3, [r0, #-16]
    c2f6:	e7f2      	b.n	c2de <hid_custom_handle_req+0x86>
    c2f8:	20008bf0 	.word	0x20008bf0
    c2fc:	00014352 	.word	0x00014352
    c300:	000135a4 	.word	0x000135a4

0000c304 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    c304:	b580      	push	{r7, lr}
    c306:	af00      	add	r7, sp, #0
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    c308:	b088      	sub	sp, #32
    c30a:	466a      	mov	r2, sp
    c30c:	4b06      	ldr	r3, [pc, #24]	; (c328 <hid_int_in.part.0+0x24>)
    c30e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c312:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c316:	2303      	movs	r3, #3
    c318:	4804      	ldr	r0, [pc, #16]	; (c32c <hid_int_in.part.0+0x28>)
    c31a:	f842 3f10 	str.w	r3, [r2, #16]!
    c31e:	f006 f82f 	bl	12380 <z_log_msg_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    c322:	46bd      	mov	sp, r7
    c324:	bd80      	pop	{r7, pc}
    c326:	bf00      	nop
    c328:	00014392 	.word	0x00014392
    c32c:	000135a4 	.word	0x000135a4

0000c330 <hid_int_in>:
{
    c330:	b570      	push	{r4, r5, r6, lr}
    c332:	4604      	mov	r4, r0
    c334:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    c336:	4601      	mov	r1, r0
    c338:	480a      	ldr	r0, [pc, #40]	; (c364 <hid_int_in+0x34>)
    c33a:	f005 ff96 	bl	1226a <usb_get_dev_data_by_ep>
	if (common == NULL) {
    c33e:	b920      	cbnz	r0, c34a <hid_int_in+0x1a>
    c340:	4620      	mov	r0, r4
}
    c342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c346:	f7ff bfdd 	b.w	c304 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    c34a:	2d02      	cmp	r5, #2
    c34c:	d108      	bne.n	c360 <hid_int_in+0x30>
    c34e:	f850 3c08 	ldr.w	r3, [r0, #-8]
    c352:	b12b      	cbz	r3, c360 <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    c354:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    c356:	b11b      	cbz	r3, c360 <hid_int_in+0x30>
}
    c358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    c35c:	6800      	ldr	r0, [r0, #0]
    c35e:	4718      	bx	r3
}
    c360:	bd70      	pop	{r4, r5, r6, pc}
    c362:	bf00      	nop
    c364:	20008bf0 	.word	0x20008bf0

0000c368 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    c368:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    c36a:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
    c36c:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    c36e:	2300      	movs	r3, #0
    c370:	6163      	str	r3, [r4, #20]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    c372:	4b07      	ldr	r3, [pc, #28]	; (c390 <usb_hid_register_device+0x28>)
	dev_data->report_size = size;
    c374:	e9c4 1200 	strd	r1, r2, [r4]
    c378:	6859      	ldr	r1, [r3, #4]
	dev_data->common.dev = dev;
    c37a:	6120      	str	r0, [r4, #16]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    c37c:	f104 0214 	add.w	r2, r4, #20
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    c380:	b911      	cbnz	r1, c388 <usb_hid_register_device+0x20>
	list->head = node;
    c382:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    c386:	bd10      	pop	{r4, pc}
	parent->next = child;
    c388:	600a      	str	r2, [r1, #0]
	list->tail = node;
    c38a:	605a      	str	r2, [r3, #4]
    c38c:	e7fb      	b.n	c386 <usb_hid_register_device+0x1e>
    c38e:	bf00      	nop
    c390:	20008bf0 	.word	0x20008bf0

0000c394 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    c394:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    c396:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    c398:	6900      	ldr	r0, [r0, #16]
{
    c39a:	b087      	sub	sp, #28

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    c39c:	7b05      	ldrb	r5, [r0, #12]
    c39e:	b145      	cbz	r5, c3b2 <hid_int_ep_write+0x1e>
    c3a0:	7b40      	ldrb	r0, [r0, #13]
    c3a2:	b930      	cbnz	r0, c3b2 <hid_int_ep_write+0x1e>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    c3a4:	6a20      	ldr	r0, [r4, #32]
    c3a6:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    c3a8:	b007      	add	sp, #28
    c3aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    c3ae:	f005 bf2c 	b.w	1220a <usb_write>
		LOG_WRN("Device is not configured");
    c3b2:	4b07      	ldr	r3, [pc, #28]	; (c3d0 <hid_int_ep_write+0x3c>)
    c3b4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c3b8:	9305      	str	r3, [sp, #20]
    c3ba:	2302      	movs	r3, #2
    c3bc:	4805      	ldr	r0, [pc, #20]	; (c3d4 <hid_int_ep_write+0x40>)
    c3be:	aa04      	add	r2, sp, #16
    c3c0:	9304      	str	r3, [sp, #16]
    c3c2:	f005 ffdd 	bl	12380 <z_log_msg_static_create.constprop.0>
}
    c3c6:	f06f 000a 	mvn.w	r0, #10
    c3ca:	b007      	add	sp, #28
    c3cc:	bd30      	pop	{r4, r5, pc}
    c3ce:	bf00      	nop
    c3d0:	000143b8 	.word	0x000143b8
    c3d4:	000135a4 	.word	0x000135a4

0000c3d8 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    c3d8:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    c3dc:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    c3de:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    c3e0:	d004      	beq.n	c3ec <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    c3e2:	f010 0f78 	tst.w	r0, #120	; 0x78
    c3e6:	d001      	beq.n	c3ec <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    c3e8:	2000      	movs	r0, #0
    c3ea:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    c3ec:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    c3ee:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    c3f2:	f000 0008 	and.w	r0, r0, #8
    c3f6:	da05      	bge.n	c404 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    c3f8:	b958      	cbnz	r0, c412 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    c3fa:	4808      	ldr	r0, [pc, #32]	; (c41c <endpoint_ctx+0x44>)
    c3fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    c400:	304c      	adds	r0, #76	; 0x4c
    c402:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    c404:	b938      	cbnz	r0, c416 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    c406:	4805      	ldr	r0, [pc, #20]	; (c41c <endpoint_ctx+0x44>)
    c408:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    c40c:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    c410:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    c412:	4803      	ldr	r0, [pc, #12]	; (c420 <endpoint_ctx+0x48>)
    c414:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    c416:	4803      	ldr	r0, [pc, #12]	; (c424 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    c418:	4770      	bx	lr
    c41a:	bf00      	nop
    c41c:	200091f8 	.word	0x200091f8
    c420:	20009344 	.word	0x20009344
    c424:	20009464 	.word	0x20009464

0000c428 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    c428:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    c42a:	4801      	ldr	r0, [pc, #4]	; (c430 <usbd_evt_put+0x8>)
    c42c:	f006 bc4d 	b.w	12cca <k_queue_append>
    c430:	20008148 	.word	0x20008148

0000c434 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    c434:	4901      	ldr	r1, [pc, #4]	; (c43c <usbd_work_schedule+0x8>)
    c436:	4802      	ldr	r0, [pc, #8]	; (c440 <usbd_work_schedule+0xc>)
    c438:	f006 bc8d 	b.w	12d56 <k_work_submit_to_queue>
    c43c:	20009220 	.word	0x20009220
    c440:	200086c8 	.word	0x200086c8

0000c444 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    c444:	b513      	push	{r0, r1, r4, lr}
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    c446:	2400      	movs	r4, #0
	IRQ_CONNECT(USBREGULATOR_IRQn,
    c448:	2200      	movs	r2, #0
    c44a:	2101      	movs	r1, #1
    c44c:	2037      	movs	r0, #55	; 0x37
    c44e:	f7fe ffcf 	bl	b3f0 <z_arm_irq_priority_set>
	irq_enable(USBREGULATOR_IRQn);
    c452:	2037      	movs	r0, #55	; 0x37
    c454:	f7fe ff9a 	bl	b38c <arch_irq_enable>
	(void)nrfx_power_init(&power_config);
    c458:	480a      	ldr	r0, [pc, #40]	; (c484 <usb_init+0x40>)
    c45a:	f002 fdaf 	bl	efbc <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    c45e:	480a      	ldr	r0, [pc, #40]	; (c488 <usb_init+0x44>)
    c460:	f003 fd16 	bl	fe90 <nrfx_usbreg_init>
	k_work_queue_start(&usbd_work_queue,
    c464:	f04f 33ff 	mov.w	r3, #4294967295
    c468:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c46c:	4907      	ldr	r1, [pc, #28]	; (c48c <usb_init+0x48>)
    c46e:	4808      	ldr	r0, [pc, #32]	; (c490 <usb_init+0x4c>)
    c470:	9400      	str	r4, [sp, #0]
    c472:	f004 fa2f 	bl	108d4 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    c476:	4907      	ldr	r1, [pc, #28]	; (c494 <usb_init+0x50>)
    c478:	4807      	ldr	r0, [pc, #28]	; (c498 <usb_init+0x54>)
    c47a:	f006 fc4f 	bl	12d1c <k_work_init>

	return 0;
}
    c47e:	4620      	mov	r0, r4
    c480:	b002      	add	sp, #8
    c482:	bd10      	pop	{r4, pc}
    c484:	000145d4 	.word	0x000145d4
    c488:	000136c4 	.word	0x000136c4
    c48c:	20009bc8 	.word	0x20009bc8
    c490:	200086c8 	.word	0x200086c8
    c494:	0000c87d 	.word	0x0000c87d
    c498:	20009220 	.word	0x20009220

0000c49c <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    c49c:	2200      	movs	r2, #0
    c49e:	2300      	movs	r3, #0
    c4a0:	4801      	ldr	r0, [pc, #4]	; (c4a8 <usbd_evt_get+0xc>)
    c4a2:	f004 b89b 	b.w	105dc <z_impl_k_queue_get>
    c4a6:	bf00      	nop
    c4a8:	20008148 	.word	0x20008148

0000c4ac <usbd_evt_flush>:
{
    c4ac:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    c4ae:	4c05      	ldr	r4, [pc, #20]	; (c4c4 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    c4b0:	f7ff fff4 	bl	c49c <usbd_evt_get>
		if (ev) {
    c4b4:	b120      	cbz	r0, c4c0 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    c4b6:	1d01      	adds	r1, r0, #4
    c4b8:	4620      	mov	r0, r4
    c4ba:	f006 fb4e 	bl	12b5a <k_mem_slab_free>
	} while (ev != NULL);
    c4be:	e7f7      	b.n	c4b0 <usbd_evt_flush+0x4>
}
    c4c0:	bd10      	pop	{r4, pc}
    c4c2:	bf00      	nop
    c4c4:	200080e4 	.word	0x200080e4

0000c4c8 <usbd_evt_alloc>:
{
    c4c8:	b510      	push	{r4, lr}
    c4ca:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    c4cc:	2200      	movs	r2, #0
    c4ce:	2300      	movs	r3, #0
    c4d0:	4817      	ldr	r0, [pc, #92]	; (c530 <usbd_evt_alloc+0x68>)
    c4d2:	a901      	add	r1, sp, #4
    c4d4:	f003 fecc 	bl	10270 <k_mem_slab_alloc>
    c4d8:	b330      	cbz	r0, c528 <usbd_evt_alloc+0x60>
		LOG_ERR("USBD event allocation failed!");
    c4da:	2402      	movs	r4, #2
    c4dc:	4b15      	ldr	r3, [pc, #84]	; (c534 <usbd_evt_alloc+0x6c>)
    c4de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c4e2:	4815      	ldr	r0, [pc, #84]	; (c538 <usbd_evt_alloc+0x70>)
    c4e4:	aa06      	add	r2, sp, #24
    c4e6:	9307      	str	r3, [sp, #28]
    c4e8:	9406      	str	r4, [sp, #24]
    c4ea:	f005 ff69 	bl	123c0 <z_log_msg_static_create.constprop.0>
		usbd_evt_flush();
    c4ee:	f7ff ffdd 	bl	c4ac <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    c4f2:	2200      	movs	r2, #0
    c4f4:	2300      	movs	r3, #0
    c4f6:	480e      	ldr	r0, [pc, #56]	; (c530 <usbd_evt_alloc+0x68>)
    c4f8:	a901      	add	r1, sp, #4
    c4fa:	f003 feb9 	bl	10270 <k_mem_slab_alloc>
    c4fe:	b150      	cbz	r0, c516 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    c500:	4b0e      	ldr	r3, [pc, #56]	; (c53c <usbd_evt_alloc+0x74>)
    c502:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c506:	480c      	ldr	r0, [pc, #48]	; (c538 <usbd_evt_alloc+0x70>)
    c508:	aa06      	add	r2, sp, #24
    c50a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    c50e:	f005 ff57 	bl	123c0 <z_log_msg_static_create.constprop.0>
			return NULL;
    c512:	2000      	movs	r0, #0
    c514:	e00a      	b.n	c52c <usbd_evt_alloc+0x64>
		ev->evt_type = USBD_EVT_REINIT;
    c516:	2304      	movs	r3, #4
		ev = (struct usbd_event *)block.data;
    c518:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
    c51a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    c51c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    c51e:	f7ff ff83 	bl	c428 <usbd_evt_put>
		usbd_work_schedule();
    c522:	f7ff ff87 	bl	c434 <usbd_work_schedule>
		return NULL;
    c526:	e7f4      	b.n	c512 <usbd_evt_alloc+0x4a>
	ev = (struct usbd_event *)block.data;
    c528:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    c52a:	6040      	str	r0, [r0, #4]
}
    c52c:	b008      	add	sp, #32
    c52e:	bd10      	pop	{r4, pc}
    c530:	200080e4 	.word	0x200080e4
    c534:	000143d9 	.word	0x000143d9
    c538:	000135ac 	.word	0x000135ac
    c53c:	000143f7 	.word	0x000143f7

0000c540 <usbd_event_transfer_data>:
{
    c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    c542:	7881      	ldrb	r1, [r0, #2]
{
    c544:	4606      	mov	r6, r0
    c546:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    c548:	4608      	mov	r0, r1
    c54a:	f7ff ff45 	bl	c3d8 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    c54e:	060b      	lsls	r3, r1, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    c550:	4605      	mov	r5, r0
		switch (p_event->data.eptransfer.status) {
    c552:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    c554:	d523      	bpl.n	c59e <usbd_event_transfer_data+0x5e>
		switch (p_event->data.eptransfer.status) {
    c556:	b194      	cbz	r4, c57e <usbd_event_transfer_data+0x3e>
    c558:	2c03      	cmp	r4, #3
    c55a:	d01e      	beq.n	c59a <usbd_event_transfer_data+0x5a>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    c55c:	466d      	mov	r5, sp
    c55e:	b088      	sub	sp, #32
    c560:	466a      	mov	r2, sp
    c562:	4b29      	ldr	r3, [pc, #164]	; (c608 <usbd_event_transfer_data+0xc8>)
    c564:	61d1      	str	r1, [r2, #28]
    c566:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c56a:	2304      	movs	r3, #4
    c56c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c570:	4826      	ldr	r0, [pc, #152]	; (c60c <usbd_event_transfer_data+0xcc>)
    c572:	f842 3f10 	str.w	r3, [r2, #16]!
    c576:	f005 ff23 	bl	123c0 <z_log_msg_static_create.constprop.0>
    c57a:	46ad      	mov	sp, r5
    c57c:	e00d      	b.n	c59a <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    c57e:	f7ff ffa3 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    c582:	4603      	mov	r3, r0
    c584:	b148      	cbz	r0, c59a <usbd_event_transfer_data+0x5a>
			ev->evt_type = USBD_EVT_EP;
    c586:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    c588:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    c58a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    c58c:	2203      	movs	r2, #3
    c58e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    c590:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    c592:	f7ff ff49 	bl	c428 <usbd_evt_put>
			usbd_work_schedule();
    c596:	f7ff ff4d 	bl	c434 <usbd_work_schedule>
}
    c59a:	46bd      	mov	sp, r7
    c59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    c59e:	b154      	cbz	r4, c5b6 <usbd_event_transfer_data+0x76>
    c5a0:	2c01      	cmp	r4, #1
    c5a2:	d1db      	bne.n	c55c <usbd_event_transfer_data+0x1c>
			struct usbd_event *ev = usbd_evt_alloc();
    c5a4:	f7ff ff90 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    c5a8:	4603      	mov	r3, r0
    c5aa:	2800      	cmp	r0, #0
    c5ac:	d0f5      	beq.n	c59a <usbd_event_transfer_data+0x5a>
			ep_ctx->read_pending = true;
    c5ae:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    c5b0:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    c5b2:	7304      	strb	r4, [r0, #12]
    c5b4:	e7ec      	b.n	c590 <usbd_event_transfer_data+0x50>
			struct usbd_event *ev = usbd_evt_alloc();
    c5b6:	f7ff ff87 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    c5ba:	2800      	cmp	r0, #0
    c5bc:	d0ed      	beq.n	c59a <usbd_event_transfer_data+0x5a>
				p_event->data.eptransfer.ep);
    c5be:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    c5c0:	4b13      	ldr	r3, [pc, #76]	; (c610 <usbd_event_transfer_data+0xd0>)
    c5c2:	f012 0f80 	tst.w	r2, #128	; 0x80
    c5c6:	f002 0108 	and.w	r1, r2, #8
    c5ca:	d011      	beq.n	c5f0 <usbd_event_transfer_data+0xb0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    c5cc:	b141      	cbz	r1, c5e0 <usbd_event_transfer_data+0xa0>
        {
            ret = p_reg->ISOIN.AMOUNT;
    c5ce:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    c5d2:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    c5d4:	2301      	movs	r3, #1
    c5d6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    c5d8:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    c5da:	6085      	str	r5, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    c5dc:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    c5de:	e7d8      	b.n	c592 <usbd_event_transfer_data+0x52>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    c5e0:	2114      	movs	r1, #20
    c5e2:	f002 020f 	and.w	r2, r2, #15
    c5e6:	fb01 3302 	mla	r3, r1, r2, r3
    c5ea:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    c5ee:	e7f0      	b.n	c5d2 <usbd_event_transfer_data+0x92>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    c5f0:	b111      	cbz	r1, c5f8 <usbd_event_transfer_data+0xb8>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    c5f2:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    c5f6:	e7ec      	b.n	c5d2 <usbd_event_transfer_data+0x92>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    c5f8:	2114      	movs	r1, #20
    c5fa:	f002 020f 	and.w	r2, r2, #15
    c5fe:	fb01 3302 	mla	r3, r1, r2, r3
    c602:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    c606:	e7e4      	b.n	c5d2 <usbd_event_transfer_data+0x92>
    c608:	00014413 	.word	0x00014413
    c60c:	000135ac 	.word	0x000135ac
    c610:	40036000 	.word	0x40036000

0000c614 <usb_dc_power_event_handler>:
{
    c614:	b598      	push	{r3, r4, r7, lr}
    c616:	2802      	cmp	r0, #2
    c618:	af00      	add	r7, sp, #0
    c61a:	d811      	bhi.n	c640 <usb_dc_power_event_handler+0x2c>
    c61c:	4b10      	ldr	r3, [pc, #64]	; (c660 <usb_dc_power_event_handler+0x4c>)
    c61e:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    c620:	f7ff ff52 	bl	c4c8 <usbd_evt_alloc>
	if (!ev) {
    c624:	b150      	cbz	r0, c63c <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    c626:	2200      	movs	r2, #0
	ev->evt.pwr_evt.state = state;
    c628:	7204      	strb	r4, [r0, #8]
	ev->evt_type = USBD_EVT_POWER;
    c62a:	7402      	strb	r2, [r0, #16]
	usbd_evt_put(ev);
    c62c:	f7ff fefc 	bl	c428 <usbd_evt_put>
	if (usbd_ctx.attached) {
    c630:	4b0c      	ldr	r3, [pc, #48]	; (c664 <usb_dc_power_event_handler+0x50>)
    c632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c636:	b10b      	cbz	r3, c63c <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    c638:	f7ff fefc 	bl	c434 <usbd_work_schedule>
}
    c63c:	46bd      	mov	sp, r7
    c63e:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    c640:	466c      	mov	r4, sp
    c642:	b088      	sub	sp, #32
    c644:	466a      	mov	r2, sp
    c646:	4b08      	ldr	r3, [pc, #32]	; (c668 <usb_dc_power_event_handler+0x54>)
    c648:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (event) {
    c64c:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    c650:	2303      	movs	r3, #3
    c652:	4806      	ldr	r0, [pc, #24]	; (c66c <usb_dc_power_event_handler+0x58>)
    c654:	f842 3f10 	str.w	r3, [r2, #16]!
    c658:	f005 feb2 	bl	123c0 <z_log_msg_static_create.constprop.0>
    c65c:	46a5      	mov	sp, r4
    c65e:	e7ed      	b.n	c63c <usb_dc_power_event_handler+0x28>
    c660:	000145d1 	.word	0x000145d1
    c664:	200091f8 	.word	0x200091f8
    c668:	0001443f 	.word	0x0001443f
    c66c:	000135ac 	.word	0x000135ac

0000c670 <hfxo_stop.constprop.0.isra.0>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c670:	2200      	movs	r2, #0
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    c672:	b510      	push	{r4, lr}
    c674:	490c      	ldr	r1, [pc, #48]	; (c6a8 <hfxo_stop.constprop.0.isra.0+0x38>)
    c676:	f101 0320 	add.w	r3, r1, #32
    c67a:	e8d3 0fef 	ldaex	r0, [r3]
    c67e:	2801      	cmp	r0, #1
    c680:	d103      	bne.n	c68a <hfxo_stop.constprop.0.isra.0+0x1a>
    c682:	e8c3 2fe4 	stlex	r4, r2, [r3]
    c686:	2c00      	cmp	r4, #0
    c688:	d1f7      	bne.n	c67a <hfxo_stop.constprop.0.isra.0+0xa>
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    c68a:	d10b      	bne.n	c6a4 <hfxo_stop.constprop.0.isra.0+0x34>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    c68c:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    c68e:	310c      	adds	r1, #12
    c690:	4620      	mov	r0, r4
    c692:	f005 f8a0 	bl	117d6 <onoff_cancel>

	if (rv == -EALREADY) {
    c696:	3078      	adds	r0, #120	; 0x78
    c698:	d104      	bne.n	c6a4 <hfxo_stop.constprop.0.isra.0+0x34>
		rv = onoff_release(mgr);
    c69a:	4620      	mov	r0, r4
}
    c69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6a0:	f005 b874 	b.w	1178c <onoff_release>
    c6a4:	bd10      	pop	{r4, pc}
    c6a6:	bf00      	nop
    c6a8:	200091f8 	.word	0x200091f8

0000c6ac <usbd_event_handler>:
{
    c6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6ae:	4606      	mov	r6, r0
    c6b0:	b089      	sub	sp, #36	; 0x24
    c6b2:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    c6b4:	2214      	movs	r2, #20
    c6b6:	2100      	movs	r1, #0
    c6b8:	f107 000c 	add.w	r0, r7, #12
    c6bc:	f005 fe50 	bl	12360 <memset>
	switch (p_event->type) {
    c6c0:	7833      	ldrb	r3, [r6, #0]
    c6c2:	3b01      	subs	r3, #1
    c6c4:	2b05      	cmp	r3, #5
    c6c6:	d820      	bhi.n	c70a <usbd_event_handler+0x5e>
    c6c8:	e8df f003 	tbb	[pc, r3]
    c6cc:	13130397 	.word	0x13130397
    c6d0:	1589      	.short	0x1589
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    c6d2:	2303      	movs	r3, #3
		evt.evt_type = USBD_EVT_POWER;
    c6d4:	2400      	movs	r4, #0
		evt.evt.pwr_evt.state = USBD_RESUMED;
    c6d6:	753b      	strb	r3, [r7, #20]
		ev = usbd_evt_alloc();
    c6d8:	f7ff fef6 	bl	c4c8 <usbd_evt_alloc>
		if (!ev) {
    c6dc:	4603      	mov	r3, r0
    c6de:	b1a0      	cbz	r0, c70a <usbd_event_handler+0x5e>
		ev->evt = evt.evt;
    c6e0:	f100 0208 	add.w	r2, r0, #8
		ev->evt_type = evt.evt_type;
    c6e4:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    c6e6:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    c6ea:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    c6ee:	4618      	mov	r0, r3
    c6f0:	e030      	b.n	c754 <usbd_event_handler+0xa8>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    c6f2:	2304      	movs	r3, #4
    c6f4:	e7ee      	b.n	c6d4 <usbd_event_handler+0x28>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    c6f6:	78b1      	ldrb	r1, [r6, #2]
    c6f8:	4608      	mov	r0, r1
    c6fa:	f7ff fe6d 	bl	c3d8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    c6fe:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    c700:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    c702:	b12b      	cbz	r3, c710 <usbd_event_handler+0x64>
    c704:	3b01      	subs	r3, #1
    c706:	2b02      	cmp	r3, #2
    c708:	d965      	bls.n	c7d6 <usbd_event_handler+0x12a>
}
    c70a:	3724      	adds	r7, #36	; 0x24
    c70c:	46bd      	mov	sp, r7
    c70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    c710:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    c712:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    c714:	d523      	bpl.n	c75e <usbd_event_handler+0xb2>
		switch (p_event->data.eptransfer.status) {
    c716:	b194      	cbz	r4, c73e <usbd_event_handler+0x92>
    c718:	2c03      	cmp	r4, #3
    c71a:	d0f6      	beq.n	c70a <usbd_event_handler+0x5e>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    c71c:	466d      	mov	r5, sp
    c71e:	b088      	sub	sp, #32
    c720:	466a      	mov	r2, sp
    c722:	4b37      	ldr	r3, [pc, #220]	; (c800 <usbd_event_handler+0x154>)
    c724:	61d1      	str	r1, [r2, #28]
    c726:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c72a:	2304      	movs	r3, #4
    c72c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c730:	4834      	ldr	r0, [pc, #208]	; (c804 <usbd_event_handler+0x158>)
    c732:	f842 3f10 	str.w	r3, [r2, #16]!
    c736:	f005 fe43 	bl	123c0 <z_log_msg_static_create.constprop.0>
    c73a:	46ad      	mov	sp, r5
    c73c:	e7e5      	b.n	c70a <usbd_event_handler+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
    c73e:	f7ff fec3 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    c742:	4603      	mov	r3, r0
    c744:	2800      	cmp	r0, #0
    c746:	d0e0      	beq.n	c70a <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    c748:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    c74a:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    c74c:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    c74e:	2203      	movs	r2, #3
    c750:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    c752:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    c754:	f7ff fe68 	bl	c428 <usbd_evt_put>
		usbd_work_schedule();
    c758:	f7ff fe6c 	bl	c434 <usbd_work_schedule>
    c75c:	e7d5      	b.n	c70a <usbd_event_handler+0x5e>
		switch (p_event->data.eptransfer.status) {
    c75e:	b154      	cbz	r4, c776 <usbd_event_handler+0xca>
    c760:	2c01      	cmp	r4, #1
    c762:	d1db      	bne.n	c71c <usbd_event_handler+0x70>
			struct usbd_event *ev = usbd_evt_alloc();
    c764:	f7ff feb0 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    c768:	4603      	mov	r3, r0
    c76a:	2800      	cmp	r0, #0
    c76c:	d0cd      	beq.n	c70a <usbd_event_handler+0x5e>
			ep_ctx->read_pending = true;
    c76e:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    c770:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    c772:	7304      	strb	r4, [r0, #12]
    c774:	e7ed      	b.n	c752 <usbd_event_handler+0xa6>
			struct usbd_event *ev = usbd_evt_alloc();
    c776:	f7ff fea7 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    c77a:	4604      	mov	r4, r0
    c77c:	2800      	cmp	r0, #0
    c77e:	d0c4      	beq.n	c70a <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    c780:	2301      	movs	r3, #1
    c782:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    c784:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    c786:	6085      	str	r5, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    c788:	7303      	strb	r3, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    c78a:	f105 010c 	add.w	r1, r5, #12
    c78e:	78b0      	ldrb	r0, [r6, #2]
    c790:	f006 f9a6 	bl	12ae0 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    c794:	b170      	cbz	r0, c7b4 <usbd_event_handler+0x108>
				LOG_ERR("_ep_status_get failed! Code: %d",
    c796:	466e      	mov	r6, sp
    c798:	b088      	sub	sp, #32
    c79a:	466a      	mov	r2, sp
    c79c:	4b1a      	ldr	r3, [pc, #104]	; (c808 <usbd_event_handler+0x15c>)
    c79e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c7a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c7a6:	2303      	movs	r3, #3
    c7a8:	4816      	ldr	r0, [pc, #88]	; (c804 <usbd_event_handler+0x158>)
    c7aa:	f842 3f10 	str.w	r3, [r2, #16]!
    c7ae:	f005 fe07 	bl	123c0 <z_log_msg_static_create.constprop.0>
    c7b2:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    c7b4:	4a15      	ldr	r2, [pc, #84]	; (c80c <usbd_event_handler+0x160>)
    c7b6:	68e9      	ldr	r1, [r5, #12]
    c7b8:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    c7bc:	428b      	cmp	r3, r1
    c7be:	d906      	bls.n	c7ce <usbd_event_handler+0x122>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    c7c0:	1a5b      	subs	r3, r3, r1
    c7c2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    c7c6:	f003 f8c3 	bl	f950 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    c7ca:	4620      	mov	r0, r4
    c7cc:	e7c2      	b.n	c754 <usbd_event_handler+0xa8>
				ctx->ctrl_read_len = 0U;
    c7ce:	2300      	movs	r3, #0
    c7d0:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    c7d4:	e7f9      	b.n	c7ca <usbd_event_handler+0x11e>
			usbd_event_transfer_data(p_event);
    c7d6:	4630      	mov	r0, r6
    c7d8:	f7ff feb2 	bl	c540 <usbd_event_transfer_data>
	if (put_evt) {
    c7dc:	e795      	b.n	c70a <usbd_event_handler+0x5e>
		nrfx_usbd_setup_get(&drv_setup);
    c7de:	1d38      	adds	r0, r7, #4
    c7e0:	f003 f890 	bl	f904 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    c7e4:	797b      	ldrb	r3, [r7, #5]
    c7e6:	2b05      	cmp	r3, #5
    c7e8:	d103      	bne.n	c7f2 <usbd_event_handler+0x146>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    c7ea:	793b      	ldrb	r3, [r7, #4]
    c7ec:	f013 0f60 	tst.w	r3, #96	; 0x60
    c7f0:	d08b      	beq.n	c70a <usbd_event_handler+0x5e>
			evt.evt.ep_evt.ep = ep_ctx;
    c7f2:	4b07      	ldr	r3, [pc, #28]	; (c810 <usbd_event_handler+0x164>)
			evt.evt_type = USBD_EVT_EP;
    c7f4:	2401      	movs	r4, #1
			evt.evt.ep_evt.ep = ep_ctx;
    c7f6:	617b      	str	r3, [r7, #20]
	if (put_evt) {
    c7f8:	e76e      	b.n	c6d8 <usbd_event_handler+0x2c>
	switch (p_event->type) {
    c7fa:	2402      	movs	r4, #2
    c7fc:	e76c      	b.n	c6d8 <usbd_event_handler+0x2c>
    c7fe:	bf00      	nop
    c800:	00014413 	.word	0x00014413
    c804:	000135ac 	.word	0x000135ac
    c808:	0001445a 	.word	0x0001445a
    c80c:	200091f8 	.word	0x200091f8
    c810:	20009364 	.word	0x20009364

0000c814 <eps_ctx_init>:
{
    c814:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    c816:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    c818:	f064 007f 	orn	r0, r4, #127	; 0x7f
    c81c:	b2c0      	uxtb	r0, r0
    c81e:	f7ff fddb 	bl	c3d8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    c822:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    c824:	f005 fdb9 	bl	1239a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    c828:	2c08      	cmp	r4, #8
    c82a:	d1f5      	bne.n	c818 <eps_ctx_init+0x4>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    c82c:	2400      	movs	r4, #0
    c82e:	4d0f      	ldr	r5, [pc, #60]	; (c86c <eps_ctx_init+0x58>)
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    c830:	b2e0      	uxtb	r0, r4
    c832:	f7ff fdd1 	bl	c3d8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    c836:	6903      	ldr	r3, [r0, #16]
    c838:	b903      	cbnz	r3, c83c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    c83a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    c83c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    c83e:	f005 fdac 	bl	1239a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    c842:	2c08      	cmp	r4, #8
    c844:	f105 0540 	add.w	r5, r5, #64	; 0x40
    c848:	d1f2      	bne.n	c830 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    c84a:	4c09      	ldr	r4, [pc, #36]	; (c870 <eps_ctx_init+0x5c>)
    c84c:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    c850:	f005 fda3 	bl	1239a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    c854:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    c858:	b913      	cbnz	r3, c860 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    c85a:	4b06      	ldr	r3, [pc, #24]	; (c874 <eps_ctx_init+0x60>)
    c85c:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    c860:	4805      	ldr	r0, [pc, #20]	; (c878 <eps_ctx_init+0x64>)
    c862:	f005 fd9a 	bl	1239a <ep_ctx_reset>
}
    c866:	2000      	movs	r0, #0
    c868:	bd38      	pop	{r3, r4, r5, pc}
    c86a:	bf00      	nop
    c86c:	20008ff8 	.word	0x20008ff8
    c870:	200091f8 	.word	0x200091f8
    c874:	20008bf8 	.word	0x20008bf8
    c878:	20009464 	.word	0x20009464

0000c87c <usbd_work_handler>:
{
    c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c880:	4680      	mov	r8, r0
    c882:	b086      	sub	sp, #24
	return get_usbd_ctx()->ready;
    c884:	4cac      	ldr	r4, [pc, #688]	; (cb38 <_flash_used+0x94>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    c886:	f8df 92b4 	ldr.w	r9, [pc, #692]	; cb3c <_flash_used+0x98>
{
    c88a:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    c88c:	f7ff fe06 	bl	c49c <usbd_evt_get>
    c890:	4606      	mov	r6, r0
    c892:	b918      	cbnz	r0, c89c <usbd_work_handler+0x20>
}
    c894:	3718      	adds	r7, #24
    c896:	46bd      	mov	sp, r7
    c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    c89c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    c8a0:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    c8a2:	f106 0a04 	add.w	sl, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    c8a6:	b93a      	cbnz	r2, c8b8 <usbd_work_handler+0x3c>
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	f000 80ad 	beq.w	ca08 <usbd_work_handler+0x18c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    c8ae:	4651      	mov	r1, sl
    c8b0:	4648      	mov	r0, r9
    c8b2:	f006 f952 	bl	12b5a <k_mem_slab_free>
}
    c8b6:	e7e9      	b.n	c88c <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    c8b8:	2b04      	cmp	r3, #4
    c8ba:	f200 8193 	bhi.w	cbe4 <_flash_used+0x140>
    c8be:	e8df f013 	tbh	[pc, r3, lsl #1]
    c8c2:	00a3      	.short	0x00a3
    c8c4:	01240005 	.word	0x01240005
    c8c8:	0176014f 	.word	0x0176014f
			if (!ctx->attached) {
    c8cc:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    c8d0:	b983      	cbnz	r3, c8f4 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    c8d2:	68b3      	ldr	r3, [r6, #8]
    c8d4:	466d      	mov	r5, sp
    c8d6:	b088      	sub	sp, #32
    c8d8:	7a5b      	ldrb	r3, [r3, #9]
    c8da:	466a      	mov	r2, sp
    c8dc:	4998      	ldr	r1, [pc, #608]	; (cb40 <_flash_used+0x9c>)
    c8de:	4899      	ldr	r0, [pc, #612]	; (cb44 <_flash_used+0xa0>)
    c8e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c8e4:	2303      	movs	r3, #3
    c8e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c8ea:	f842 3f10 	str.w	r3, [r2, #16]!
    c8ee:	f005 fd67 	bl	123c0 <z_log_msg_static_create.constprop.0>
    c8f2:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    c8f4:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    c8f6:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    c8f8:	2b03      	cmp	r3, #3
    c8fa:	d8d8      	bhi.n	c8ae <usbd_work_handler+0x32>
    c8fc:	e8df f003 	tbb	[pc, r3]
    c900:	716c3d02 	.word	0x716c3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    c904:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    c906:	2208      	movs	r2, #8
    c908:	2100      	movs	r1, #0
    c90a:	4630      	mov	r0, r6
    c90c:	f005 fd28 	bl	12360 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    c910:	4b8d      	ldr	r3, [pc, #564]	; (cb48 <_flash_used+0xa4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    c912:	488e      	ldr	r0, [pc, #568]	; (cb4c <_flash_used+0xa8>)
    c914:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    c918:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    c91a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    c91e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    c920:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    c924:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    c928:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    c92c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    c92e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    c932:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    c936:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    c93a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    c93c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    c940:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    c944:	4631      	mov	r1, r6
    c946:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    c94a:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    c94c:	80f3      	strh	r3, [r6, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    c94e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    c950:	f005 fcfb 	bl	1234a <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    c954:	682b      	ldr	r3, [r5, #0]
    c956:	2100      	movs	r1, #0
    c958:	7a68      	ldrb	r0, [r5, #9]
    c95a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    c95c:	f996 3000 	ldrsb.w	r3, [r6]
    c960:	2b00      	cmp	r3, #0
    c962:	db06      	blt.n	c972 <usbd_work_handler+0xf6>
    c964:	88f3      	ldrh	r3, [r6, #6]
    c966:	b123      	cbz	r3, c972 <usbd_work_handler+0xf6>
		ctx->ctrl_read_len = usbd_setup->wLength;
    c968:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    c96c:	f002 fff0 	bl	f950 <nrfx_usbd_setup_data_clear>
    c970:	e79d      	b.n	c8ae <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
    c972:	2300      	movs	r3, #0
    c974:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    c978:	e799      	b.n	c8ae <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
    c97a:	7f6b      	ldrb	r3, [r5, #29]
    c97c:	2b00      	cmp	r3, #0
    c97e:	d096      	beq.n	c8ae <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
    c980:	7f2b      	ldrb	r3, [r5, #28]
    c982:	2b00      	cmp	r3, #0
    c984:	d093      	beq.n	c8ae <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
    c986:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    c988:	f04f 32ff 	mov.w	r2, #4294967295
    c98c:	f04f 33ff 	mov.w	r3, #4294967295
    c990:	486f      	ldr	r0, [pc, #444]	; (cb50 <_flash_used+0xac>)
	ep_ctx->read_pending = false;
    c992:	776e      	strb	r6, [r5, #29]
	ep_ctx->read_complete = false;
    c994:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    c996:	f005 fd16 	bl	123c6 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    c99a:	696b      	ldr	r3, [r5, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    c99c:	4639      	mov	r1, r7
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    c99e:	603b      	str	r3, [r7, #0]
    c9a0:	686b      	ldr	r3, [r5, #4]
    c9a2:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    c9a6:	7a68      	ldrb	r0, [r5, #9]
    c9a8:	f002 fde2 	bl	f570 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    c9ac:	4b69      	ldr	r3, [pc, #420]	; (cb54 <_flash_used+0xb0>)
    c9ae:	4298      	cmp	r0, r3
    c9b0:	d00e      	beq.n	c9d0 <usbd_work_handler+0x154>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    c9b2:	466d      	mov	r5, sp
    c9b4:	b088      	sub	sp, #32
    c9b6:	466a      	mov	r2, sp
    c9b8:	4b67      	ldr	r3, [pc, #412]	; (cb58 <_flash_used+0xb4>)
    c9ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9be:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c9c2:	2303      	movs	r3, #3
    c9c4:	485f      	ldr	r0, [pc, #380]	; (cb44 <_flash_used+0xa0>)
    c9c6:	f842 3f10 	str.w	r3, [r2, #16]!
    c9ca:	f005 fcf9 	bl	123c0 <z_log_msg_static_create.constprop.0>
    c9ce:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    c9d0:	485f      	ldr	r0, [pc, #380]	; (cb50 <_flash_used+0xac>)
    c9d2:	f005 fcfa 	bl	123ca <k_mutex_unlock.isra.0>
    c9d6:	e76a      	b.n	c8ae <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    c9d8:	2101      	movs	r1, #1
    c9da:	682b      	ldr	r3, [r5, #0]
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    c9dc:	7a68      	ldrb	r0, [r5, #9]
    c9de:	4798      	blx	r3
		break;
    c9e0:	e765      	b.n	c8ae <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    c9e2:	7aab      	ldrb	r3, [r5, #10]
    c9e4:	b96b      	cbnz	r3, ca02 <usbd_work_handler+0x186>
    c9e6:	7feb      	ldrb	r3, [r5, #31]
    c9e8:	b95b      	cbnz	r3, ca02 <usbd_work_handler+0x186>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    c9ea:	4859      	ldr	r0, [pc, #356]	; (cb50 <_flash_used+0xac>)
    c9ec:	f04f 32ff 	mov.w	r2, #4294967295
    c9f0:	f04f 33ff 	mov.w	r3, #4294967295
    c9f4:	f005 fce7 	bl	123c6 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    c9f8:	f002 ffde 	bl	f9b8 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    c9fc:	4854      	ldr	r0, [pc, #336]	; (cb50 <_flash_used+0xac>)
    c9fe:	f005 fce4 	bl	123ca <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    ca02:	2102      	movs	r1, #2
    ca04:	682b      	ldr	r3, [r5, #0]
    ca06:	e7e9      	b.n	c9dc <usbd_work_handler+0x160>
	switch (pwr_evt->state) {
    ca08:	7a33      	ldrb	r3, [r6, #8]
    ca0a:	2b04      	cmp	r3, #4
    ca0c:	f63f af4f 	bhi.w	c8ae <usbd_work_handler+0x32>
    ca10:	e8df f003 	tbb	[pc, r3]
    ca14:	65210357 	.word	0x65210357
    ca18:	71          	.byte	0x71
    ca19:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    ca1a:	f002 fd37 	bl	f48c <nrfx_usbd_is_enabled>
    ca1e:	4605      	mov	r5, r0
    ca20:	2800      	cmp	r0, #0
    ca22:	f47f af44 	bne.w	c8ae <usbd_work_handler+0x32>
			nrfx_usbd_enable();
    ca26:	f002 fcdd 	bl	f3e4 <nrfx_usbd_enable>
    ca2a:	2301      	movs	r3, #1
    ca2c:	494b      	ldr	r1, [pc, #300]	; (cb5c <_flash_used+0xb8>)
    ca2e:	e8d1 2fef 	ldaex	r2, [r1]
    ca32:	2a00      	cmp	r2, #0
    ca34:	d103      	bne.n	ca3e <usbd_work_handler+0x1c2>
    ca36:	e8c1 3fe0 	stlex	r0, r3, [r1]
    ca3a:	2800      	cmp	r0, #0
    ca3c:	d1f7      	bne.n	ca2e <usbd_work_handler+0x1b2>
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    ca3e:	f47f af36 	bne.w	c8ae <usbd_work_handler+0x32>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    ca42:	f841 5c10 	str.w	r5, [r1, #-16]
    ca46:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    ca4a:	69e0      	ldr	r0, [r4, #28]
    ca4c:	3914      	subs	r1, #20
    ca4e:	6163      	str	r3, [r4, #20]
    ca50:	f004 fe53 	bl	116fa <onoff_request>
    ca54:	e72b      	b.n	c8ae <usbd_work_handler+0x32>
	switch (pwr_evt->state) {
    ca56:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    ca58:	f065 007f 	orn	r0, r5, #127	; 0x7f
    ca5c:	b2c0      	uxtb	r0, r0
    ca5e:	f7ff fcbb 	bl	c3d8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    ca62:	7a03      	ldrb	r3, [r0, #8]
    ca64:	b113      	cbz	r3, ca6c <usbd_work_handler+0x1f0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ca66:	7a40      	ldrb	r0, [r0, #9]
    ca68:	f003 f990 	bl	fd8c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    ca6c:	3501      	adds	r5, #1
    ca6e:	2d08      	cmp	r5, #8
    ca70:	d1f2      	bne.n	ca58 <usbd_work_handler+0x1dc>
		if (ep_ctx->cfg.en) {
    ca72:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    ca76:	b11b      	cbz	r3, ca80 <usbd_work_handler+0x204>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ca78:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    ca7c:	f003 f986 	bl	fd8c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    ca80:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    ca82:	b2e8      	uxtb	r0, r5
    ca84:	f7ff fca8 	bl	c3d8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    ca88:	7a03      	ldrb	r3, [r0, #8]
    ca8a:	b113      	cbz	r3, ca92 <usbd_work_handler+0x216>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ca8c:	7a40      	ldrb	r0, [r0, #9]
    ca8e:	f003 f97d 	bl	fd8c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    ca92:	3501      	adds	r5, #1
    ca94:	2d08      	cmp	r5, #8
    ca96:	d1f4      	bne.n	ca82 <usbd_work_handler+0x206>
		if (ep_ctx->cfg.en) {
    ca98:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    ca9c:	b11b      	cbz	r3, caa6 <_flash_used+0x2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ca9e:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    caa2:	f003 f973 	bl	fd8c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    caa6:	2001      	movs	r0, #1
    caa8:	f002 fcd2 	bl	f450 <nrfx_usbd_start>
		ctx->ready = true;
    caac:	2301      	movs	r3, #1
    caae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    cab2:	6823      	ldr	r3, [r4, #0]
    cab4:	2b00      	cmp	r3, #0
    cab6:	f43f aefa 	beq.w	c8ae <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    caba:	2100      	movs	r1, #0
    cabc:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    cabe:	4798      	blx	r3
    cac0:	e6f5      	b.n	c8ae <usbd_work_handler+0x32>
		ctx->ready = false;
    cac2:	2500      	movs	r5, #0
    cac4:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    cac8:	f003 f8ee 	bl	fca8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    cacc:	f7ff fdd0 	bl	c670 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    cad0:	6823      	ldr	r3, [r4, #0]
    cad2:	2b00      	cmp	r3, #0
    cad4:	f43f aeeb 	beq.w	c8ae <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    cad8:	4629      	mov	r1, r5
    cada:	2004      	movs	r0, #4
    cadc:	e7ef      	b.n	cabe <_flash_used+0x1a>
		if (dev_ready()) {
    cade:	2a00      	cmp	r2, #0
    cae0:	f43f aee5 	beq.w	c8ae <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
    cae4:	f003 f8fa 	bl	fcdc <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    cae8:	6823      	ldr	r3, [r4, #0]
    caea:	2b00      	cmp	r3, #0
    caec:	f43f aedf 	beq.w	c8ae <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    caf0:	2100      	movs	r1, #0
    caf2:	2005      	movs	r0, #5
    caf4:	e7e3      	b.n	cabe <_flash_used+0x1a>
		if (ctx->status_cb && dev_ready()) {
    caf6:	6823      	ldr	r3, [r4, #0]
    caf8:	2b00      	cmp	r3, #0
    cafa:	f43f aed8 	beq.w	c8ae <usbd_work_handler+0x32>
    cafe:	2a00      	cmp	r2, #0
    cb00:	f43f aed5 	beq.w	c8ae <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
    cb04:	2100      	movs	r1, #0
    cb06:	2006      	movs	r0, #6
    cb08:	e7d9      	b.n	cabe <_flash_used+0x1a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    cb0a:	f108 0510 	add.w	r5, r8, #16
    cb0e:	f04f 33ff 	mov.w	r3, #4294967295
    cb12:	f04f 32ff 	mov.w	r2, #4294967295
    cb16:	4628      	mov	r0, r5
    cb18:	f005 fc55 	bl	123c6 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    cb1c:	f7ff fe7a 	bl	c814 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    cb20:	4628      	mov	r0, r5
    cb22:	f005 fc52 	bl	123ca <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    cb26:	f858 3c28 	ldr.w	r3, [r8, #-40]
    cb2a:	2b00      	cmp	r3, #0
    cb2c:	f43f aebf 	beq.w	c8ae <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
    cb30:	2100      	movs	r1, #0
    cb32:	2001      	movs	r0, #1
    cb34:	e7c3      	b.n	cabe <_flash_used+0x1a>
    cb36:	bf00      	nop
    cb38:	200091f8 	.word	0x200091f8
    cb3c:	200080e4 	.word	0x200080e4
    cb40:	0001447a 	.word	0x0001447a
    cb44:	000135ac 	.word	0x000135ac
    cb48:	40036000 	.word	0x40036000
    cb4c:	200091fc 	.word	0x200091fc
    cb50:	20009230 	.word	0x20009230
    cb54:	0bad0000 	.word	0x0bad0000
    cb58:	000144a0 	.word	0x000144a0
    cb5c:	20009218 	.word	0x20009218
	if (ep_ctx->cfg.en) {
    cb60:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    cb64:	b193      	cbz	r3, cb8c <_flash_used+0xe8>
		ep_ctx->read_pending = true;
    cb66:	2501      	movs	r5, #1
    cb68:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    cb6c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    cb70:	f7ff fcaa 	bl	c4c8 <usbd_evt_alloc>
		if (!ev) {
    cb74:	b990      	cbnz	r0, cb9c <_flash_used+0xf8>
			LOG_ERR("Failed to alloc evt");
    cb76:	4b23      	ldr	r3, [pc, #140]	; (cc04 <_flash_used+0x160>)
    cb78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cb7c:	617b      	str	r3, [r7, #20]
    cb7e:	2302      	movs	r3, #2
    cb80:	4821      	ldr	r0, [pc, #132]	; (cc08 <_flash_used+0x164>)
    cb82:	f107 0210 	add.w	r2, r7, #16
    cb86:	613b      	str	r3, [r7, #16]
    cb88:	f005 fc1a 	bl	123c0 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    cb8c:	f858 3c28 	ldr.w	r3, [r8, #-40]
    cb90:	2b00      	cmp	r3, #0
    cb92:	f43f ae8c 	beq.w	c8ae <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
    cb96:	2100      	movs	r1, #0
    cb98:	200a      	movs	r0, #10
    cb9a:	e790      	b.n	cabe <_flash_used+0x1a>
		ev->evt.ep_evt.ep = ep_ctx;
    cb9c:	4a1b      	ldr	r2, [pc, #108]	; (cc0c <_flash_used+0x168>)
		ev->evt_type = USBD_EVT_EP;
    cb9e:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    cba0:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    cba2:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    cba4:	f7ff fc40 	bl	c428 <usbd_evt_put>
		usbd_work_schedule();
    cba8:	f7ff fc44 	bl	c434 <usbd_work_schedule>
    cbac:	e7ee      	b.n	cb8c <_flash_used+0xe8>
				LOG_ERR("USBD event queue full!");
    cbae:	4b18      	ldr	r3, [pc, #96]	; (cc10 <_flash_used+0x16c>)
    cbb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cbb4:	617b      	str	r3, [r7, #20]
    cbb6:	2302      	movs	r3, #2
    cbb8:	f107 0210 	add.w	r2, r7, #16
    cbbc:	4812      	ldr	r0, [pc, #72]	; (cc08 <_flash_used+0x164>)
    cbbe:	613b      	str	r3, [r7, #16]
    cbc0:	f005 fbfe 	bl	123c0 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    cbc4:	f003 f94c 	bl	fe60 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    cbc8:	f003 f86e 	bl	fca8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    cbcc:	f002 fc00 	bl	f3d0 <nrfx_usbd_uninit>
	usbd_evt_flush();
    cbd0:	f7ff fc6c 	bl	c4ac <usbd_evt_flush>
	ret = eps_ctx_init();
    cbd4:	f7ff fe1e 	bl	c814 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    cbd8:	f003 f93a 	bl	fe50 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    cbdc:	480d      	ldr	r0, [pc, #52]	; (cc14 <_flash_used+0x170>)
    cbde:	f002 fc81 	bl	f4e4 <nrfx_usbd_init>
}
    cbe2:	e664      	b.n	c8ae <usbd_work_handler+0x32>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    cbe4:	466d      	mov	r5, sp
    cbe6:	b088      	sub	sp, #32
    cbe8:	466a      	mov	r2, sp
    cbea:	490b      	ldr	r1, [pc, #44]	; (cc18 <_flash_used+0x174>)
    cbec:	4806      	ldr	r0, [pc, #24]	; (cc08 <_flash_used+0x164>)
		switch (ev->evt_type) {
    cbee:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    cbf2:	2303      	movs	r3, #3
    cbf4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cbf8:	f842 3f10 	str.w	r3, [r2, #16]!
    cbfc:	f005 fbe0 	bl	123c0 <z_log_msg_static_create.constprop.0>
    cc00:	46ad      	mov	sp, r5
    cc02:	e654      	b.n	c8ae <usbd_work_handler+0x32>
    cc04:	000144c6 	.word	0x000144c6
    cc08:	000135ac 	.word	0x000135ac
    cc0c:	20009464 	.word	0x20009464
    cc10:	000144da 	.word	0x000144da
    cc14:	0000c6ad 	.word	0x0000c6ad
    cc18:	000144f1 	.word	0x000144f1

0000cc1c <usb_dc_attach>:
{
    cc1c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    cc1e:	4d1a      	ldr	r5, [pc, #104]	; (cc88 <usb_dc_attach+0x6c>)
    cc20:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    cc24:	bb54      	cbnz	r4, cc7c <usb_dc_attach+0x60>
	return z_impl_k_mutex_init(mutex);
    cc26:	f105 0038 	add.w	r0, r5, #56	; 0x38
    cc2a:	f005 ffdb 	bl	12be4 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    cc2e:	2002      	movs	r0, #2
    cc30:	f000 fbea 	bl	d408 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cc34:	4622      	mov	r2, r4
    cc36:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    cc38:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cc3a:	2036      	movs	r0, #54	; 0x36
    cc3c:	f7fe fbd8 	bl	b3f0 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    cc40:	4812      	ldr	r0, [pc, #72]	; (cc8c <usb_dc_attach+0x70>)
    cc42:	f002 fc4f 	bl	f4e4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    cc46:	4b12      	ldr	r3, [pc, #72]	; (cc90 <usb_dc_attach+0x74>)
    cc48:	4298      	cmp	r0, r3
    cc4a:	d119      	bne.n	cc80 <usb_dc_attach+0x64>
	nrfx_power_usbevt_enable();
    cc4c:	f003 f900 	bl	fe50 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    cc50:	f7ff fde0 	bl	c814 <eps_ctx_init>
	if (ret == 0) {
    cc54:	4604      	mov	r4, r0
    cc56:	b910      	cbnz	r0, cc5e <usb_dc_attach+0x42>
		ctx->attached = true;
    cc58:	2301      	movs	r3, #1
    cc5a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    cc5e:	4b0d      	ldr	r3, [pc, #52]	; (cc94 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    cc60:	681b      	ldr	r3, [r3, #0]
    cc62:	b10b      	cbz	r3, cc68 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    cc64:	f7ff fbe6 	bl	c434 <usbd_work_schedule>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    cc68:	4b0b      	ldr	r3, [pc, #44]	; (cc98 <usb_dc_attach+0x7c>)
    cc6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    cc6e:	07db      	lsls	r3, r3, #31
    cc70:	d502      	bpl.n	cc78 <usb_dc_attach+0x5c>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    cc72:	2000      	movs	r0, #0
    cc74:	f7ff fcce 	bl	c614 <usb_dc_power_event_handler>
}
    cc78:	4620      	mov	r0, r4
    cc7a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    cc7c:	2400      	movs	r4, #0
    cc7e:	e7fb      	b.n	cc78 <usb_dc_attach+0x5c>
		return -EIO;
    cc80:	f06f 0404 	mvn.w	r4, #4
    cc84:	e7f8      	b.n	cc78 <usb_dc_attach+0x5c>
    cc86:	bf00      	nop
    cc88:	200091f8 	.word	0x200091f8
    cc8c:	0000c6ad 	.word	0x0000c6ad
    cc90:	0bad0000 	.word	0x0bad0000
    cc94:	20008148 	.word	0x20008148
    cc98:	40037000 	.word	0x40037000

0000cc9c <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    cc9c:	4b07      	ldr	r3, [pc, #28]	; (ccbc <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    cc9e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    cca2:	b13a      	cbz	r2, ccb4 <usb_dc_set_address+0x18>
    cca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    cca8:	2b00      	cmp	r3, #0
    ccaa:	bf0c      	ite	eq
    ccac:	f06f 0012 	mvneq.w	r0, #18
    ccb0:	2000      	movne	r0, #0
    ccb2:	4770      	bx	lr
		return -ENODEV;
    ccb4:	f06f 0012 	mvn.w	r0, #18
}
    ccb8:	4770      	bx	lr
    ccba:	bf00      	nop
    ccbc:	200091f8 	.word	0x200091f8

0000ccc0 <usb_dc_ep_check_cap>:
{
    ccc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ccc2:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    ccc4:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    ccc6:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    ccc8:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    cccc:	b97a      	cbnz	r2, ccee <usb_dc_ep_check_cap+0x2e>
    ccce:	b158      	cbz	r0, cce8 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    ccd0:	4b0d      	ldr	r3, [pc, #52]	; (cd08 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    ccd2:	9305      	str	r3, [sp, #20]
    ccd4:	2302      	movs	r3, #2
    ccd6:	480d      	ldr	r0, [pc, #52]	; (cd0c <usb_dc_ep_check_cap+0x4c>)
    ccd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ccdc:	aa04      	add	r2, sp, #16
    ccde:	9304      	str	r3, [sp, #16]
    cce0:	f005 fb6e 	bl	123c0 <z_log_msg_static_create.constprop.0>
		return -1;
    cce4:	f04f 30ff 	mov.w	r0, #4294967295
}
    cce8:	b007      	add	sp, #28
    ccea:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    ccee:	2808      	cmp	r0, #8
    ccf0:	d901      	bls.n	ccf6 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    ccf2:	4b07      	ldr	r3, [pc, #28]	; (cd10 <usb_dc_ep_check_cap+0x50>)
    ccf4:	e7ed      	b.n	ccd2 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    ccf6:	2a01      	cmp	r2, #1
    ccf8:	bf0a      	itet	eq
    ccfa:	f083 0008 	eoreq.w	r0, r3, #8
	return 0;
    ccfe:	2000      	movne	r0, #0
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    cd00:	f340 00c0 	sbfxeq	r0, r0, #3, #1
    cd04:	e7f0      	b.n	cce8 <usb_dc_ep_check_cap+0x28>
    cd06:	bf00      	nop
    cd08:	00014508 	.word	0x00014508
    cd0c:	000135ac 	.word	0x000135ac
    cd10:	00014527 	.word	0x00014527

0000cd14 <usb_dc_ep_configure>:
{
    cd14:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    cd16:	4b15      	ldr	r3, [pc, #84]	; (cd6c <usb_dc_ep_configure+0x58>)
{
    cd18:	4601      	mov	r1, r0
	if (!dev_attached()) {
    cd1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    cd1e:	b086      	sub	sp, #24
	if (!dev_attached()) {
    cd20:	b30b      	cbz	r3, cd66 <usb_dc_ep_configure+0x52>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    cd22:	7804      	ldrb	r4, [r0, #0]
    cd24:	4620      	mov	r0, r4
    cd26:	f7ff fb57 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    cd2a:	b198      	cbz	r0, cd54 <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    cd2c:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    cd2e:	790b      	ldrb	r3, [r1, #4]
    cd30:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    cd32:	8849      	ldrh	r1, [r1, #2]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    cd34:	0723      	lsls	r3, r4, #28
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    cd36:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    cd38:	d40f      	bmi.n	cd5a <usb_dc_ep_configure+0x46>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    cd3a:	1e4b      	subs	r3, r1, #1
    cd3c:	420b      	tst	r3, r1
    cd3e:	d00c      	beq.n	cd5a <usb_dc_ep_configure+0x46>
			LOG_ERR("EP max packet size must be a power of 2");
    cd40:	4b0b      	ldr	r3, [pc, #44]	; (cd70 <usb_dc_ep_configure+0x5c>)
    cd42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cd46:	9305      	str	r3, [sp, #20]
    cd48:	2302      	movs	r3, #2
    cd4a:	480a      	ldr	r0, [pc, #40]	; (cd74 <usb_dc_ep_configure+0x60>)
    cd4c:	aa04      	add	r2, sp, #16
    cd4e:	9304      	str	r3, [sp, #16]
    cd50:	f005 fb36 	bl	123c0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    cd54:	f06f 0015 	mvn.w	r0, #21
    cd58:	e003      	b.n	cd62 <usb_dc_ep_configure+0x4e>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    cd5a:	4620      	mov	r0, r4
    cd5c:	f005 febb 	bl	12ad6 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    cd60:	2000      	movs	r0, #0
}
    cd62:	b006      	add	sp, #24
    cd64:	bd10      	pop	{r4, pc}
		return -ENODEV;
    cd66:	f06f 0012 	mvn.w	r0, #18
    cd6a:	e7fa      	b.n	cd62 <usb_dc_ep_configure+0x4e>
    cd6c:	200091f8 	.word	0x200091f8
    cd70:	00014546 	.word	0x00014546
    cd74:	000135ac 	.word	0x000135ac

0000cd78 <usb_dc_ep_set_stall>:
{
    cd78:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    cd7a:	4b18      	ldr	r3, [pc, #96]	; (cddc <usb_dc_ep_set_stall+0x64>)
{
    cd7c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    cd7e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    cd82:	b086      	sub	sp, #24
	if (!dev_attached() || !dev_ready()) {
    cd84:	b33a      	cbz	r2, cdd6 <usb_dc_ep_set_stall+0x5e>
    cd86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    cd8a:	b323      	cbz	r3, cdd6 <usb_dc_ep_set_stall+0x5e>
	ep_ctx = endpoint_ctx(ep);
    cd8c:	f7ff fb24 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    cd90:	4604      	mov	r4, r0
    cd92:	b1e8      	cbz	r0, cdd0 <usb_dc_ep_set_stall+0x58>
	switch (ep_ctx->cfg.type) {
    cd94:	7a83      	ldrb	r3, [r0, #10]
    cd96:	2b01      	cmp	r3, #1
    cd98:	d010      	beq.n	cdbc <usb_dc_ep_set_stall+0x44>
    cd9a:	d908      	bls.n	cdae <usb_dc_ep_set_stall+0x36>
    cd9c:	3b02      	subs	r3, #2
    cd9e:	2b01      	cmp	r3, #1
    cda0:	d908      	bls.n	cdb4 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.len = 0U;
    cda2:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    cda4:	6963      	ldr	r3, [r4, #20]
	ep_ctx->buf.len = 0U;
    cda6:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    cda8:	61a3      	str	r3, [r4, #24]
}
    cdaa:	b006      	add	sp, #24
    cdac:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    cdae:	f002 fe0b 	bl	f9c8 <nrfx_usbd_setup_stall>
		break;
    cdb2:	e7f6      	b.n	cda2 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    cdb4:	4608      	mov	r0, r1
    cdb6:	f002 fd77 	bl	f8a8 <nrfx_usbd_ep_stall>
		break;
    cdba:	e7f2      	b.n	cda2 <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    cdbc:	4b08      	ldr	r3, [pc, #32]	; (cde0 <usb_dc_ep_set_stall+0x68>)
    cdbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cdc2:	9305      	str	r3, [sp, #20]
    cdc4:	2302      	movs	r3, #2
    cdc6:	4807      	ldr	r0, [pc, #28]	; (cde4 <usb_dc_ep_set_stall+0x6c>)
    cdc8:	aa04      	add	r2, sp, #16
    cdca:	9304      	str	r3, [sp, #16]
    cdcc:	f005 faf8 	bl	123c0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    cdd0:	f06f 0015 	mvn.w	r0, #21
    cdd4:	e7e9      	b.n	cdaa <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    cdd6:	f06f 0012 	mvn.w	r0, #18
    cdda:	e7e6      	b.n	cdaa <usb_dc_ep_set_stall+0x32>
    cddc:	200091f8 	.word	0x200091f8
    cde0:	0001456e 	.word	0x0001456e
    cde4:	000135ac 	.word	0x000135ac

0000cde8 <usb_dc_ep_clear_stall>:
{
    cde8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    cdea:	4b0e      	ldr	r3, [pc, #56]	; (ce24 <usb_dc_ep_clear_stall+0x3c>)
{
    cdec:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    cdee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    cdf2:	b182      	cbz	r2, ce16 <usb_dc_ep_clear_stall+0x2e>
    cdf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    cdf8:	b16b      	cbz	r3, ce16 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    cdfa:	f7ff faed 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    cdfe:	b168      	cbz	r0, ce1c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    ce00:	f015 0408 	ands.w	r4, r5, #8
    ce04:	d10a      	bne.n	ce1c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    ce06:	4628      	mov	r0, r5
    ce08:	f002 fd70 	bl	f8ec <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    ce0c:	4628      	mov	r0, r5
    ce0e:	f003 f80f 	bl	fe30 <nrfx_usbd_ep_stall_clear>
	return 0;
    ce12:	4620      	mov	r0, r4
}
    ce14:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    ce16:	f06f 0012 	mvn.w	r0, #18
    ce1a:	e7fb      	b.n	ce14 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    ce1c:	f06f 0015 	mvn.w	r0, #21
    ce20:	e7f8      	b.n	ce14 <usb_dc_ep_clear_stall+0x2c>
    ce22:	bf00      	nop
    ce24:	200091f8 	.word	0x200091f8

0000ce28 <usb_dc_ep_is_stalled>:
{
    ce28:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    ce2a:	4b0c      	ldr	r3, [pc, #48]	; (ce5c <usb_dc_ep_is_stalled+0x34>)
{
    ce2c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    ce2e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    ce32:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    ce34:	b162      	cbz	r2, ce50 <usb_dc_ep_is_stalled+0x28>
    ce36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    ce3a:	b14b      	cbz	r3, ce50 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    ce3c:	f7ff facc 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    ce40:	b148      	cbz	r0, ce56 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    ce42:	b141      	cbz	r1, ce56 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    ce44:	4628      	mov	r0, r5
    ce46:	f002 fd37 	bl	f8b8 <nrfx_usbd_ep_stall_check>
    ce4a:	7020      	strb	r0, [r4, #0]
	return 0;
    ce4c:	2000      	movs	r0, #0
}
    ce4e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    ce50:	f06f 0012 	mvn.w	r0, #18
    ce54:	e7fb      	b.n	ce4e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    ce56:	f06f 0015 	mvn.w	r0, #21
    ce5a:	e7f8      	b.n	ce4e <usb_dc_ep_is_stalled+0x26>
    ce5c:	200091f8 	.word	0x200091f8

0000ce60 <usb_dc_ep_enable>:
{
    ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    ce62:	4f13      	ldr	r7, [pc, #76]	; (ceb0 <usb_dc_ep_enable+0x50>)
{
    ce64:	4604      	mov	r4, r0
	if (!dev_attached()) {
    ce66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ce6a:	b1bb      	cbz	r3, ce9c <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    ce6c:	f7ff fab4 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    ce70:	4605      	mov	r5, r0
    ce72:	b1b0      	cbz	r0, cea2 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    ce74:	0723      	lsls	r3, r4, #28
    ce76:	d405      	bmi.n	ce84 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    ce78:	4620      	mov	r0, r4
    ce7a:	f002 fd37 	bl	f8ec <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    ce7e:	4620      	mov	r0, r4
    ce80:	f002 ffd6 	bl	fe30 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    ce84:	7a2e      	ldrb	r6, [r5, #8]
    ce86:	b97e      	cbnz	r6, cea8 <usb_dc_ep_enable+0x48>
	ep_ctx->cfg.en = true;
    ce88:	2301      	movs	r3, #1
	if (dev_ready()) {
    ce8a:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    ce8e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    ce90:	b118      	cbz	r0, ce9a <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    ce92:	4620      	mov	r0, r4
    ce94:	f002 ff7a 	bl	fd8c <nrfx_usbd_ep_enable>
	return 0;
    ce98:	4630      	mov	r0, r6
}
    ce9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    ce9c:	f06f 0012 	mvn.w	r0, #18
    cea0:	e7fb      	b.n	ce9a <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    cea2:	f06f 0015 	mvn.w	r0, #21
    cea6:	e7f8      	b.n	ce9a <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    cea8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ceac:	e7f5      	b.n	ce9a <usb_dc_ep_enable+0x3a>
    ceae:	bf00      	nop
    ceb0:	200091f8 	.word	0x200091f8

0000ceb4 <usb_dc_ep_disable>:
{
    ceb4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    ceb6:	4b11      	ldr	r3, [pc, #68]	; (cefc <usb_dc_ep_disable+0x48>)
{
    ceb8:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    ceba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    cebe:	b19a      	cbz	r2, cee8 <usb_dc_ep_disable+0x34>
    cec0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    cec4:	b183      	cbz	r3, cee8 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    cec6:	f7ff fa87 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    ceca:	4605      	mov	r5, r0
    cecc:	b178      	cbz	r0, ceee <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    cece:	7a03      	ldrb	r3, [r0, #8]
    ced0:	b183      	cbz	r3, cef4 <usb_dc_ep_disable+0x40>
	ep_ctx->write_in_progress = false;
    ced2:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    ced4:	4608      	mov	r0, r1
    ced6:	f002 ff31 	bl	fd3c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    ceda:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    cedc:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    cede:	f005 fa5c 	bl	1239a <ep_ctx_reset>
	return 0;
    cee2:	4620      	mov	r0, r4
	ep_ctx->cfg.en = false;
    cee4:	722c      	strb	r4, [r5, #8]
}
    cee6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    cee8:	f06f 0012 	mvn.w	r0, #18
    ceec:	e7fb      	b.n	cee6 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    ceee:	f06f 0015 	mvn.w	r0, #21
    cef2:	e7f8      	b.n	cee6 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    cef4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cef8:	e7f5      	b.n	cee6 <usb_dc_ep_disable+0x32>
    cefa:	bf00      	nop
    cefc:	200091f8 	.word	0x200091f8

0000cf00 <usb_dc_ep_write>:
{
    cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf04:	b084      	sub	sp, #16
	return get_usbd_ctx()->attached;
    cf06:	f8df 911c 	ldr.w	r9, [pc, #284]	; d024 <usb_dc_ep_write+0x124>
{
    cf0a:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    cf0c:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    cf10:	4680      	mov	r8, r0
    cf12:	468a      	mov	sl, r1
    cf14:	4616      	mov	r6, r2
    cf16:	af00      	add	r7, sp, #0
	if (!dev_attached() || !dev_ready()) {
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d07f      	beq.n	d01c <usb_dc_ep_write+0x11c>
    cf1c:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    cf20:	2b00      	cmp	r3, #0
    cf22:	d07b      	beq.n	d01c <usb_dc_ep_write+0x11c>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    cf24:	f010 0f80 	tst.w	r0, #128	; 0x80
    cf28:	d014      	beq.n	cf54 <usb_dc_ep_write+0x54>
	ep_ctx = endpoint_ctx(ep);
    cf2a:	f7ff fa55 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    cf2e:	4605      	mov	r5, r0
    cf30:	b180      	cbz	r0, cf54 <usb_dc_ep_write+0x54>
	if (!ep_ctx->cfg.en) {
    cf32:	7a03      	ldrb	r3, [r0, #8]
    cf34:	b98b      	cbnz	r3, cf5a <usb_dc_ep_write+0x5a>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    cf36:	466c      	mov	r4, sp
    cf38:	b088      	sub	sp, #32
    cf3a:	466a      	mov	r2, sp
    cf3c:	4b3a      	ldr	r3, [pc, #232]	; (d028 <usb_dc_ep_write+0x128>)
    cf3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf42:	e9c2 3805 	strd	r3, r8, [r2, #20]
    cf46:	2303      	movs	r3, #3
    cf48:	4838      	ldr	r0, [pc, #224]	; (d02c <usb_dc_ep_write+0x12c>)
    cf4a:	f842 3f10 	str.w	r3, [r2, #16]!
    cf4e:	f005 fa37 	bl	123c0 <z_log_msg_static_create.constprop.0>
    cf52:	46a5      	mov	sp, r4
		return -EINVAL;
    cf54:	f06f 0415 	mvn.w	r4, #21
    cf58:	e00f      	b.n	cf7a <usb_dc_ep_write+0x7a>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    cf5a:	f04f 33ff 	mov.w	r3, #4294967295
    cf5e:	f04f 32ff 	mov.w	r2, #4294967295
    cf62:	f109 0038 	add.w	r0, r9, #56	; 0x38
    cf66:	f005 fa2e 	bl	123c6 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    cf6a:	7fab      	ldrb	r3, [r5, #30]
    cf6c:	b153      	cbz	r3, cf84 <usb_dc_ep_write+0x84>
		k_mutex_unlock(&ctx->drv_lock);
    cf6e:	f109 0038 	add.w	r0, r9, #56	; 0x38
    cf72:	f005 fa2a 	bl	123ca <k_mutex_unlock.isra.0>
		return -EAGAIN;
    cf76:	f06f 040a 	mvn.w	r4, #10
}
    cf7a:	4620      	mov	r0, r4
    cf7c:	3710      	adds	r7, #16
    cf7e:	46bd      	mov	sp, r7
    cf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    cf84:	b916      	cbnz	r6, cf8c <usb_dc_ep_write+0x8c>
    cf86:	7feb      	ldrb	r3, [r5, #31]
    cf88:	b103      	cbz	r3, cf8c <usb_dc_ep_write+0x8c>
		ep_ctx->trans_zlp = false;
    cf8a:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    cf8c:	7aab      	ldrb	r3, [r5, #10]
    cf8e:	b9bb      	cbnz	r3, cfc0 <usb_dc_ep_write+0xc0>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    cf90:	b15e      	cbz	r6, cfaa <usb_dc_ep_write+0xaa>
    cf92:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    cf96:	429e      	cmp	r6, r3
    cf98:	d207      	bcs.n	cfaa <usb_dc_ep_write+0xaa>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    cf9a:	686a      	ldr	r2, [r5, #4]
    cf9c:	fbb6 f3f2 	udiv	r3, r6, r2
    cfa0:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    cfa4:	b90b      	cbnz	r3, cfaa <usb_dc_ep_write+0xaa>
			ep_ctx->trans_zlp = true;
    cfa6:	2301      	movs	r3, #1
    cfa8:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    cfaa:	f002 fd15 	bl	f9d8 <nrfx_usbd_last_setup_dir_get>
    cfae:	4580      	cmp	r8, r0
    cfb0:	d006      	beq.n	cfc0 <usb_dc_ep_write+0xc0>
		nrfx_usbd_setup_clear();
    cfb2:	f002 fd01 	bl	f9b8 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    cfb6:	481e      	ldr	r0, [pc, #120]	; (d030 <usb_dc_ep_write+0x130>)
    cfb8:	f005 fa07 	bl	123ca <k_mutex_unlock.isra.0>
		return 0;
    cfbc:	2400      	movs	r4, #0
    cfbe:	e7dc      	b.n	cf7a <usb_dc_ep_write+0x7a>
	ep_ctx->write_in_progress = true;
    cfc0:	2301      	movs	r3, #1
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    cfc2:	f04f 0900 	mov.w	r9, #0
	ep_ctx->write_in_progress = true;
    cfc6:	77ab      	strb	r3, [r5, #30]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    cfc8:	4640      	mov	r0, r8
    cfca:	1d39      	adds	r1, r7, #4
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    cfcc:	e9c7 a601 	strd	sl, r6, [r7, #4]
    cfd0:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    cfd4:	f002 facc 	bl	f570 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    cfd8:	4b16      	ldr	r3, [pc, #88]	; (d034 <usb_dc_ep_write+0x134>)
    cfda:	4298      	cmp	r0, r3
    cfdc:	d019      	beq.n	d012 <usb_dc_ep_write+0x112>
		ep_ctx->write_in_progress = false;
    cfde:	f885 901e 	strb.w	r9, [r5, #30]
		if (ret_bytes) {
    cfe2:	b10c      	cbz	r4, cfe8 <usb_dc_ep_write+0xe8>
			*ret_bytes = 0;
    cfe4:	f8c4 9000 	str.w	r9, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    cfe8:	466c      	mov	r4, sp
    cfea:	b088      	sub	sp, #32
    cfec:	466a      	mov	r2, sp
    cfee:	4b12      	ldr	r3, [pc, #72]	; (d038 <usb_dc_ep_write+0x138>)
    cff0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cff4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cff8:	2303      	movs	r3, #3
    cffa:	480c      	ldr	r0, [pc, #48]	; (d02c <usb_dc_ep_write+0x12c>)
    cffc:	f842 3f10 	str.w	r3, [r2, #16]!
    d000:	f005 f9de 	bl	123c0 <z_log_msg_static_create.constprop.0>
    d004:	46a5      	mov	sp, r4
		result = -EIO;
    d006:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    d00a:	4809      	ldr	r0, [pc, #36]	; (d030 <usb_dc_ep_write+0x130>)
    d00c:	f005 f9dd 	bl	123ca <k_mutex_unlock.isra.0>
	return result;
    d010:	e7b3      	b.n	cf7a <usb_dc_ep_write+0x7a>
		if (ret_bytes) {
    d012:	2c00      	cmp	r4, #0
    d014:	d0f9      	beq.n	d00a <usb_dc_ep_write+0x10a>
			*ret_bytes = data_len;
    d016:	6026      	str	r6, [r4, #0]
	int result = 0;
    d018:	464c      	mov	r4, r9
    d01a:	e7f6      	b.n	d00a <usb_dc_ep_write+0x10a>
		return -ENODEV;
    d01c:	f06f 0412 	mvn.w	r4, #18
    d020:	e7ab      	b.n	cf7a <usb_dc_ep_write+0x7a>
    d022:	bf00      	nop
    d024:	200091f8 	.word	0x200091f8
    d028:	00014590 	.word	0x00014590
    d02c:	000135ac 	.word	0x000135ac
    d030:	20009230 	.word	0x20009230
    d034:	0bad0000 	.word	0x0bad0000
    d038:	000145af 	.word	0x000145af

0000d03c <usb_dc_ep_read_wait>:
{
    d03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d040:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    d042:	4b2d      	ldr	r3, [pc, #180]	; (d0f8 <usb_dc_ep_read_wait+0xbc>)
{
    d044:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    d046:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    d04a:	4681      	mov	r9, r0
    d04c:	460e      	mov	r6, r1
    d04e:	af00      	add	r7, sp, #0
	if (!dev_attached() || !dev_ready()) {
    d050:	2a00      	cmp	r2, #0
    d052:	d04d      	beq.n	d0f0 <usb_dc_ep_read_wait+0xb4>
    d054:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    d058:	2b00      	cmp	r3, #0
    d05a:	d049      	beq.n	d0f0 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    d05c:	f010 0f80 	tst.w	r0, #128	; 0x80
    d060:	d119      	bne.n	d096 <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    d062:	b911      	cbnz	r1, d06a <usb_dc_ep_read_wait+0x2e>
    d064:	f1b8 0f00 	cmp.w	r8, #0
    d068:	d115      	bne.n	d096 <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    d06a:	4648      	mov	r0, r9
    d06c:	f7ff f9b4 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    d070:	4604      	mov	r4, r0
    d072:	b180      	cbz	r0, d096 <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    d074:	7a03      	ldrb	r3, [r0, #8]
    d076:	b98b      	cbnz	r3, d09c <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    d078:	466c      	mov	r4, sp
    d07a:	b088      	sub	sp, #32
    d07c:	466a      	mov	r2, sp
    d07e:	4b1f      	ldr	r3, [pc, #124]	; (d0fc <usb_dc_ep_read_wait+0xc0>)
    d080:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d084:	e9c2 3905 	strd	r3, r9, [r2, #20]
    d088:	2303      	movs	r3, #3
    d08a:	481d      	ldr	r0, [pc, #116]	; (d100 <usb_dc_ep_read_wait+0xc4>)
    d08c:	f842 3f10 	str.w	r3, [r2, #16]!
    d090:	f005 f996 	bl	123c0 <z_log_msg_static_create.constprop.0>
    d094:	46a5      	mov	sp, r4
		return -EINVAL;
    d096:	f06f 0015 	mvn.w	r0, #21
    d09a:	e015      	b.n	d0c8 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    d09c:	f04f 33ff 	mov.w	r3, #4294967295
    d0a0:	f04f 32ff 	mov.w	r2, #4294967295
    d0a4:	4817      	ldr	r0, [pc, #92]	; (d104 <usb_dc_ep_read_wait+0xc8>)
    d0a6:	f005 f98e 	bl	123c6 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    d0aa:	68e3      	ldr	r3, [r4, #12]
    d0ac:	46c1      	mov	r9, r8
    d0ae:	4598      	cmp	r8, r3
    d0b0:	bf28      	it	cs
    d0b2:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    d0b4:	b95e      	cbnz	r6, d0ce <usb_dc_ep_read_wait+0x92>
    d0b6:	f1b8 0f00 	cmp.w	r8, #0
    d0ba:	d108      	bne.n	d0ce <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    d0bc:	b105      	cbz	r5, d0c0 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    d0be:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    d0c0:	4810      	ldr	r0, [pc, #64]	; (d104 <usb_dc_ep_read_wait+0xc8>)
    d0c2:	f005 f982 	bl	123ca <k_mutex_unlock.isra.0>
		return 0;
    d0c6:	2000      	movs	r0, #0
}
    d0c8:	46bd      	mov	sp, r7
    d0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    d0ce:	464a      	mov	r2, r9
    d0d0:	4630      	mov	r0, r6
    d0d2:	69a1      	ldr	r1, [r4, #24]
    d0d4:	f005 f939 	bl	1234a <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    d0d8:	69a3      	ldr	r3, [r4, #24]
    d0da:	444b      	add	r3, r9
    d0dc:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    d0de:	68e3      	ldr	r3, [r4, #12]
    d0e0:	eba3 0309 	sub.w	r3, r3, r9
    d0e4:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    d0e6:	2d00      	cmp	r5, #0
    d0e8:	d0ea      	beq.n	d0c0 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    d0ea:	f8c5 9000 	str.w	r9, [r5]
    d0ee:	e7e7      	b.n	d0c0 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    d0f0:	f06f 0012 	mvn.w	r0, #18
    d0f4:	e7e8      	b.n	d0c8 <usb_dc_ep_read_wait+0x8c>
    d0f6:	bf00      	nop
    d0f8:	200091f8 	.word	0x200091f8
    d0fc:	00014590 	.word	0x00014590
    d100:	000135ac 	.word	0x000135ac
    d104:	20009230 	.word	0x20009230

0000d108 <usb_dc_ep_read_continue>:
{
    d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    d10a:	4d27      	ldr	r5, [pc, #156]	; (d1a8 <usb_dc_ep_read_continue+0xa0>)
{
    d10c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    d10e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    d112:	af00      	add	r7, sp, #0
	if (!dev_attached() || !dev_ready()) {
    d114:	2b00      	cmp	r3, #0
    d116:	d044      	beq.n	d1a2 <usb_dc_ep_read_continue+0x9a>
    d118:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    d11c:	2b00      	cmp	r3, #0
    d11e:	d040      	beq.n	d1a2 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    d120:	0603      	lsls	r3, r0, #24
    d122:	d414      	bmi.n	d14e <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    d124:	f7ff f958 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    d128:	4604      	mov	r4, r0
    d12a:	b180      	cbz	r0, d14e <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    d12c:	7a03      	ldrb	r3, [r0, #8]
    d12e:	b98b      	cbnz	r3, d154 <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    d130:	466c      	mov	r4, sp
    d132:	b088      	sub	sp, #32
    d134:	466a      	mov	r2, sp
    d136:	4b1d      	ldr	r3, [pc, #116]	; (d1ac <usb_dc_ep_read_continue+0xa4>)
    d138:	481d      	ldr	r0, [pc, #116]	; (d1b0 <usb_dc_ep_read_continue+0xa8>)
    d13a:	e9c2 3105 	strd	r3, r1, [r2, #20]
    d13e:	2303      	movs	r3, #3
    d140:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d144:	f842 3f10 	str.w	r3, [r2, #16]!
    d148:	f005 f93a 	bl	123c0 <z_log_msg_static_create.constprop.0>
    d14c:	46a5      	mov	sp, r4
		return -EINVAL;
    d14e:	f06f 0015 	mvn.w	r0, #21
    d152:	e018      	b.n	d186 <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    d154:	f04f 33ff 	mov.w	r3, #4294967295
    d158:	f04f 32ff 	mov.w	r2, #4294967295
    d15c:	f105 0038 	add.w	r0, r5, #56	; 0x38
    d160:	f005 f931 	bl	123c6 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    d164:	68e3      	ldr	r3, [r4, #12]
    d166:	b9bb      	cbnz	r3, d198 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    d168:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    d16a:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    d16c:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    d16e:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    d170:	7f63      	ldrb	r3, [r4, #29]
    d172:	b18b      	cbz	r3, d198 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    d174:	f7ff f9a8 	bl	c4c8 <usbd_evt_alloc>
			if (!ev) {
    d178:	b938      	cbnz	r0, d18a <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    d17a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    d17e:	f005 f924 	bl	123ca <k_mutex_unlock.isra.0>
				return -ENOMEM;
    d182:	f06f 000b 	mvn.w	r0, #11
}
    d186:	46bd      	mov	sp, r7
    d188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ev->evt_type = USBD_EVT_EP;
    d18a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    d18c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    d18e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    d190:	f7ff f94a 	bl	c428 <usbd_evt_put>
			usbd_work_schedule();
    d194:	f7ff f94e 	bl	c434 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    d198:	4806      	ldr	r0, [pc, #24]	; (d1b4 <usb_dc_ep_read_continue+0xac>)
    d19a:	f005 f916 	bl	123ca <k_mutex_unlock.isra.0>
	return 0;
    d19e:	2000      	movs	r0, #0
    d1a0:	e7f1      	b.n	d186 <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
    d1a2:	f06f 0012 	mvn.w	r0, #18
    d1a6:	e7ee      	b.n	d186 <usb_dc_ep_read_continue+0x7e>
    d1a8:	200091f8 	.word	0x200091f8
    d1ac:	00014590 	.word	0x00014590
    d1b0:	000135ac 	.word	0x000135ac
    d1b4:	20009230 	.word	0x20009230

0000d1b8 <usb_dc_ep_set_callback>:
{
    d1b8:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    d1ba:	4b08      	ldr	r3, [pc, #32]	; (d1dc <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    d1bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d1c0:	b12b      	cbz	r3, d1ce <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    d1c2:	f7ff f909 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    d1c6:	b128      	cbz	r0, d1d4 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    d1c8:	6001      	str	r1, [r0, #0]
	return 0;
    d1ca:	2000      	movs	r0, #0
}
    d1cc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d1ce:	f06f 0012 	mvn.w	r0, #18
    d1d2:	e7fb      	b.n	d1cc <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    d1d4:	f06f 0015 	mvn.w	r0, #21
    d1d8:	e7f8      	b.n	d1cc <usb_dc_ep_set_callback+0x14>
    d1da:	bf00      	nop
    d1dc:	200091f8 	.word	0x200091f8

0000d1e0 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    d1e0:	4b01      	ldr	r3, [pc, #4]	; (d1e8 <usb_dc_set_status_callback+0x8>)
    d1e2:	6018      	str	r0, [r3, #0]
}
    d1e4:	4770      	bx	lr
    d1e6:	bf00      	nop
    d1e8:	200091f8 	.word	0x200091f8

0000d1ec <usb_dc_ep_mps>:
{
    d1ec:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    d1ee:	4b07      	ldr	r3, [pc, #28]	; (d20c <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    d1f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d1f4:	b123      	cbz	r3, d200 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    d1f6:	f7ff f8ef 	bl	c3d8 <endpoint_ctx>
	if (!ep_ctx) {
    d1fa:	b120      	cbz	r0, d206 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    d1fc:	6840      	ldr	r0, [r0, #4]
}
    d1fe:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d200:	f06f 0012 	mvn.w	r0, #18
    d204:	e7fb      	b.n	d1fe <usb_dc_ep_mps+0x12>
		return -EINVAL;
    d206:	f06f 0015 	mvn.w	r0, #21
    d20a:	e7f8      	b.n	d1fe <usb_dc_ep_mps+0x12>
    d20c:	200091f8 	.word	0x200091f8

0000d210 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    d210:	4b08      	ldr	r3, [pc, #32]	; (d234 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d212:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d214:	1ac3      	subs	r3, r0, r3
{
    d216:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d218:	4907      	ldr	r1, [pc, #28]	; (d238 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    d21a:	109b      	asrs	r3, r3, #2
{
    d21c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d21e:	4359      	muls	r1, r3
    d220:	2240      	movs	r2, #64	; 0x40
    d222:	4806      	ldr	r0, [pc, #24]	; (d23c <onoff_stop+0x2c>)
    d224:	f005 f907 	bl	12436 <stop>
	notify(mgr, res);
    d228:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d22a:	4601      	mov	r1, r0
	notify(mgr, res);
    d22c:	4620      	mov	r0, r4
}
    d22e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d232:	4718      	bx	r3
    d234:	20009498 	.word	0x20009498
    d238:	b6db6db7 	.word	0xb6db6db7
    d23c:	00013238 	.word	0x00013238

0000d240 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d240:	2340      	movs	r3, #64	; 0x40
{
    d242:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d244:	4c0b      	ldr	r4, [pc, #44]	; (d274 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d246:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    d248:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d24a:	460b      	mov	r3, r1
{
    d24c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d24e:	490a      	ldr	r1, [pc, #40]	; (d278 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    d250:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d252:	4361      	muls	r1, r4
{
    d254:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d256:	4a09      	ldr	r2, [pc, #36]	; (d27c <onoff_start+0x3c>)
    d258:	4809      	ldr	r0, [pc, #36]	; (d280 <onoff_start+0x40>)
    d25a:	f005 f919 	bl	12490 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    d25e:	1e01      	subs	r1, r0, #0
    d260:	da05      	bge.n	d26e <onoff_start+0x2e>
		notify(mgr, err);
    d262:	4630      	mov	r0, r6
    d264:	462b      	mov	r3, r5
	}
}
    d266:	b002      	add	sp, #8
    d268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    d26c:	4718      	bx	r3
}
    d26e:	b002      	add	sp, #8
    d270:	bd70      	pop	{r4, r5, r6, pc}
    d272:	bf00      	nop
    d274:	20009498 	.word	0x20009498
    d278:	b6db6db7 	.word	0xb6db6db7
    d27c:	000124ff 	.word	0x000124ff
    d280:	00013238 	.word	0x00013238

0000d284 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d288:	2200      	movs	r2, #0
    d28a:	2101      	movs	r1, #1
{
    d28c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d28e:	2005      	movs	r0, #5
    d290:	f7fe f8ae 	bl	b3f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    d294:	4811      	ldr	r0, [pc, #68]	; (d2dc <clk_init+0x58>)
    d296:	f001 f9d7 	bl	e648 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d29a:	4b11      	ldr	r3, [pc, #68]	; (d2e0 <clk_init+0x5c>)
    d29c:	4298      	cmp	r0, r3
    d29e:	d119      	bne.n	d2d4 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d2a0:	f001 f9e2 	bl	e668 <nrfx_clock_enable>
    d2a4:	2400      	movs	r4, #0
	return &data->mgr[type];
    d2a6:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2aa:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d2ac:	f8df 9034 	ldr.w	r9, [pc, #52]	; d2e4 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    d2b0:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d2b2:	4649      	mov	r1, r9
    d2b4:	fb08 5004 	mla	r0, r8, r4, r5
    d2b8:	f004 fa0c 	bl	116d4 <onoff_manager_init>
		if (err < 0) {
    d2bc:	2800      	cmp	r0, #0
    d2be:	db07      	blt.n	d2d0 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2c0:	2301      	movs	r3, #1
    d2c2:	fb07 5504 	mla	r5, r7, r4, r5
	for (enum clock_control_nrf_type i = 0;
    d2c6:	441c      	add	r4, r3
    d2c8:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2ca:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    d2cc:	d1f0      	bne.n	d2b0 <clk_init+0x2c>
	}

	return 0;
    d2ce:	2000      	movs	r0, #0
}
    d2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    d2d4:	f06f 0004 	mvn.w	r0, #4
    d2d8:	e7fa      	b.n	d2d0 <clk_init+0x4c>
    d2da:	bf00      	nop
    d2dc:	0000d31d 	.word	0x0000d31d
    d2e0:	0bad0000 	.word	0x0bad0000
    d2e4:	00013718 	.word	0x00013718

0000d2e8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d2e8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d2ea:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d2ec:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d2ee:	434b      	muls	r3, r1
    d2f0:	4808      	ldr	r0, [pc, #32]	; (d314 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    d2f2:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d2f4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d2f6:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    d2f8:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    d2fc:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d2fe:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    d300:	f005 f886 	bl	12410 <set_on_state>
	if (callback) {
    d304:	b12d      	cbz	r5, d312 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d306:	4632      	mov	r2, r6
    d308:	462b      	mov	r3, r5
}
    d30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d30e:	4802      	ldr	r0, [pc, #8]	; (d318 <clkstarted_handle.constprop.0+0x30>)
    d310:	4718      	bx	r3
}
    d312:	bd70      	pop	{r4, r5, r6, pc}
    d314:	20009498 	.word	0x20009498
    d318:	00013238 	.word	0x00013238

0000d31c <clock_event_handler>:
	switch (event) {
    d31c:	2805      	cmp	r0, #5
    d31e:	d811      	bhi.n	d344 <clock_event_handler+0x28>
    d320:	e8df f000 	tbb	[pc, r0]
    d324:	10100e03 	.word	0x10100e03
    d328:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d32a:	4b07      	ldr	r3, [pc, #28]	; (d348 <clock_event_handler+0x2c>)
    d32c:	6f98      	ldr	r0, [r3, #120]	; 0x78
    d32e:	f010 0007 	ands.w	r0, r0, #7
    d332:	d107      	bne.n	d344 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d334:	f7ff bfd8 	b.w	d2e8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    d338:	2002      	movs	r0, #2
    d33a:	e7fb      	b.n	d334 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    d33c:	2003      	movs	r0, #3
    d33e:	e7f9      	b.n	d334 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d340:	2001      	movs	r0, #1
    d342:	e7f7      	b.n	d334 <clock_event_handler+0x18>
}
    d344:	4770      	bx	lr
    d346:	bf00      	nop
    d348:	20009498 	.word	0x20009498

0000d34c <generic_hfclk_start>:
{
    d34c:	b508      	push	{r3, lr}
	__asm__ volatile(
    d34e:	f04f 0320 	mov.w	r3, #32
    d352:	f3ef 8111 	mrs	r1, BASEPRI
    d356:	f383 8812 	msr	BASEPRI_MAX, r3
    d35a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d35e:	4a11      	ldr	r2, [pc, #68]	; (d3a4 <generic_hfclk_start+0x58>)
    d360:	6813      	ldr	r3, [r2, #0]
    d362:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    d366:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    d36a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d36c:	d00b      	beq.n	d386 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d36e:	4a0e      	ldr	r2, [pc, #56]	; (d3a8 <generic_hfclk_start+0x5c>)
    d370:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d374:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d378:	f013 0301 	ands.w	r3, r3, #1
    d37c:	d003      	beq.n	d386 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    d37e:	480b      	ldr	r0, [pc, #44]	; (d3ac <generic_hfclk_start+0x60>)
    d380:	f005 f846 	bl	12410 <set_on_state>
			already_started = true;
    d384:	2301      	movs	r3, #1
	__asm__ volatile(
    d386:	f381 8811 	msr	BASEPRI, r1
    d38a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    d38e:	b123      	cbz	r3, d39a <generic_hfclk_start+0x4e>
}
    d390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d394:	2000      	movs	r0, #0
    d396:	f7ff bfa7 	b.w	d2e8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d39a:	2001      	movs	r0, #1
}
    d39c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d3a0:	f001 b97a 	b.w	e698 <nrfx_clock_start>
    d3a4:	20009538 	.word	0x20009538
    d3a8:	40005000 	.word	0x40005000
    d3ac:	20009510 	.word	0x20009510

0000d3b0 <api_blocking_start>:
{
    d3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3b2:	2200      	movs	r2, #0
    d3b4:	2301      	movs	r3, #1
    d3b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3ba:	466b      	mov	r3, sp
    d3bc:	4a08      	ldr	r2, [pc, #32]	; (d3e0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3be:	f8cd d000 	str.w	sp, [sp]
    d3c2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3c6:	f005 f893 	bl	124f0 <api_start>
	if (err < 0) {
    d3ca:	2800      	cmp	r0, #0
    d3cc:	db05      	blt.n	d3da <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    d3ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d3d2:	2300      	movs	r3, #0
    d3d4:	4668      	mov	r0, sp
    d3d6:	f003 f955 	bl	10684 <z_impl_k_sem_take>
}
    d3da:	b005      	add	sp, #20
    d3dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d3e0:	00012535 	.word	0x00012535

0000d3e4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d3e4:	4b07      	ldr	r3, [pc, #28]	; (d404 <generic_hfclk_stop+0x20>)
    d3e6:	e8d3 2fef 	ldaex	r2, [r3]
    d3ea:	f022 0102 	bic.w	r1, r2, #2
    d3ee:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d3f2:	2800      	cmp	r0, #0
    d3f4:	d1f7      	bne.n	d3e6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    d3f6:	07d3      	lsls	r3, r2, #31
    d3f8:	d402      	bmi.n	d400 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d3fa:	2001      	movs	r0, #1
    d3fc:	f005 baae 	b.w	1295c <nrfx_clock_stop>
}
    d400:	4770      	bx	lr
    d402:	bf00      	nop
    d404:	20009538 	.word	0x20009538

0000d408 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    d408:	b2c3      	uxtb	r3, r0
}
    d40a:	201c      	movs	r0, #28
    d40c:	4a01      	ldr	r2, [pc, #4]	; (d414 <z_nrf_clock_control_get_onoff+0xc>)
    d40e:	fb03 2000 	mla	r0, r3, r0, r2
    d412:	4770      	bx	lr
    d414:	20009498 	.word	0x20009498

0000d418 <z_nrf_clock_control_lf_on>:
{
    d418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d41c:	2201      	movs	r2, #1
    d41e:	4607      	mov	r7, r0
    d420:	4935      	ldr	r1, [pc, #212]	; (d4f8 <z_nrf_clock_control_lf_on+0xe0>)
    d422:	e8d1 3fef 	ldaex	r3, [r1]
    d426:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d42a:	2800      	cmp	r0, #0
    d42c:	d1f9      	bne.n	d422 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d42e:	b933      	cbnz	r3, d43e <z_nrf_clock_control_lf_on+0x26>
    d430:	4932      	ldr	r1, [pc, #200]	; (d4fc <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    d432:	4833      	ldr	r0, [pc, #204]	; (d500 <z_nrf_clock_control_lf_on+0xe8>)
    d434:	604b      	str	r3, [r1, #4]
    d436:	60cb      	str	r3, [r1, #12]
    d438:	608a      	str	r2, [r1, #8]
    d43a:	f004 f95e 	bl	116fa <onoff_request>
	switch (start_mode) {
    d43e:	1e7b      	subs	r3, r7, #1
    d440:	2b01      	cmp	r3, #1
    d442:	d82d      	bhi.n	d4a0 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d444:	2f01      	cmp	r7, #1
    d446:	d106      	bne.n	d456 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d448:	4b2e      	ldr	r3, [pc, #184]	; (d504 <z_nrf_clock_control_lf_on+0xec>)
    d44a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d44e:	f003 0303 	and.w	r3, r3, #3
    d452:	2b02      	cmp	r3, #2
    d454:	d024      	beq.n	d4a0 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d456:	f005 fba9 	bl	12bac <k_is_in_isr>
    d45a:	4604      	mov	r4, r0
    d45c:	b918      	cbnz	r0, d466 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    d45e:	4b2a      	ldr	r3, [pc, #168]	; (d508 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    d460:	781b      	ldrb	r3, [r3, #0]
    d462:	2b00      	cmp	r3, #0
    d464:	d141      	bne.n	d4ea <z_nrf_clock_control_lf_on+0xd2>
	__asm__ volatile(
    d466:	f04f 0320 	mov.w	r3, #32
    d46a:	f3ef 8611 	mrs	r6, BASEPRI
    d46e:	f383 8812 	msr	BASEPRI_MAX, r3
    d472:	f3bf 8f6f 	isb	sy
    d476:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d478:	4d22      	ldr	r5, [pc, #136]	; (d504 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d47a:	f8df 8090 	ldr.w	r8, [pc, #144]	; d50c <z_nrf_clock_control_lf_on+0xf4>
    d47e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d482:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    d486:	03d2      	lsls	r2, r2, #15
    d488:	d50c      	bpl.n	d4a4 <z_nrf_clock_control_lf_on+0x8c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d48a:	f003 0303 	and.w	r3, r3, #3
    d48e:	2b02      	cmp	r3, #2
    d490:	d001      	beq.n	d496 <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d492:	2f01      	cmp	r7, #1
    d494:	d106      	bne.n	d4a4 <z_nrf_clock_control_lf_on+0x8c>
	if (isr_mode) {
    d496:	b324      	cbz	r4, d4e2 <z_nrf_clock_control_lf_on+0xca>
	__asm__ volatile(
    d498:	f386 8811 	msr	BASEPRI, r6
    d49c:	f3bf 8f6f 	isb	sy
}
    d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    d4a4:	b1c4      	cbz	r4, d4d8 <z_nrf_clock_control_lf_on+0xc0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d4a6:	4630      	mov	r0, r6
    d4a8:	f7fd ff00 	bl	b2ac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d4ac:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d4b0:	b2db      	uxtb	r3, r3
    d4b2:	2b01      	cmp	r3, #1
    d4b4:	d1e3      	bne.n	d47e <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d4b6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    d4ba:	2a00      	cmp	r2, #0
    d4bc:	d0df      	beq.n	d47e <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d4be:	2200      	movs	r2, #0
    d4c0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d4c4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    d4c8:	2202      	movs	r2, #2
    d4ca:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    d4ce:	2220      	movs	r2, #32
    d4d0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d4d4:	60ab      	str	r3, [r5, #8]
}
    d4d6:	e7d2      	b.n	d47e <z_nrf_clock_control_lf_on+0x66>
	return z_impl_k_sleep(timeout);
    d4d8:	2100      	movs	r1, #0
    d4da:	2021      	movs	r0, #33	; 0x21
    d4dc:	f003 fd0a 	bl	10ef4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d4e0:	e7e4      	b.n	d4ac <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENSET = mask;
    d4e2:	2302      	movs	r3, #2
    d4e4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    d4e8:	e7da      	b.n	d4a0 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    d4ea:	2202      	movs	r2, #2
    d4ec:	4b05      	ldr	r3, [pc, #20]	; (d504 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    d4ee:	4606      	mov	r6, r0
    d4f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d4f4:	e7c0      	b.n	d478 <z_nrf_clock_control_lf_on+0x60>
    d4f6:	bf00      	nop
    d4f8:	2000953c 	.word	0x2000953c
    d4fc:	20009488 	.word	0x20009488
    d500:	200094b4 	.word	0x200094b4
    d504:	40005000 	.word	0x40005000
    d508:	200098c4 	.word	0x200098c4
    d50c:	e000e100 	.word	0xe000e100

0000d510 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    d510:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    d512:	4808      	ldr	r0, [pc, #32]	; (d534 <uart_console_init+0x24>)
    d514:	4b08      	ldr	r3, [pc, #32]	; (d538 <uart_console_init+0x28>)
    d516:	6018      	str	r0, [r3, #0]
    d518:	f005 fb11 	bl	12b3e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    d51c:	b138      	cbz	r0, d52e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    d51e:	4807      	ldr	r0, [pc, #28]	; (d53c <uart_console_init+0x2c>)
    d520:	f7fe fd9a 	bl	c058 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d524:	4805      	ldr	r0, [pc, #20]	; (d53c <uart_console_init+0x2c>)
    d526:	f7fb fbcf 	bl	8cc8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    d52a:	2000      	movs	r0, #0
}
    d52c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d52e:	f06f 0012 	mvn.w	r0, #18
    d532:	e7fb      	b.n	d52c <uart_console_init+0x1c>
    d534:	00013298 	.word	0x00013298
    d538:	20009540 	.word	0x20009540
    d53c:	0000d541 	.word	0x0000d541

0000d540 <console_out>:
	if ('\n' == c) {
    d540:	280a      	cmp	r0, #10
{
    d542:	b538      	push	{r3, r4, r5, lr}
    d544:	4604      	mov	r4, r0
    d546:	4d07      	ldr	r5, [pc, #28]	; (d564 <console_out+0x24>)
	if ('\n' == c) {
    d548:	d104      	bne.n	d554 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    d54a:	6828      	ldr	r0, [r5, #0]
    d54c:	6883      	ldr	r3, [r0, #8]
    d54e:	210d      	movs	r1, #13
    d550:	685b      	ldr	r3, [r3, #4]
    d552:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    d554:	6828      	ldr	r0, [r5, #0]
    d556:	6883      	ldr	r3, [r0, #8]
    d558:	b2e1      	uxtb	r1, r4
    d55a:	685b      	ldr	r3, [r3, #4]
    d55c:	4798      	blx	r3
}
    d55e:	4620      	mov	r0, r4
    d560:	bd38      	pop	{r3, r4, r5, pc}
    d562:	bf00      	nop
    d564:	20009540 	.word	0x20009540

0000d568 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    d568:	b530      	push	{r4, r5, lr}
	return port->config;
    d56a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d56c:	f001 051f 	and.w	r5, r1, #31
    d570:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    d572:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d576:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    d57a:	b085      	sub	sp, #20
    d57c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    d580:	d105      	bne.n	d58e <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    d582:	4628      	mov	r0, r5
    d584:	f001 fb90 	bl	eca8 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    d588:	2000      	movs	r0, #0
}
    d58a:	b005      	add	sp, #20
    d58c:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    d58e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d592:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d596:	d133      	bne.n	d600 <gpio_nrfx_pin_interrupt_configure+0x98>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d59c:	bf0c      	ite	eq
    d59e:	2304      	moveq	r3, #4
    d5a0:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    d5a2:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d5a6:	6883      	ldr	r3, [r0, #8]
    d5a8:	fa23 f101 	lsr.w	r1, r3, r1
    d5ac:	07c9      	lsls	r1, r1, #31
    d5ae:	d419      	bmi.n	d5e4 <gpio_nrfx_pin_interrupt_configure+0x7c>
    d5b0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d5b4:	d116      	bne.n	d5e4 <gpio_nrfx_pin_interrupt_configure+0x7c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    d5b6:	4a1e      	ldr	r2, [pc, #120]	; (d630 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    d5b8:	481e      	ldr	r0, [pc, #120]	; (d634 <gpio_nrfx_pin_interrupt_configure+0xcc>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    d5ba:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
    d5bc:	2901      	cmp	r1, #1
    d5be:	bf08      	it	eq
    d5c0:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    d5c2:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d5c6:	3380      	adds	r3, #128	; 0x80
    d5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d5cc:	07db      	lsls	r3, r3, #31
    d5ce:	d409      	bmi.n	d5e4 <gpio_nrfx_pin_interrupt_configure+0x7c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d5d0:	f10d 0407 	add.w	r4, sp, #7
    d5d4:	4621      	mov	r1, r4
    d5d6:	4628      	mov	r0, r5
    d5d8:	f001 facc 	bl	eb74 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d5dc:	4b16      	ldr	r3, [pc, #88]	; (d638 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    d5de:	4298      	cmp	r0, r3
    d5e0:	d019      	beq.n	d616 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    d5e2:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d5e4:	2300      	movs	r3, #0
    d5e6:	4628      	mov	r0, r5
    d5e8:	4619      	mov	r1, r3
    d5ea:	aa02      	add	r2, sp, #8
    d5ec:	f001 f99c 	bl	e928 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d5f0:	4b12      	ldr	r3, [pc, #72]	; (d63c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    d5f2:	4298      	cmp	r0, r3
    d5f4:	d118      	bne.n	d628 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d5f6:	2101      	movs	r1, #1
    d5f8:	4628      	mov	r0, r5
    d5fa:	f001 fb0f 	bl	ec1c <nrfx_gpiote_trigger_enable>
    d5fe:	e7c3      	b.n	d588 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d600:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d604:	d005      	beq.n	d612 <gpio_nrfx_pin_interrupt_configure+0xaa>
    d606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d60a:	bf0c      	ite	eq
    d60c:	2302      	moveq	r3, #2
    d60e:	2301      	movne	r3, #1
    d610:	e7c7      	b.n	d5a2 <gpio_nrfx_pin_interrupt_configure+0x3a>
    d612:	2303      	movs	r3, #3
    d614:	e7c5      	b.n	d5a2 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    d616:	4620      	mov	r0, r4
    d618:	f001 fafa 	bl	ec10 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d61c:	4b07      	ldr	r3, [pc, #28]	; (d63c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    d61e:	4298      	cmp	r0, r3
    d620:	d0df      	beq.n	d5e2 <gpio_nrfx_pin_interrupt_configure+0x7a>
				return -ENOMEM;
    d622:	f06f 000b 	mvn.w	r0, #11
    d626:	e7b0      	b.n	d58a <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    d628:	f06f 0015 	mvn.w	r0, #21
    d62c:	e7ad      	b.n	d58a <gpio_nrfx_pin_interrupt_configure+0x22>
    d62e:	bf00      	nop
    d630:	40842500 	.word	0x40842500
    d634:	40842800 	.word	0x40842800
    d638:	0bad0004 	.word	0x0bad0004
    d63c:	0bad0000 	.word	0x0bad0000

0000d640 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d640:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d642:	f001 fad5 	bl	ebf0 <nrfx_gpiote_is_init>
    d646:	4604      	mov	r4, r0
    d648:	b968      	cbnz	r0, d666 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d64a:	f001 faa9 	bl	eba0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d64e:	4b08      	ldr	r3, [pc, #32]	; (d670 <gpio_nrfx_init+0x30>)
    d650:	4298      	cmp	r0, r3
    d652:	d10a      	bne.n	d66a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d654:	4621      	mov	r1, r4
    d656:	4807      	ldr	r0, [pc, #28]	; (d674 <gpio_nrfx_init+0x34>)
    d658:	f001 fa86 	bl	eb68 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d65c:	4622      	mov	r2, r4
    d65e:	2105      	movs	r1, #5
    d660:	202f      	movs	r0, #47	; 0x2f
    d662:	f7fd fec5 	bl	b3f0 <z_arm_irq_priority_set>
		return 0;
    d666:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d668:	bd10      	pop	{r4, pc}
		return -EIO;
    d66a:	f06f 0004 	mvn.w	r0, #4
    d66e:	e7fb      	b.n	d668 <gpio_nrfx_init+0x28>
    d670:	0bad0000 	.word	0x0bad0000
    d674:	0000d679 	.word	0x0000d679

0000d678 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d678:	0942      	lsrs	r2, r0, #5
{
    d67a:	4603      	mov	r3, r0
    d67c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d67e:	d002      	beq.n	d686 <nrfx_gpio_handler+0xe>
    d680:	2a01      	cmp	r2, #1
    d682:	d015      	beq.n	d6b0 <nrfx_gpio_handler+0x38>
}
    d684:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d686:	4e0b      	ldr	r6, [pc, #44]	; (d6b4 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    d688:	6932      	ldr	r2, [r6, #16]
    d68a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d68c:	2900      	cmp	r1, #0
    d68e:	d0f9      	beq.n	d684 <nrfx_gpio_handler+0xc>
    d690:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    d692:	f003 031f 	and.w	r3, r3, #31
	return node->next;
    d696:	680c      	ldr	r4, [r1, #0]
    d698:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    d69a:	688a      	ldr	r2, [r1, #8]
    d69c:	402a      	ands	r2, r5
    d69e:	d002      	beq.n	d6a6 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d6a0:	4630      	mov	r0, r6
    d6a2:	684b      	ldr	r3, [r1, #4]
    d6a4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d6a6:	2c00      	cmp	r4, #0
    d6a8:	d0ec      	beq.n	d684 <nrfx_gpio_handler+0xc>
    d6aa:	4621      	mov	r1, r4
    d6ac:	6824      	ldr	r4, [r4, #0]
    d6ae:	e7f4      	b.n	d69a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d6b0:	4e01      	ldr	r6, [pc, #4]	; (d6b8 <nrfx_gpio_handler+0x40>)
    d6b2:	e7e9      	b.n	d688 <nrfx_gpio_handler+0x10>
    d6b4:	00013250 	.word	0x00013250
    d6b8:	00013268 	.word	0x00013268

0000d6bc <gpio_nrfx_pin_configure>:
{
    d6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    d6c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d6c4:	f001 061f 	and.w	r6, r1, #31
    d6c8:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    d6cc:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d6ce:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    d6d2:	4614      	mov	r4, r2
    d6d4:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d6d6:	4630      	mov	r0, r6
    d6d8:	f10d 0103 	add.w	r1, sp, #3
    d6dc:	f001 fa4a 	bl	eb74 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d6e0:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d6e4:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d6e6:	d10b      	bne.n	d700 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    d6e8:	4630      	mov	r0, r6
    d6ea:	f001 fb05 	bl	ecf8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    d6ee:	4b42      	ldr	r3, [pc, #264]	; (d7f8 <gpio_nrfx_pin_configure+0x13c>)
    d6f0:	4599      	cmp	r9, r3
    d6f2:	d103      	bne.n	d6fc <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    d6f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d6f8:	f001 fa84 	bl	ec04 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d6fc:	2000      	movs	r0, #0
    d6fe:	e056      	b.n	d7ae <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d700:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d702:	4630      	mov	r0, r6
    d704:	4619      	mov	r1, r3
    d706:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    d708:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d70c:	f001 f90c 	bl	e928 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d710:	4b39      	ldr	r3, [pc, #228]	; (d7f8 <gpio_nrfx_pin_configure+0x13c>)
    d712:	4298      	cmp	r0, r3
    d714:	d002      	beq.n	d71c <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d716:	f06f 0015 	mvn.w	r0, #21
    d71a:	e048      	b.n	d7ae <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
    d71c:	4581      	cmp	r9, r0
    d71e:	d103      	bne.n	d728 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    d720:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d724:	f001 fa6e 	bl	ec04 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    d728:	03a5      	lsls	r5, r4, #14
    d72a:	d552      	bpl.n	d7d2 <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d72c:	f240 3306 	movw	r3, #774	; 0x306
    d730:	4023      	ands	r3, r4
    d732:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    d736:	d03d      	beq.n	d7b4 <gpio_nrfx_pin_configure+0xf8>
    d738:	d80c      	bhi.n	d754 <gpio_nrfx_pin_configure+0x98>
    d73a:	2b06      	cmp	r3, #6
    d73c:	d015      	beq.n	d76a <gpio_nrfx_pin_configure+0xae>
    d73e:	d804      	bhi.n	d74a <gpio_nrfx_pin_configure+0x8e>
    d740:	b19b      	cbz	r3, d76a <gpio_nrfx_pin_configure+0xae>
    d742:	2b02      	cmp	r3, #2
    d744:	d1e7      	bne.n	d716 <gpio_nrfx_pin_configure+0x5a>
    d746:	2304      	movs	r3, #4
    d748:	e00f      	b.n	d76a <gpio_nrfx_pin_configure+0xae>
    d74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d74e:	d1e2      	bne.n	d716 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    d750:	2301      	movs	r3, #1
    d752:	e00a      	b.n	d76a <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d754:	f240 2202 	movw	r2, #514	; 0x202
    d758:	4293      	cmp	r3, r2
    d75a:	d02d      	beq.n	d7b8 <gpio_nrfx_pin_configure+0xfc>
    d75c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    d760:	d02c      	beq.n	d7bc <gpio_nrfx_pin_configure+0x100>
    d762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d766:	d1d6      	bne.n	d716 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    d768:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    d76a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    d76e:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    d772:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    d776:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    d778:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    d77c:	bf4c      	ite	mi
    d77e:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    d780:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d784:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    d786:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d78a:	d519      	bpl.n	d7c0 <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    d78c:	2101      	movs	r1, #1
    d78e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d792:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    d796:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    d798:	2200      	movs	r2, #0
    d79a:	4630      	mov	r0, r6
    d79c:	a901      	add	r1, sp, #4
    d79e:	f001 f96f 	bl	ea80 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d7a2:	4b15      	ldr	r3, [pc, #84]	; (d7f8 <gpio_nrfx_pin_configure+0x13c>)
    d7a4:	4298      	cmp	r0, r3
    d7a6:	bf14      	ite	ne
    d7a8:	f06f 0015 	mvnne.w	r0, #21
    d7ac:	2000      	moveq	r0, #0
}
    d7ae:	b005      	add	sp, #20
    d7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    d7b4:	2307      	movs	r3, #7
    d7b6:	e7d8      	b.n	d76a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    d7b8:	2305      	movs	r3, #5
    d7ba:	e7d6      	b.n	d76a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    d7bc:	2303      	movs	r3, #3
    d7be:	e7d4      	b.n	d76a <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    d7c0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    d7c2:	bf41      	itttt	mi
    d7c4:	2101      	movmi	r1, #1
    d7c6:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    d7ca:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    d7ce:	60df      	strmi	r7, [r3, #12]
}
    d7d0:	e7e2      	b.n	d798 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    d7d2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d7d4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    d7d8:	bf4c      	ite	mi
    d7da:	2403      	movmi	r4, #3
    d7dc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d7e0:	461a      	mov	r2, r3
    d7e2:	4630      	mov	r0, r6
    d7e4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    d7e6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d7ea:	f001 f89d 	bl	e928 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d7ee:	4b02      	ldr	r3, [pc, #8]	; (d7f8 <gpio_nrfx_pin_configure+0x13c>)
    d7f0:	4298      	cmp	r0, r3
    d7f2:	d083      	beq.n	d6fc <gpio_nrfx_pin_configure+0x40>
    d7f4:	e78f      	b.n	d716 <gpio_nrfx_pin_configure+0x5a>
    d7f6:	bf00      	nop
    d7f8:	0bad0000 	.word	0x0bad0000

0000d7fc <z_impl_hwinfo_get_device_id>:

static inline void soc_secure_read_deviceid(uint32_t deviceid[2])
{
	int err;

	err = soc_secure_mem_read(deviceid,
    d7fc:	2208      	movs	r2, #8
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    d7fe:	b530      	push	{r4, r5, lr}
    d800:	460c      	mov	r4, r1
    d802:	b085      	sub	sp, #20
    d804:	4605      	mov	r5, r0
    d806:	490b      	ldr	r1, [pc, #44]	; (d834 <z_impl_hwinfo_get_device_id+0x38>)
    d808:	eb0d 0002 	add.w	r0, sp, r2
    d80c:	f004 fc52 	bl	120b4 <soc_secure_mem_read>
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    d810:	2c08      	cmp	r4, #8
    d812:	bf28      	it	cs
    d814:	2408      	movcs	r4, #8
    d816:	9b03      	ldr	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    d818:	4622      	mov	r2, r4
    d81a:	ba1b      	rev	r3, r3
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    d81c:	9300      	str	r3, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d81e:	9b02      	ldr	r3, [sp, #8]
	memcpy(buffer, dev_id.id, length);
    d820:	4669      	mov	r1, sp
    d822:	ba1b      	rev	r3, r3
    d824:	4628      	mov	r0, r5
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d826:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    d828:	f004 fd8f 	bl	1234a <memcpy>

	return length;
}
    d82c:	4620      	mov	r0, r4
    d82e:	b005      	add	sp, #20
    d830:	bd30      	pop	{r4, r5, pc}
    d832:	bf00      	nop
    d834:	00ff0204 	.word	0x00ff0204

0000d838 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    d838:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d83a:	794b      	ldrb	r3, [r1, #5]
    d83c:	2b01      	cmp	r3, #1
    d83e:	d028      	beq.n	d892 <uarte_nrfx_configure+0x5a>
    d840:	2b03      	cmp	r3, #3
    d842:	d123      	bne.n	d88c <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d844:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d846:	798b      	ldrb	r3, [r1, #6]
    d848:	2b03      	cmp	r3, #3
    d84a:	d11f      	bne.n	d88c <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    d84c:	79cd      	ldrb	r5, [r1, #7]
    d84e:	b10d      	cbz	r5, d854 <uarte_nrfx_configure+0x1c>
    d850:	2d01      	cmp	r5, #1
    d852:	d11b      	bne.n	d88c <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    d854:	790a      	ldrb	r2, [r1, #4]
    d856:	2a01      	cmp	r2, #1
    d858:	d01d      	beq.n	d896 <uarte_nrfx_configure+0x5e>
    d85a:	2a02      	cmp	r2, #2
    d85c:	d01f      	beq.n	d89e <uarte_nrfx_configure+0x66>
    d85e:	b9aa      	cbnz	r2, d88c <uarte_nrfx_configure+0x54>
    d860:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d862:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    d864:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    d866:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    d86a:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    d86c:	d06e      	beq.n	d94c <uarte_nrfx_configure+0x114>
    d86e:	d833      	bhi.n	d8d8 <uarte_nrfx_configure+0xa0>
    d870:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    d874:	d06d      	beq.n	d952 <uarte_nrfx_configure+0x11a>
    d876:	d81c      	bhi.n	d8b2 <uarte_nrfx_configure+0x7a>
    d878:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    d87c:	d06b      	beq.n	d956 <uarte_nrfx_configure+0x11e>
    d87e:	d810      	bhi.n	d8a2 <uarte_nrfx_configure+0x6a>
    d880:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    d884:	d06a      	beq.n	d95c <uarte_nrfx_configure+0x124>
    d886:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    d88a:	d06a      	beq.n	d962 <uarte_nrfx_configure+0x12a>
    d88c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d890:	e05b      	b.n	d94a <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
    d892:	2700      	movs	r7, #0
    d894:	e7d7      	b.n	d846 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    d896:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d89a:	220e      	movs	r2, #14
    d89c:	e7e1      	b.n	d862 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    d89e:	2400      	movs	r4, #0
    d8a0:	e7fb      	b.n	d89a <uarte_nrfx_configure+0x62>
	switch (baudrate) {
    d8a2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    d8a6:	d05f      	beq.n	d968 <uarte_nrfx_configure+0x130>
    d8a8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    d8ac:	d1ee      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    d8ae:	4b39      	ldr	r3, [pc, #228]	; (d994 <uarte_nrfx_configure+0x15c>)
    d8b0:	e03e      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d8b2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    d8b6:	d05a      	beq.n	d96e <uarte_nrfx_configure+0x136>
    d8b8:	d807      	bhi.n	d8ca <uarte_nrfx_configure+0x92>
    d8ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    d8be:	d058      	beq.n	d972 <uarte_nrfx_configure+0x13a>
    d8c0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    d8c4:	d1e2      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    d8c6:	4b34      	ldr	r3, [pc, #208]	; (d998 <uarte_nrfx_configure+0x160>)
    d8c8:	e032      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d8ca:	f647 2c12 	movw	ip, #31250	; 0x7a12
    d8ce:	4563      	cmp	r3, ip
    d8d0:	d1dc      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    d8d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    d8d6:	e02b      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d8d8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    d8dc:	d04b      	beq.n	d976 <uarte_nrfx_configure+0x13e>
    d8de:	d813      	bhi.n	d908 <uarte_nrfx_configure+0xd0>
    d8e0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    d8e4:	d04a      	beq.n	d97c <uarte_nrfx_configure+0x144>
    d8e6:	d809      	bhi.n	d8fc <uarte_nrfx_configure+0xc4>
    d8e8:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    d8ec:	4563      	cmp	r3, ip
    d8ee:	d047      	beq.n	d980 <uarte_nrfx_configure+0x148>
    d8f0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    d8f4:	d1ca      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    d8f6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    d8fa:	e019      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d8fc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    d900:	d1c4      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    d902:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    d906:	e013      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d908:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    d90c:	d03b      	beq.n	d986 <uarte_nrfx_configure+0x14e>
    d90e:	d809      	bhi.n	d924 <uarte_nrfx_configure+0xec>
    d910:	f8df c088 	ldr.w	ip, [pc, #136]	; d99c <uarte_nrfx_configure+0x164>
    d914:	4563      	cmp	r3, ip
    d916:	d039      	beq.n	d98c <uarte_nrfx_configure+0x154>
    d918:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    d91c:	d1b6      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    d91e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    d922:	e005      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d924:	f8df c078 	ldr.w	ip, [pc, #120]	; d9a0 <uarte_nrfx_configure+0x168>
    d928:	4563      	cmp	r3, ip
    d92a:	d1af      	bne.n	d88c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    d92c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    d930:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    d932:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    d934:	433a      	orrs	r2, r7
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    d936:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    d93a:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    d93c:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d93e:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    d942:	c903      	ldmia	r1, {r0, r1}
    d944:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    d948:	2000      	movs	r0, #0
}
    d94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    d94c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    d950:	e7ee      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    d952:	4b14      	ldr	r3, [pc, #80]	; (d9a4 <uarte_nrfx_configure+0x16c>)
    d954:	e7ec      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    d956:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    d95a:	e7e9      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
    d95c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    d960:	e7e6      	b.n	d930 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    d962:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    d966:	e7e3      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    d968:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    d96c:	e7e0      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    d96e:	4b0e      	ldr	r3, [pc, #56]	; (d9a8 <uarte_nrfx_configure+0x170>)
    d970:	e7de      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    d972:	4b0e      	ldr	r3, [pc, #56]	; (d9ac <uarte_nrfx_configure+0x174>)
    d974:	e7dc      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    d976:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    d97a:	e7d9      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    d97c:	4b0c      	ldr	r3, [pc, #48]	; (d9b0 <uarte_nrfx_configure+0x178>)
    d97e:	e7d7      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    d980:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    d984:	e7d4      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    d986:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    d98a:	e7d1      	b.n	d930 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    d98c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    d990:	e7ce      	b.n	d930 <uarte_nrfx_configure+0xf8>
    d992:	bf00      	nop
    d994:	0013b000 	.word	0x0013b000
    d998:	004ea000 	.word	0x004ea000
    d99c:	0003d090 	.word	0x0003d090
    d9a0:	000f4240 	.word	0x000f4240
    d9a4:	00275000 	.word	0x00275000
    d9a8:	0075c000 	.word	0x0075c000
    d9ac:	003af000 	.word	0x003af000
    d9b0:	013a9000 	.word	0x013a9000

0000d9b4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    d9b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d9b8:	4607      	mov	r7, r0
    d9ba:	b087      	sub	sp, #28
    d9bc:	2200      	movs	r2, #0
    d9be:	2101      	movs	r1, #1
    d9c0:	2008      	movs	r0, #8
    d9c2:	f7fd fd15 	bl	b3f0 <z_arm_irq_priority_set>
    d9c6:	2008      	movs	r0, #8
    d9c8:	f7fd fce0 	bl	b38c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d9cc:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    d9ce:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    d9d2:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    d9d4:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    d9d8:	f8d8 900c 	ldr.w	r9, [r8, #12]
    d9dc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    d9e0:	466a      	mov	r2, sp
    d9e2:	4648      	mov	r0, r9
	data->dev = dev;
    d9e4:	6037      	str	r7, [r6, #0]
    d9e6:	f004 fe8f 	bl	12708 <pinctrl_lookup_state>
	if (ret < 0) {
    d9ea:	1e05      	subs	r5, r0, #0
    d9ec:	db26      	blt.n	da3c <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    d9ee:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d9f0:	f8d9 2000 	ldr.w	r2, [r9]
    d9f4:	7919      	ldrb	r1, [r3, #4]
    d9f6:	6818      	ldr	r0, [r3, #0]
    d9f8:	f004 fea3 	bl	12742 <pinctrl_configure_pins>
	if (err < 0) {
    d9fc:	1e05      	subs	r5, r0, #0
    d9fe:	db1d      	blt.n	da3c <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    da00:	4638      	mov	r0, r7
    da02:	1d31      	adds	r1, r6, #4
    da04:	f7ff ff18 	bl	d838 <uarte_nrfx_configure>
	if (err) {
    da08:	4605      	mov	r5, r0
    da0a:	b9b8      	cbnz	r0, da3c <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    da0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    da10:	0799      	lsls	r1, r3, #30
    da12:	d523      	bpl.n	da5c <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    da14:	f106 0018 	add.w	r0, r6, #24
    da18:	f000 fef2 	bl	e800 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    da1c:	4b24      	ldr	r3, [pc, #144]	; (dab0 <uarte_0_init+0xfc>)
    da1e:	4298      	cmp	r0, r3
    da20:	d010      	beq.n	da44 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    da22:	4b24      	ldr	r3, [pc, #144]	; (dab4 <uarte_0_init+0x100>)
    da24:	9305      	str	r3, [sp, #20]
    da26:	2302      	movs	r3, #2
    da28:	9304      	str	r3, [sp, #16]
    da2a:	462b      	mov	r3, r5
		return -EIO;
    da2c:	f06f 0504 	mvn.w	r5, #4
    da30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    da34:	4820      	ldr	r0, [pc, #128]	; (dab8 <uarte_0_init+0x104>)
    da36:	aa04      	add	r2, sp, #16
    da38:	f7fc f94a 	bl	9cd0 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    da3c:	4628      	mov	r0, r5
    da3e:	b007      	add	sp, #28
    da40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    da44:	7e32      	ldrb	r2, [r6, #24]
    da46:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    da4a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    da4e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    da52:	2301      	movs	r3, #1
    da54:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    da56:	4a19      	ldr	r2, [pc, #100]	; (dabc <uarte_0_init+0x108>)
    da58:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    da5c:	2308      	movs	r3, #8
    da5e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    da62:	f898 3008 	ldrb.w	r3, [r8, #8]
    da66:	b953      	cbnz	r3, da7e <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da68:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    da6c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    da70:	6973      	ldr	r3, [r6, #20]
    da72:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    da76:	2301      	movs	r3, #1
    da78:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    da7c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    da7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    da82:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    da84:	bf5c      	itt	pl
    da86:	f44f 7280 	movpl.w	r2, #256	; 0x100
    da8a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    da8e:	06db      	lsls	r3, r3, #27
    da90:	bf44      	itt	mi
    da92:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    da96:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    da9a:	6933      	ldr	r3, [r6, #16]
    da9c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    daa0:	2300      	movs	r3, #0
    daa2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    daa6:	2301      	movs	r3, #1
    daa8:	60a3      	str	r3, [r4, #8]
    daaa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    daac:	e7c6      	b.n	da3c <uarte_0_init+0x88>
    daae:	bf00      	nop
    dab0:	0bad0000 	.word	0x0bad0000
    dab4:	00014627 	.word	0x00014627
    dab8:	0001358c 	.word	0x0001358c
    dabc:	40017000 	.word	0x40017000

0000dac0 <uarte_nrfx_poll_out>:
{
    dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dac2:	4604      	mov	r4, r0
    dac4:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    dac6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    dac8:	f005 f870 	bl	12bac <k_is_in_isr>
    dacc:	b910      	cbnz	r0, dad4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    dace:	4b2d      	ldr	r3, [pc, #180]	; (db84 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
    dad0:	781b      	ldrb	r3, [r3, #0]
    dad2:	b98b      	cbnz	r3, daf8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    dad4:	f04f 0320 	mov.w	r3, #32
    dad8:	f3ef 8611 	mrs	r6, BASEPRI
    dadc:	f383 8812 	msr	BASEPRI_MAX, r3
    dae0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dae4:	6860      	ldr	r0, [r4, #4]
    dae6:	4631      	mov	r1, r6
    dae8:	f004 fd98 	bl	1261c <is_tx_ready.isra.0>
    daec:	bb30      	cbnz	r0, db3c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    daee:	f386 8811 	msr	BASEPRI, r6
    daf2:	f3bf 8f6f 	isb	sy
}
    daf6:	e7ed      	b.n	dad4 <uarte_nrfx_poll_out+0x14>
{
    daf8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    dafa:	6860      	ldr	r0, [r4, #4]
    dafc:	f004 fd8e 	bl	1261c <is_tx_ready.isra.0>
    db00:	b970      	cbnz	r0, db20 <uarte_nrfx_poll_out+0x60>
    db02:	2001      	movs	r0, #1
    db04:	f004 ff28 	bl	12958 <nrfx_busy_wait>
    db08:	3e01      	subs	r6, #1
    db0a:	d1f6      	bne.n	dafa <uarte_nrfx_poll_out+0x3a>
    db0c:	2100      	movs	r1, #0
    db0e:	2021      	movs	r0, #33	; 0x21
    db10:	f003 f9f0 	bl	10ef4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    db14:	e7f0      	b.n	daf8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    db16:	f386 8811 	msr	BASEPRI, r6
    db1a:	f3bf 8f6f 	isb	sy
}
    db1e:	e7f5      	b.n	db0c <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
    db20:	f04f 0320 	mov.w	r3, #32
    db24:	f3ef 8611 	mrs	r6, BASEPRI
    db28:	f383 8812 	msr	BASEPRI_MAX, r3
    db2c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    db30:	6860      	ldr	r0, [r4, #4]
    db32:	4631      	mov	r1, r6
    db34:	f004 fd72 	bl	1261c <is_tx_ready.isra.0>
    db38:	2800      	cmp	r0, #0
    db3a:	d0ec      	beq.n	db16 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
    db3c:	693b      	ldr	r3, [r7, #16]
    db3e:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    db40:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    db42:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    db44:	6813      	ldr	r3, [r2, #0]
    db46:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    db4a:	2001      	movs	r0, #1
    db4c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db50:	2000      	movs	r0, #0
    db52:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    db56:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    db5a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    db5e:	6852      	ldr	r2, [r2, #4]
    db60:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    db64:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    db66:	bf41      	itttt	mi
    db68:	2208      	movmi	r2, #8
    db6a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    db6e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    db72:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db76:	2201      	movs	r2, #1
    db78:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    db7a:	f381 8811 	msr	BASEPRI, r1
    db7e:	f3bf 8f6f 	isb	sy
}
    db82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db84:	200098c4 	.word	0x200098c4

0000db88 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    db88:	2301      	movs	r3, #1
    db8a:	4083      	lsls	r3, r0
{
    db8c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    db8e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    db90:	4a0c      	ldr	r2, [pc, #48]	; (dbc4 <compare_int_lock+0x3c>)
    db92:	e8d2 1fef 	ldaex	r1, [r2]
    db96:	ea01 0c04 	and.w	ip, r1, r4
    db9a:	e8c2 cfee 	stlex	lr, ip, [r2]
    db9e:	f1be 0f00 	cmp.w	lr, #0
    dba2:	d1f6      	bne.n	db92 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dba4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    dba8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    dbac:	4a06      	ldr	r2, [pc, #24]	; (dbc8 <compare_int_lock+0x40>)
    dbae:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    dbb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dbb6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    dbba:	420b      	tst	r3, r1
}
    dbbc:	bf14      	ite	ne
    dbbe:	2001      	movne	r0, #1
    dbc0:	2000      	moveq	r0, #0
    dbc2:	bd10      	pop	{r4, pc}
    dbc4:	20009564 	.word	0x20009564
    dbc8:	40015000 	.word	0x40015000

0000dbcc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    dbcc:	4919      	ldr	r1, [pc, #100]	; (dc34 <sys_clock_timeout_handler+0x68>)
{
    dbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbd0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    dbd2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    dbd6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    dbd8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    dbdc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    dbe0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    dbe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    dbe6:	d222      	bcs.n	dc2e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    dbe8:	4b13      	ldr	r3, [pc, #76]	; (dc38 <sys_clock_timeout_handler+0x6c>)
    dbea:	681b      	ldr	r3, [r3, #0]
    dbec:	0a1a      	lsrs	r2, r3, #8
    dbee:	061b      	lsls	r3, r3, #24
    dbf0:	195e      	adds	r6, r3, r5
    dbf2:	4b12      	ldr	r3, [pc, #72]	; (dc3c <sys_clock_timeout_handler+0x70>)
    dbf4:	f142 0700 	adc.w	r7, r2, #0
    dbf8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    dbfc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    dbfe:	f003 fae9 	bl	111d4 <sys_clock_announce>
    return p_reg->CC[ch];
    dc02:	00a3      	lsls	r3, r4, #2
    dc04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dc08:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    dc0c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    dc10:	42aa      	cmp	r2, r5
    dc12:	d10b      	bne.n	dc2c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    dc14:	b91e      	cbnz	r6, dc1e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    dc16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    dc1a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dc1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    dc22:	4b07      	ldr	r3, [pc, #28]	; (dc40 <sys_clock_timeout_handler+0x74>)
    dc24:	fa00 f404 	lsl.w	r4, r0, r4
    dc28:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    dc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    dc2e:	2600      	movs	r6, #0
    dc30:	e7e5      	b.n	dbfe <sys_clock_timeout_handler+0x32>
    dc32:	bf00      	nop
    dc34:	20008790 	.word	0x20008790
    dc38:	20009568 	.word	0x20009568
    dc3c:	20008768 	.word	0x20008768
    dc40:	40015000 	.word	0x40015000

0000dc44 <compare_int_unlock>:
	if (key) {
    dc44:	b1e1      	cbz	r1, dc80 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    dc46:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dc48:	4a0e      	ldr	r2, [pc, #56]	; (dc84 <compare_int_unlock+0x40>)
    dc4a:	4083      	lsls	r3, r0
    dc4c:	e8d2 1fef 	ldaex	r1, [r2]
    dc50:	4319      	orrs	r1, r3
    dc52:	e8c2 1fec 	stlex	ip, r1, [r2]
    dc56:	f1bc 0f00 	cmp.w	ip, #0
    dc5a:	d1f7      	bne.n	dc4c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dc5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    dc60:	4a09      	ldr	r2, [pc, #36]	; (dc88 <compare_int_unlock+0x44>)
    dc62:	4083      	lsls	r3, r0
    dc64:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dc68:	4b08      	ldr	r3, [pc, #32]	; (dc8c <compare_int_unlock+0x48>)
    dc6a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    dc6e:	fa23 f000 	lsr.w	r0, r3, r0
    dc72:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc74:	bf42      	ittt	mi
    dc76:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    dc7a:	4b05      	ldrmi	r3, [pc, #20]	; (dc90 <compare_int_unlock+0x4c>)
    dc7c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    dc80:	4770      	bx	lr
    dc82:	bf00      	nop
    dc84:	20009564 	.word	0x20009564
    dc88:	40015000 	.word	0x40015000
    dc8c:	20009560 	.word	0x20009560
    dc90:	e000e100 	.word	0xe000e100

0000dc94 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    dc94:	b2c3      	uxtb	r3, r0
}
    dc96:	4802      	ldr	r0, [pc, #8]	; (dca0 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    dc98:	009b      	lsls	r3, r3, #2
    dc9a:	4418      	add	r0, r3
    dc9c:	4770      	bx	lr
    dc9e:	bf00      	nop
    dca0:	40015140 	.word	0x40015140

0000dca4 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    dca4:	4b02      	ldr	r3, [pc, #8]	; (dcb0 <z_nrf_rtc_timer_compare_read+0xc>)
    dca6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    dcaa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    dcae:	4770      	bx	lr
    dcb0:	40015000 	.word	0x40015000

0000dcb4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    dcb4:	4b0d      	ldr	r3, [pc, #52]	; (dcec <z_nrf_rtc_timer_read+0x38>)
    dcb6:	6818      	ldr	r0, [r3, #0]
    dcb8:	0a01      	lsrs	r1, r0, #8
    dcba:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    dcbc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    dcc0:	4b0b      	ldr	r3, [pc, #44]	; (dcf0 <z_nrf_rtc_timer_read+0x3c>)
    dcc2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    dcc6:	1818      	adds	r0, r3, r0
    dcc8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    dccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    dcd0:	d20a      	bcs.n	dce8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    dcd2:	4b08      	ldr	r3, [pc, #32]	; (dcf4 <z_nrf_rtc_timer_read+0x40>)
    dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    dcd8:	4290      	cmp	r0, r2
    dcda:	eb71 0303 	sbcs.w	r3, r1, r3
    dcde:	d203      	bcs.n	dce8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    dce0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    dce4:	f141 0100 	adc.w	r1, r1, #0
}
    dce8:	4770      	bx	lr
    dcea:	bf00      	nop
    dcec:	20009568 	.word	0x20009568
    dcf0:	40015000 	.word	0x40015000
    dcf4:	20008768 	.word	0x20008768

0000dcf8 <compare_set>:
{
    dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcfc:	b085      	sub	sp, #20
    dcfe:	4616      	mov	r6, r2
    dd00:	461f      	mov	r7, r3
    dd02:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    dd04:	f7ff ff40 	bl	db88 <compare_int_lock>
    dd08:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    dd0a:	f7ff ffd3 	bl	dcb4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    dd0e:	42b0      	cmp	r0, r6
    dd10:	eb71 0307 	sbcs.w	r3, r1, r7
    dd14:	d275      	bcs.n	de02 <compare_set+0x10a>
		if (target_time - curr_time > COUNTER_SPAN) {
    dd16:	4b43      	ldr	r3, [pc, #268]	; (de24 <compare_set+0x12c>)
    dd18:	1a30      	subs	r0, r6, r0
    dd1a:	eb67 0101 	sbc.w	r1, r7, r1
    dd1e:	4298      	cmp	r0, r3
    dd20:	f171 0300 	sbcs.w	r3, r1, #0
    dd24:	d27a      	bcs.n	de1c <compare_set+0x124>
		if (target_time != cc_data[chan].target_time) {
    dd26:	4b40      	ldr	r3, [pc, #256]	; (de28 <compare_set+0x130>)
    dd28:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    dd2c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    dd30:	454f      	cmp	r7, r9
    dd32:	bf08      	it	eq
    dd34:	4546      	cmpeq	r6, r8
    dd36:	d04f      	beq.n	ddd8 <compare_set+0xe0>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dd38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    dd3c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    dd40:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    dd42:	00ab      	lsls	r3, r5, #2
    dd44:	f103 4a80 	add.w	sl, r3, #1073741824	; 0x40000000
    dd48:	f50a 3aa8 	add.w	sl, sl, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dd4c:	fa02 f305 	lsl.w	r3, r2, r5
    dd50:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    dd54:	f8df b0d4 	ldr.w	fp, [pc, #212]	; de2c <compare_set+0x134>
    dd58:	9302      	str	r3, [sp, #8]
	uint32_t cc_val = abs_val & COUNTER_MAX;
    dd5a:	f026 447f 	bic.w	r4, r6, #4278190080	; 0xff000000
    dd5e:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    dd62:	1a80      	subs	r0, r0, r2
    dd64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    dd68:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    dd6c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    dd6e:	f8ca 3540 	str.w	r3, [sl, #1344]	; 0x540
    dd72:	d104      	bne.n	dd7e <compare_set+0x86>
    dd74:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    dd76:	2013      	movs	r0, #19
    dd78:	f005 f94c 	bl	13014 <z_impl_k_busy_wait>
    dd7c:	9a03      	ldr	r2, [sp, #12]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    dd7e:	f102 0c02 	add.w	ip, r2, #2
	return (a - b) & COUNTER_MAX;
    dd82:	eba4 000c 	sub.w	r0, r4, ip
    dd86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    dd8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    dd8e:	bf88      	it	hi
    dd90:	4664      	movhi	r4, ip
		event_clear(chan);
    dd92:	4628      	mov	r0, r5
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    dd94:	9203      	str	r2, [sp, #12]
		event_clear(chan);
    dd96:	f004 fc9c 	bl	126d2 <event_clear>
    p_reg->EVTENSET = mask;
    dd9a:	9b02      	ldr	r3, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    dd9c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    dda0:	f8cb 3344 	str.w	r3, [fp, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    dda4:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    dda8:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    ddac:	9a03      	ldr	r2, [sp, #12]
    ddae:	4282      	cmp	r2, r0
    ddb0:	d00a      	beq.n	ddc8 <compare_set+0xd0>
	return (a - b) & COUNTER_MAX;
    ddb2:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
    ddb6:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
    ddba:	30fe      	adds	r0, #254	; 0xfe
    ddbc:	4420      	add	r0, r4
    ddbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    ddc2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ddc6:	d81a      	bhi.n	ddfe <compare_set+0x106>
	return (a - b) & COUNTER_MAX;
    ddc8:	9b01      	ldr	r3, [sp, #4]
    ddca:	1ae4      	subs	r4, r4, r3
    ddcc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    ddd0:	eb14 0806 	adds.w	r8, r4, r6
    ddd4:	f147 0900 	adc.w	r9, r7, #0
	return ret;
    ddd8:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    ddda:	4913      	ldr	r1, [pc, #76]	; (de28 <compare_set+0x130>)
	cc_data[chan].callback = handler;
    dddc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    ddde:	012b      	lsls	r3, r5, #4
    dde0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    dde4:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    dde6:	e9c2 8902 	strd	r8, r9, [r2, #8]
	cc_data[chan].user_context = user_data;
    ddea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ddec:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    ddee:	4628      	mov	r0, r5
    ddf0:	9900      	ldr	r1, [sp, #0]
    ddf2:	f7ff ff27 	bl	dc44 <compare_int_unlock>
}
    ddf6:	4620      	mov	r0, r4
    ddf8:	b005      	add	sp, #20
    ddfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddfe:	4620      	mov	r0, r4
    de00:	e7ad      	b.n	dd5e <compare_set+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    de02:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    de04:	4a0a      	ldr	r2, [pc, #40]	; (de30 <compare_set+0x138>)
    de06:	40ab      	lsls	r3, r5
    de08:	e8d2 1fef 	ldaex	r1, [r2]
    de0c:	4319      	orrs	r1, r3
    de0e:	e8c2 1fe0 	stlex	r0, r1, [r2]
    de12:	2800      	cmp	r0, #0
    de14:	d1f8      	bne.n	de08 <compare_set+0x110>
    de16:	46b0      	mov	r8, r6
    de18:	46b9      	mov	r9, r7
    de1a:	e7dd      	b.n	ddd8 <compare_set+0xe0>
			return -EINVAL;
    de1c:	f06f 0415 	mvn.w	r4, #21
    de20:	e7e5      	b.n	ddee <compare_set+0xf6>
    de22:	bf00      	nop
    de24:	01000001 	.word	0x01000001
    de28:	20008770 	.word	0x20008770
    de2c:	40015000 	.word	0x40015000
    de30:	20009560 	.word	0x20009560

0000de34 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    de34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
    de36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
    de3a:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    de3c:	f04f 30ff 	mov.w	r0, #4294967295
    de40:	f04f 31ff 	mov.w	r1, #4294967295
    de44:	4c19      	ldr	r4, [pc, #100]	; (deac <sys_clock_driver_init+0x78>)
    de46:	4b1a      	ldr	r3, [pc, #104]	; (deb0 <sys_clock_driver_init+0x7c>)
    de48:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    de4c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    de50:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    de54:	e9c3 0106 	strd	r0, r1, [r3, #24]
    de58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    de5c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    de5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    de62:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    de66:	4b13      	ldr	r3, [pc, #76]	; (deb4 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    de68:	2101      	movs	r1, #1
    de6a:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    de6e:	2015      	movs	r0, #21
    de70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    de74:	462a      	mov	r2, r5
    de76:	f7fd fabb 	bl	b3f0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    de7a:	2015      	movs	r0, #21
    de7c:	f7fd fa86 	bl	b38c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    de80:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    de82:	2203      	movs	r2, #3
    de84:	60a3      	str	r3, [r4, #8]
    de86:	6023      	str	r3, [r4, #0]
    de88:	4b0b      	ldr	r3, [pc, #44]	; (deb8 <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    de8a:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
    de8c:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    de8e:	4b0b      	ldr	r3, [pc, #44]	; (debc <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    de90:	4a0b      	ldr	r2, [pc, #44]	; (dec0 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    de92:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    de94:	4b0b      	ldr	r3, [pc, #44]	; (dec4 <sys_clock_driver_init+0x90>)
    de96:	9501      	str	r5, [sp, #4]
    de98:	9300      	str	r3, [sp, #0]
    de9a:	2300      	movs	r3, #0
    de9c:	f7ff ff2c 	bl	dcf8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    dea0:	4630      	mov	r0, r6
    dea2:	f7ff fab9 	bl	d418 <z_nrf_clock_control_lf_on>

	return 0;
}
    dea6:	4628      	mov	r0, r5
    dea8:	b002      	add	sp, #8
    deaa:	bd70      	pop	{r4, r5, r6, pc}
    deac:	40015000 	.word	0x40015000
    deb0:	20008770 	.word	0x20008770
    deb4:	e000e100 	.word	0xe000e100
    deb8:	20009564 	.word	0x20009564
    debc:	2000955c 	.word	0x2000955c
    dec0:	007fffff 	.word	0x007fffff
    dec4:	0000dbcd 	.word	0x0000dbcd

0000dec8 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    dec8:	4b3a      	ldr	r3, [pc, #232]	; (dfb4 <rtc_nrf_isr+0xec>)
{
    deca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dece:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    ded2:	0792      	lsls	r2, r2, #30
    ded4:	d50b      	bpl.n	deee <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ded6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    deda:	b142      	cbz	r2, deee <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dedc:	2200      	movs	r2, #0
    dede:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    dee2:	4a35      	ldr	r2, [pc, #212]	; (dfb8 <rtc_nrf_isr+0xf0>)
    dee4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    dee8:	6813      	ldr	r3, [r2, #0]
    deea:	3301      	adds	r3, #1
    deec:	6013      	str	r3, [r2, #0]
{
    deee:	2400      	movs	r4, #0
    def0:	4d32      	ldr	r5, [pc, #200]	; (dfbc <rtc_nrf_isr+0xf4>)
    return p_reg->INTENSET & mask;
    def2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; dfb4 <rtc_nrf_isr+0xec>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    def6:	4f32      	ldr	r7, [pc, #200]	; (dfc0 <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
    def8:	f04f 0320 	mov.w	r3, #32
    defc:	f3ef 8111 	mrs	r1, BASEPRI
    df00:	f383 8812 	msr	BASEPRI_MAX, r3
    df04:	f3bf 8f6f 	isb	sy
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    df08:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    df0c:	f8d8 3304 	ldr.w	r3, [r8, #772]	; 0x304
    df10:	40a6      	lsls	r6, r4
    df12:	421e      	tst	r6, r3
    df14:	d134      	bne.n	df80 <rtc_nrf_isr+0xb8>
	bool result = false;
    df16:	2300      	movs	r3, #0
	__asm__ volatile(
    df18:	f381 8811 	msr	BASEPRI, r1
    df1c:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    df20:	b33b      	cbz	r3, df72 <rtc_nrf_isr+0xaa>
		curr_time = z_nrf_rtc_timer_read();
    df22:	f7ff fec7 	bl	dcb4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    df26:	f04f 0320 	mov.w	r3, #32
    df2a:	f3ef 8e11 	mrs	lr, BASEPRI
    df2e:	f383 8812 	msr	BASEPRI_MAX, r3
    df32:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    df36:	4b21      	ldr	r3, [pc, #132]	; (dfbc <rtc_nrf_isr+0xf4>)
    df38:	eb03 1c04 	add.w	ip, r3, r4, lsl #4
    df3c:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
		if (curr_time >= expire_time) {
    df40:	4290      	cmp	r0, r2
    df42:	4199      	sbcs	r1, r3
    df44:	f04f 0000 	mov.w	r0, #0
    df48:	d331      	bcc.n	dfae <rtc_nrf_isr+0xe6>
			user_context = cc_data[chan].user_context;
    df4a:	e9d5 1900 	ldrd	r1, r9, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    df4e:	f04f 3aff 	mov.w	sl, #4294967295
    df52:	f04f 3bff 	mov.w	fp, #4294967295
			cc_data[chan].callback = NULL;
    df56:	6028      	str	r0, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    df58:	e9cc ab02 	strd	sl, fp, [ip, #8]
    p_reg->EVTENCLR = mask;
    df5c:	f8c8 6348 	str.w	r6, [r8, #840]	; 0x348
	__asm__ volatile(
    df60:	f38e 8811 	msr	BASEPRI, lr
    df64:	f3bf 8f6f 	isb	sy
		if (handler) {
    df68:	b119      	cbz	r1, df72 <rtc_nrf_isr+0xaa>
			handler(chan, expire_time, user_context);
    df6a:	4620      	mov	r0, r4
    df6c:	f8cd 9000 	str.w	r9, [sp]
    df70:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    df72:	3510      	adds	r5, #16
    df74:	b114      	cbz	r4, df7c <rtc_nrf_isr+0xb4>
}
    df76:	b003      	add	sp, #12
    df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df7c:	2401      	movs	r4, #1
    df7e:	e7bb      	b.n	def8 <rtc_nrf_isr+0x30>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    df80:	2301      	movs	r3, #1
    df82:	40a3      	lsls	r3, r4
    df84:	43db      	mvns	r3, r3
    df86:	e8d7 2fef 	ldaex	r2, [r7]
    df8a:	ea02 0003 	and.w	r0, r2, r3
    df8e:	e8c7 0fec 	stlex	ip, r0, [r7]
    df92:	f1bc 0f00 	cmp.w	ip, #0
    df96:	d1f6      	bne.n	df86 <rtc_nrf_isr+0xbe>
    df98:	b922      	cbnz	r2, dfa4 <rtc_nrf_isr+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    df9a:	4b0a      	ldr	r3, [pc, #40]	; (dfc4 <rtc_nrf_isr+0xfc>)
    df9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
		if (result) {
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d0b8      	beq.n	df16 <rtc_nrf_isr+0x4e>
			event_clear(chan);
    dfa4:	4620      	mov	r0, r4
    dfa6:	f004 fb94 	bl	126d2 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    dfaa:	2301      	movs	r3, #1
    dfac:	e7b4      	b.n	df18 <rtc_nrf_isr+0x50>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    dfae:	4601      	mov	r1, r0
    dfb0:	e7d6      	b.n	df60 <rtc_nrf_isr+0x98>
    dfb2:	bf00      	nop
    dfb4:	40015000 	.word	0x40015000
    dfb8:	20009568 	.word	0x20009568
    dfbc:	20008770 	.word	0x20008770
    dfc0:	20009560 	.word	0x20009560
    dfc4:	40015140 	.word	0x40015140

0000dfc8 <z_nrf_rtc_timer_chan_alloc>:
{
    dfc8:	b510      	push	{r4, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    dfca:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    dfcc:	4b0c      	ldr	r3, [pc, #48]	; (e000 <z_nrf_rtc_timer_chan_alloc+0x38>)
    dfce:	6818      	ldr	r0, [r3, #0]
    dfd0:	b198      	cbz	r0, dffa <z_nrf_rtc_timer_chan_alloc+0x32>
    dfd2:	fab0 f080 	clz	r0, r0
    dfd6:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    dfda:	fa04 f100 	lsl.w	r1, r4, r0
    dfde:	43c9      	mvns	r1, r1
    dfe0:	e8d3 2fef 	ldaex	r2, [r3]
    dfe4:	ea02 0c01 	and.w	ip, r2, r1
    dfe8:	e8c3 cfee 	stlex	lr, ip, [r3]
    dfec:	f1be 0f00 	cmp.w	lr, #0
    dff0:	d1f6      	bne.n	dfe0 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    dff2:	40c2      	lsrs	r2, r0
    dff4:	07d2      	lsls	r2, r2, #31
    dff6:	d5ea      	bpl.n	dfce <z_nrf_rtc_timer_chan_alloc+0x6>
}
    dff8:	bd10      	pop	{r4, pc}
			return -ENOMEM;
    dffa:	f06f 000b 	mvn.w	r0, #11
    dffe:	e7fb      	b.n	dff8 <z_nrf_rtc_timer_chan_alloc+0x30>
    e000:	2000955c 	.word	0x2000955c

0000e004 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    e004:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e006:	4a05      	ldr	r2, [pc, #20]	; (e01c <z_nrf_rtc_timer_chan_free+0x18>)
    e008:	4083      	lsls	r3, r0
    e00a:	e8d2 1fef 	ldaex	r1, [r2]
    e00e:	4319      	orrs	r1, r3
    e010:	e8c2 1fe0 	stlex	r0, r1, [r2]
    e014:	2800      	cmp	r0, #0
    e016:	d1f8      	bne.n	e00a <z_nrf_rtc_timer_chan_free+0x6>
}
    e018:	4770      	bx	lr
    e01a:	bf00      	nop
    e01c:	2000955c 	.word	0x2000955c

0000e020 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e020:	1c43      	adds	r3, r0, #1
{
    e022:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e024:	d020      	beq.n	e068 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e026:	2801      	cmp	r0, #1
    e028:	dd20      	ble.n	e06c <sys_clock_set_timeout+0x4c>
    e02a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e02e:	da1f      	bge.n	e070 <sys_clock_set_timeout+0x50>
    e030:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e032:	f7ff fe3f 	bl	dcb4 <z_nrf_rtc_timer_read>
    e036:	4b0f      	ldr	r3, [pc, #60]	; (e074 <sys_clock_set_timeout+0x54>)
    e038:	e9d3 1300 	ldrd	r1, r3, [r3]
    e03c:	1a40      	subs	r0, r0, r1
		ticks = 0;
    e03e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e042:	bf28      	it	cs
    e044:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    e046:	3001      	adds	r0, #1
    e048:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    e04a:	480b      	ldr	r0, [pc, #44]	; (e078 <sys_clock_set_timeout+0x58>)
    e04c:	4282      	cmp	r2, r0
    e04e:	bf28      	it	cs
    e050:	4602      	movcs	r2, r0
    e052:	2000      	movs	r0, #0
    e054:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e056:	4909      	ldr	r1, [pc, #36]	; (e07c <sys_clock_set_timeout+0x5c>)
    e058:	9001      	str	r0, [sp, #4]
    e05a:	9100      	str	r1, [sp, #0]
    e05c:	f143 0300 	adc.w	r3, r3, #0
    e060:	f7ff fe4a 	bl	dcf8 <compare_set>
}
    e064:	b002      	add	sp, #8
    e066:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e068:	4803      	ldr	r0, [pc, #12]	; (e078 <sys_clock_set_timeout+0x58>)
    e06a:	e7e1      	b.n	e030 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e06c:	2400      	movs	r4, #0
    e06e:	e7e0      	b.n	e032 <sys_clock_set_timeout+0x12>
    e070:	4c01      	ldr	r4, [pc, #4]	; (e078 <sys_clock_set_timeout+0x58>)
    e072:	e7de      	b.n	e032 <sys_clock_set_timeout+0x12>
    e074:	20008790 	.word	0x20008790
    e078:	007fffff 	.word	0x007fffff
    e07c:	0000dbcd 	.word	0x0000dbcd

0000e080 <sys_clock_elapsed>:
{
    e080:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    e082:	f7ff fe17 	bl	dcb4 <z_nrf_rtc_timer_read>
    e086:	4b02      	ldr	r3, [pc, #8]	; (e090 <sys_clock_elapsed+0x10>)
    e088:	681b      	ldr	r3, [r3, #0]
}
    e08a:	1ac0      	subs	r0, r0, r3
    e08c:	bd08      	pop	{r3, pc}
    e08e:	bf00      	nop
    e090:	20008790 	.word	0x20008790

0000e094 <nrf_gpio_pin_clear>:
        case 1: return NRF_P1;
    e094:	4a05      	ldr	r2, [pc, #20]	; (e0ac <nrf_gpio_pin_clear+0x18>)
    e096:	4b06      	ldr	r3, [pc, #24]	; (e0b0 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
    e098:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    e09c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    e09e:	2801      	cmp	r0, #1
    e0a0:	bf08      	it	eq
    e0a2:	4613      	moveq	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e0a4:	2201      	movs	r2, #1
    e0a6:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    e0a8:	60da      	str	r2, [r3, #12]
}
    e0aa:	4770      	bx	lr
    e0ac:	40842800 	.word	0x40842800
    e0b0:	40842500 	.word	0x40842500

0000e0b4 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    e0b4:	b570      	push	{r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    e0b6:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e0ba:	2c00      	cmp	r4, #0
        case 1: return NRF_P1;
    e0bc:	4e0e      	ldr	r6, [pc, #56]	; (e0f8 <nrf_pin_configure+0x44>)
    e0be:	bf0e      	itee	eq
    e0c0:	4615      	moveq	r5, r2
    e0c2:	2501      	movne	r5, #1
    e0c4:	2100      	movne	r1, #0
    e0c6:	f010 0f20 	tst.w	r0, #32
    *p_pin = pin_number & 0x1F;
    e0ca:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    e0ce:	f3c0 1281 	ubfx	r2, r0, #6, #2
        case 1: return NRF_P1;
    e0d2:	480a      	ldr	r0, [pc, #40]	; (e0fc <nrf_pin_configure+0x48>)
    e0d4:	bf18      	it	ne
    e0d6:	4630      	movne	r0, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    e0d8:	021b      	lsls	r3, r3, #8
    e0da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    e0de:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e0e2:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    e0e6:	430a      	orrs	r2, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    e0e8:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e0ec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    e0f0:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
    e0f2:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
		     NRF_GPIO_PIN_NOSENSE);
}
    e0f6:	bd70      	pop	{r4, r5, r6, pc}
    e0f8:	40842800 	.word	0x40842800
    e0fc:	40842500 	.word	0x40842500

0000e100 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    e100:	4a05      	ldr	r2, [pc, #20]	; (e118 <nrf_gpio_pin_set+0x18>)
    e102:	4b06      	ldr	r3, [pc, #24]	; (e11c <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    e104:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    e108:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    e10a:	2801      	cmp	r0, #1
    e10c:	bf08      	it	eq
    e10e:	4613      	moveq	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e110:	2201      	movs	r2, #1
    e112:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    e114:	609a      	str	r2, [r3, #8]
}
    e116:	4770      	bx	lr
    e118:	40842800 	.word	0x40842800
    e11c:	40842500 	.word	0x40842500

0000e120 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
    e120:	b530      	push	{r4, r5, lr}
    e122:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    e124:	6902      	ldr	r2, [r0, #16]
{
    e126:	b0a9      	sub	sp, #164	; 0xa4

	data->dev = dev;
    e128:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    e12c:	4926      	ldr	r1, [pc, #152]	; (e1c8 <mbox_nrf_init+0xa8>)
    e12e:	2000      	movs	r0, #0
    e130:	f000 fedc 	bl	eeec <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e134:	2200      	movs	r2, #0
    e136:	2101      	movs	r1, #1
    e138:	202a      	movs	r0, #42	; 0x2a
    e13a:	f7fd f959 	bl	b3f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    e13e:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    e140:	2284      	movs	r2, #132	; 0x84
    e142:	2100      	movs	r1, #0
    e144:	a807      	add	r0, sp, #28
    e146:	f004 f90b 	bl	12360 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    e14a:	6863      	ldr	r3, [r4, #4]
    e14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e150:	d30a      	bcc.n	e168 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    e152:	4b1e      	ldr	r3, [pc, #120]	; (e1cc <mbox_nrf_init+0xac>)
    e154:	9305      	str	r3, [sp, #20]
    e156:	2302      	movs	r3, #2
    e158:	9304      	str	r3, [sp, #16]
    e15a:	2300      	movs	r3, #0
    e15c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e160:	481b      	ldr	r0, [pc, #108]	; (e1d0 <mbox_nrf_init+0xb0>)
    e162:	aa04      	add	r2, sp, #16
    e164:	f7fb fdb4 	bl	9cd0 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    e168:	6823      	ldr	r3, [r4, #0]
    e16a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e16e:	d30a      	bcc.n	e186 <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    e170:	4b18      	ldr	r3, [pc, #96]	; (e1d4 <mbox_nrf_init+0xb4>)
    e172:	9305      	str	r3, [sp, #20]
    e174:	2302      	movs	r3, #2
    e176:	9304      	str	r3, [sp, #16]
    e178:	2300      	movs	r3, #0
    e17a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e17e:	4814      	ldr	r0, [pc, #80]	; (e1d0 <mbox_nrf_init+0xb0>)
    e180:	aa04      	add	r2, sp, #16
    e182:	f7fb fda5 	bl	9cd0 <z_impl_z_log_msg_static_create>
		if (conf->rx_mask & BIT(ch)) {
    e186:	e9d4 4000 	ldrd	r4, r0, [r4]
	ch_config.receive_events_enabled = 0;
    e18a:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
    e18c:	2101      	movs	r1, #1
	ch_config.receive_events_enabled = 0;
    e18e:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    e190:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
    e192:	fa20 f503 	lsr.w	r5, r0, r3
    e196:	07ed      	lsls	r5, r5, #31
			ch_config.send_task_config[ch] = BIT(ch);
    e198:	bf44      	itt	mi
    e19a:	fa01 f503 	lslmi.w	r5, r1, r3
    e19e:	6015      	strmi	r5, [r2, #0]
		if (conf->rx_mask & BIT(ch)) {
    e1a0:	fa24 f503 	lsr.w	r5, r4, r3
    e1a4:	07ed      	lsls	r5, r5, #31
			ch_config.receive_event_config[ch] = BIT(ch);
    e1a6:	bf48      	it	mi
    e1a8:	fa01 f503 	lslmi.w	r5, r1, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    e1ac:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
    e1b0:	bf48      	it	mi
    e1b2:	6415      	strmi	r5, [r2, #64]	; 0x40
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    e1b4:	2b10      	cmp	r3, #16
    e1b6:	f102 0204 	add.w	r2, r2, #4
    e1ba:	d1ea      	bne.n	e192 <mbox_nrf_init+0x72>
	nrfx_ipc_config_load(&ch_config);
    e1bc:	a807      	add	r0, sp, #28
    e1be:	f000 fead 	bl	ef1c <nrfx_ipc_config_load>

	return 0;
}
    e1c2:	2000      	movs	r0, #0
    e1c4:	b029      	add	sp, #164	; 0xa4
    e1c6:	bd30      	pop	{r4, r5, pc}
    e1c8:	0000e2d1 	.word	0x0000e2d1
    e1cc:	0001466e 	.word	0x0001466e
    e1d0:	0001355c 	.word	0x0001355c
    e1d4:	0001469a 	.word	0x0001469a

0000e1d8 <mbox_nrf_set_enabled>:
{
    e1d8:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    e1da:	290f      	cmp	r1, #15
{
    e1dc:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    e1de:	6905      	ldr	r5, [r0, #16]
{
    e1e0:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    e1e2:	d836      	bhi.n	e252 <mbox_nrf_set_enabled+0x7a>
    e1e4:	6843      	ldr	r3, [r0, #4]
    e1e6:	681b      	ldr	r3, [r3, #0]
    e1e8:	40cb      	lsrs	r3, r1
    e1ea:	07db      	lsls	r3, r3, #31
    e1ec:	d531      	bpl.n	e252 <mbox_nrf_set_enabled+0x7a>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    e1ee:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    e1f2:	40cb      	lsrs	r3, r1
    e1f4:	f003 0301 	and.w	r3, r3, #1
    e1f8:	b91a      	cbnz	r2, e202 <mbox_nrf_set_enabled+0x2a>
    e1fa:	bb73      	cbnz	r3, e25a <mbox_nrf_set_enabled+0x82>
		return -EALREADY;
    e1fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e200:	e029      	b.n	e256 <mbox_nrf_set_enabled+0x7e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    e202:	2b00      	cmp	r3, #0
    e204:	d1fa      	bne.n	e1fc <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
    e206:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    e20a:	b94b      	cbnz	r3, e220 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
    e20c:	4a19      	ldr	r2, [pc, #100]	; (e274 <mbox_nrf_set_enabled+0x9c>)
    e20e:	9205      	str	r2, [sp, #20]
    e210:	2202      	movs	r2, #2
    e212:	9204      	str	r2, [sp, #16]
    e214:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e218:	4817      	ldr	r0, [pc, #92]	; (e278 <mbox_nrf_set_enabled+0xa0>)
    e21a:	aa04      	add	r2, sp, #16
    e21c:	f7fb fd58 	bl	9cd0 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
    e220:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    e224:	b913      	cbnz	r3, e22c <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
    e226:	202a      	movs	r0, #42	; 0x2a
    e228:	f7fd f8b0 	bl	b38c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
    e22c:	2301      	movs	r3, #1
    e22e:	fa03 f204 	lsl.w	r2, r3, r4
    e232:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    e236:	4313      	orrs	r3, r2
    e238:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    e23c:	b2e0      	uxtb	r0, r4
    e23e:	f000 fe8d 	bl	ef5c <nrfx_ipc_receive_event_enable>
	if (data->enabled_mask == 0) {
    e242:	f8d5 4084 	ldr.w	r4, [r5, #132]	; 0x84
    e246:	b914      	cbnz	r4, e24e <mbox_nrf_set_enabled+0x76>
		irq_disable(DT_INST_IRQN(0));
    e248:	202a      	movs	r0, #42	; 0x2a
    e24a:	f7fd f8af 	bl	b3ac <arch_irq_disable>
	return 0;
    e24e:	2000      	movs	r0, #0
    e250:	e001      	b.n	e256 <mbox_nrf_set_enabled+0x7e>
		return -EINVAL;
    e252:	f06f 0015 	mvn.w	r0, #21
}
    e256:	b007      	add	sp, #28
    e258:	bd30      	pop	{r4, r5, pc}
		nrfx_ipc_receive_event_disable(channel);
    e25a:	b2c8      	uxtb	r0, r1
    e25c:	f000 fe86 	bl	ef6c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
    e260:	2301      	movs	r3, #1
    e262:	fa03 f404 	lsl.w	r4, r3, r4
    e266:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    e26a:	ea23 0304 	bic.w	r3, r3, r4
    e26e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    e272:	e7e6      	b.n	e242 <mbox_nrf_set_enabled+0x6a>
    e274:	000146c6 	.word	0x000146c6
    e278:	0001355c 	.word	0x0001355c

0000e27c <mbox_nrf_send>:
{
    e27c:	b530      	push	{r4, r5, lr}
    e27e:	4605      	mov	r5, r0
    e280:	460c      	mov	r4, r1
    e282:	b087      	sub	sp, #28
	if (msg) {
    e284:	b152      	cbz	r2, e29c <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
    e286:	4b10      	ldr	r3, [pc, #64]	; (e2c8 <mbox_nrf_send+0x4c>)
    e288:	9305      	str	r3, [sp, #20]
    e28a:	2302      	movs	r3, #2
    e28c:	9304      	str	r3, [sp, #16]
    e28e:	2300      	movs	r3, #0
    e290:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e294:	480d      	ldr	r0, [pc, #52]	; (e2cc <mbox_nrf_send+0x50>)
    e296:	aa04      	add	r2, sp, #16
    e298:	f7fb fd1a 	bl	9cd0 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    e29c:	2c0f      	cmp	r4, #15
    e29e:	d80f      	bhi.n	e2c0 <mbox_nrf_send+0x44>
    e2a0:	686b      	ldr	r3, [r5, #4]
    e2a2:	685b      	ldr	r3, [r3, #4]
    e2a4:	40e3      	lsrs	r3, r4
    e2a6:	07db      	lsls	r3, r3, #31
    e2a8:	d50a      	bpl.n	e2c0 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e2aa:	2301      	movs	r3, #1
	return 0;
    e2ac:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e2ae:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e2b0:	b2e4      	uxtb	r4, r4
    e2b2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    e2b6:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
    e2ba:	6023      	str	r3, [r4, #0]
}
    e2bc:	b007      	add	sp, #28
    e2be:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    e2c0:	f06f 0015 	mvn.w	r0, #21
    e2c4:	e7fa      	b.n	e2bc <mbox_nrf_send+0x40>
    e2c6:	bf00      	nop
    e2c8:	000146f6 	.word	0x000146f6
    e2cc:	0001355c 	.word	0x0001355c

0000e2d0 <mbox_dispatcher>:
{
    e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2d4:	4605      	mov	r5, r0
    e2d6:	460e      	mov	r6, r1
	const struct device *dev = data->dev;
    e2d8:	f8d1 7080 	ldr.w	r7, [r1, #128]	; 0x80
			LOG_WRN("RX event on illegal channel");
    e2dc:	f8df 9088 	ldr.w	r9, [pc, #136]	; e368 <mbox_dispatcher+0x98>
    e2e0:	f8df 8088 	ldr.w	r8, [pc, #136]	; e36c <mbox_dispatcher+0x9c>
			LOG_WRN("RX event on disabled channel");
    e2e4:	f8df a088 	ldr.w	sl, [pc, #136]	; e370 <mbox_dispatcher+0xa0>
{
    e2e8:	b087      	sub	sp, #28
	while (event_mask) {
    e2ea:	b915      	cbnz	r5, e2f2 <mbox_dispatcher+0x22>
}
    e2ec:	b007      	add	sp, #28
    e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    e2f2:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    e2f6:	b3a4      	cbz	r4, e362 <mbox_dispatcher+0x92>
  return __builtin_clz(value);
    e2f8:	fab4 f484 	clz	r4, r4
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    e2fc:	2c0f      	cmp	r4, #15
    e2fe:	dc04      	bgt.n	e30a <mbox_dispatcher+0x3a>
    e300:	687b      	ldr	r3, [r7, #4]
    e302:	681b      	ldr	r3, [r3, #0]
    e304:	40e3      	lsrs	r3, r4
    e306:	07db      	lsls	r3, r3, #31
    e308:	d40a      	bmi.n	e320 <mbox_dispatcher+0x50>
			LOG_WRN("RX event on illegal channel");
    e30a:	2302      	movs	r3, #2
    e30c:	f8cd 9014 	str.w	r9, [sp, #20]
    e310:	9304      	str	r3, [sp, #16]
    e312:	2300      	movs	r3, #0
    e314:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e318:	4640      	mov	r0, r8
    e31a:	aa04      	add	r2, sp, #16
    e31c:	f7fb fcd8 	bl	9cd0 <z_impl_z_log_msg_static_create>
		if (!(data->enabled_mask & BIT(channel))) {
    e320:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    e324:	40e3      	lsrs	r3, r4
    e326:	f013 0301 	ands.w	r3, r3, #1
    e32a:	d109      	bne.n	e340 <mbox_dispatcher+0x70>
			LOG_WRN("RX event on disabled channel");
    e32c:	2202      	movs	r2, #2
    e32e:	f8cd a014 	str.w	sl, [sp, #20]
    e332:	9204      	str	r2, [sp, #16]
    e334:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e338:	4640      	mov	r0, r8
    e33a:	aa04      	add	r2, sp, #16
    e33c:	f7fb fcc8 	bl	9cd0 <z_impl_z_log_msg_static_create>
		event_mask &= ~BIT(channel);
    e340:	2301      	movs	r3, #1
		if (data->cb[channel] != NULL) {
    e342:	f856 b024 	ldr.w	fp, [r6, r4, lsl #2]
		event_mask &= ~BIT(channel);
    e346:	40a3      	lsls	r3, r4
    e348:	ea25 0503 	bic.w	r5, r5, r3
		if (data->cb[channel] != NULL) {
    e34c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
    e350:	f1bb 0f00 	cmp.w	fp, #0
    e354:	d0c9      	beq.n	e2ea <mbox_dispatcher+0x1a>
			data->cb[channel](dev, channel, data->user_data[channel], NULL);
    e356:	2300      	movs	r3, #0
    e358:	4621      	mov	r1, r4
    e35a:	4638      	mov	r0, r7
    e35c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    e35e:	47d8      	blx	fp
    e360:	e7c3      	b.n	e2ea <mbox_dispatcher+0x1a>
		uint32_t channel = __CLZ(__RBIT(event_mask));
    e362:	2420      	movs	r4, #32
    e364:	e7d1      	b.n	e30a <mbox_dispatcher+0x3a>
    e366:	bf00      	nop
    e368:	00014711 	.word	0x00014711
    e36c:	0001355c 	.word	0x0001355c
    e370:	0001472d 	.word	0x0001472d

0000e374 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    e374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    e376:	f7fb fbc7 	bl	9b08 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    e37a:	4b07      	ldr	r3, [pc, #28]	; (e398 <k_sys_fatal_error_handler+0x24>)
    e37c:	9305      	str	r3, [sp, #20]
    e37e:	2302      	movs	r3, #2
    e380:	9304      	str	r3, [sp, #16]
    e382:	4806      	ldr	r0, [pc, #24]	; (e39c <k_sys_fatal_error_handler+0x28>)
    e384:	2300      	movs	r3, #0
    e386:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e38a:	aa04      	add	r2, sp, #16
    e38c:	f7fb fca0 	bl	9cd0 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    e390:	2000      	movs	r0, #0
    e392:	f7fd fc45 	bl	bc20 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    e396:	bf00      	nop
    e398:	00014763 	.word	0x00014763
    e39c:	0001353c 	.word	0x0001353c

0000e3a0 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    e3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3a4:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    e3a6:	4b15      	ldr	r3, [pc, #84]	; (e3fc <tfm_ns_interface_dispatch+0x5c>)
    e3a8:	4604      	mov	r4, r0
    e3aa:	f893 8000 	ldrb.w	r8, [r3]
    e3ae:	460d      	mov	r5, r1
    e3b0:	4616      	mov	r6, r2
    e3b2:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
    e3b4:	f1b8 0f00 	cmp.w	r8, #0
    e3b8:	d115      	bne.n	e3e6 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    e3ba:	4668      	mov	r0, sp
    e3bc:	f003 ff81 	bl	122c2 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    e3c0:	463a      	mov	r2, r7
    e3c2:	4631      	mov	r1, r6
    e3c4:	4628      	mov	r0, r5
    e3c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e3c8:	47a0      	blx	r4
    e3ca:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    e3cc:	4668      	mov	r0, sp
    e3ce:	f003 ff79 	bl	122c4 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    e3d2:	f1b8 0f00 	cmp.w	r8, #0
    e3d6:	d002      	beq.n	e3de <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    e3d8:	4809      	ldr	r0, [pc, #36]	; (e400 <tfm_ns_interface_dispatch+0x60>)
    e3da:	f002 f8c3 	bl	10564 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    e3de:	4620      	mov	r0, r4
    e3e0:	b022      	add	sp, #136	; 0x88
    e3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    e3e6:	f04f 32ff 	mov.w	r2, #4294967295
    e3ea:	f04f 33ff 	mov.w	r3, #4294967295
    e3ee:	4804      	ldr	r0, [pc, #16]	; (e400 <tfm_ns_interface_dispatch+0x60>)
    e3f0:	f002 f840 	bl	10474 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    e3f4:	2800      	cmp	r0, #0
    e3f6:	d0e0      	beq.n	e3ba <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    e3f8:	241f      	movs	r4, #31
    e3fa:	e7f0      	b.n	e3de <tfm_ns_interface_dispatch+0x3e>
    e3fc:	200098c4 	.word	0x200098c4
    e400:	20008100 	.word	0x20008100

0000e404 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    e404:	b530      	push	{r4, r5, lr}
    e406:	b095      	sub	sp, #84	; 0x54
    e408:	4605      	mov	r5, r0
    e40a:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
    e40c:	2230      	movs	r2, #48	; 0x30
    e40e:	2100      	movs	r1, #0
    e410:	a808      	add	r0, sp, #32
    e412:	f003 ffa5 	bl	12360 <memset>
    e416:	233f      	movs	r3, #63	; 0x3f
    e418:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
    e41a:	ab07      	add	r3, sp, #28
    e41c:	9303      	str	r3, [sp, #12]
    e41e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    e420:	9406      	str	r4, [sp, #24]
    e422:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    e426:	b154      	cbz	r4, e43e <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
    e428:	2301      	movs	r3, #1
    e42a:	aa05      	add	r2, sp, #20
    e42c:	9200      	str	r2, [sp, #0]
    e42e:	2100      	movs	r1, #0
    e430:	4804      	ldr	r0, [pc, #16]	; (e444 <psa_generate_random+0x40>)
    e432:	9301      	str	r3, [sp, #4]
    e434:	aa03      	add	r2, sp, #12
    e436:	f000 f807 	bl	e448 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
    e43a:	b015      	add	sp, #84	; 0x54
    e43c:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
    e43e:	4620      	mov	r0, r4
    e440:	e7fb      	b.n	e43a <psa_generate_random+0x36>
    e442:	bf00      	nop
    e444:	40000100 	.word	0x40000100

0000e448 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    e448:	b470      	push	{r4, r5, r6}
    e44a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
    e44e:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
    e452:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    e456:	d20d      	bcs.n	e474 <psa_call+0x2c>
        (type < INT16_MIN) ||
    e458:	2bff      	cmp	r3, #255	; 0xff
    e45a:	d80b      	bhi.n	e474 <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
    e45c:	2cff      	cmp	r4, #255	; 0xff
    e45e:	d809      	bhi.n	e474 <psa_call+0x2c>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    e460:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    e464:	4613      	mov	r3, r2
    e466:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    e46a:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    e46c:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
    e46e:	4803      	ldr	r0, [pc, #12]	; (e47c <psa_call+0x34>)
    e470:	f7ff bf96 	b.w	e3a0 <tfm_ns_interface_dispatch>
}
    e474:	f06f 0080 	mvn.w	r0, #128	; 0x80
    e478:	bc70      	pop	{r4, r5, r6}
    e47a:	4770      	bx	lr
    e47c:	00007c21 	.word	0x00007c21

0000e480 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
    e480:	2300      	movs	r3, #0
{
    e482:	b507      	push	{r0, r1, r2, lr}
    e484:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
    e486:	9300      	str	r3, [sp, #0]
    e488:	4601      	mov	r1, r0
    e48a:	4803      	ldr	r0, [pc, #12]	; (e498 <psa_connect+0x18>)
    e48c:	f7ff ff88 	bl	e3a0 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
    e490:	b003      	add	sp, #12
    e492:	f85d fb04 	ldr.w	pc, [sp], #4
    e496:	bf00      	nop
    e498:	00007c19 	.word	0x00007c19

0000e49c <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
    e49c:	2300      	movs	r3, #0
{
    e49e:	b507      	push	{r0, r1, r2, lr}
    e4a0:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
    e4a2:	461a      	mov	r2, r3
    e4a4:	9300      	str	r3, [sp, #0]
    e4a6:	4803      	ldr	r0, [pc, #12]	; (e4b4 <psa_close+0x18>)
    e4a8:	f7ff ff7a 	bl	e3a0 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
    e4ac:	b003      	add	sp, #12
    e4ae:	f85d fb04 	ldr.w	pc, [sp], #4
    e4b2:	bf00      	nop
    e4b4:	00007c11 	.word	0x00007c11

0000e4b8 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    e4b8:	4b04      	ldr	r3, [pc, #16]	; (e4cc <SystemCoreClockUpdate+0x14>)
    e4ba:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    e4be:	4b04      	ldr	r3, [pc, #16]	; (e4d0 <SystemCoreClockUpdate+0x18>)
    e4c0:	f002 0203 	and.w	r2, r2, #3
    e4c4:	40d3      	lsrs	r3, r2
    e4c6:	4a03      	ldr	r2, [pc, #12]	; (e4d4 <SystemCoreClockUpdate+0x1c>)
    e4c8:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
    e4ca:	4770      	bx	lr
    e4cc:	40005000 	.word	0x40005000
    e4d0:	07a12000 	.word	0x07a12000
    e4d4:	2000803c 	.word	0x2000803c

0000e4d8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    e4d8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    e4da:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    e4dc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    e4de:	fab2 f382 	clz	r3, r2
    e4e2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    e4e6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    e4e8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    e4ea:	d010      	beq.n	e50e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    e4ec:	fa05 f303 	lsl.w	r3, r5, r3
    e4f0:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e4f4:	e8d0 6fef 	ldaex	r6, [r0]
    e4f8:	4296      	cmp	r6, r2
    e4fa:	d104      	bne.n	e506 <nrfx_flag32_alloc+0x2e>
    e4fc:	e8c0 3fec 	stlex	ip, r3, [r0]
    e500:	f1bc 0f00 	cmp.w	ip, #0
    e504:	d1f6      	bne.n	e4f4 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    e506:	d1e9      	bne.n	e4dc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    e508:	4802      	ldr	r0, [pc, #8]	; (e514 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    e50a:	700c      	strb	r4, [r1, #0]
}
    e50c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    e50e:	4802      	ldr	r0, [pc, #8]	; (e518 <nrfx_flag32_alloc+0x40>)
    e510:	e7fc      	b.n	e50c <nrfx_flag32_alloc+0x34>
    e512:	bf00      	nop
    e514:	0bad0000 	.word	0x0bad0000
    e518:	0bad0002 	.word	0x0bad0002

0000e51c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    e51c:	6803      	ldr	r3, [r0, #0]
{
    e51e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    e520:	40cb      	lsrs	r3, r1
    e522:	07db      	lsls	r3, r3, #31
    e524:	d411      	bmi.n	e54a <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    e526:	2301      	movs	r3, #1
    e528:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    e52c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    e52e:	ea41 0203 	orr.w	r2, r1, r3
    e532:	e8d0 4fef 	ldaex	r4, [r0]
    e536:	429c      	cmp	r4, r3
    e538:	d104      	bne.n	e544 <nrfx_flag32_free+0x28>
    e53a:	e8c0 2fec 	stlex	ip, r2, [r0]
    e53e:	f1bc 0f00 	cmp.w	ip, #0
    e542:	d1f6      	bne.n	e532 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    e544:	d1f2      	bne.n	e52c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    e546:	4802      	ldr	r0, [pc, #8]	; (e550 <nrfx_flag32_free+0x34>)
}
    e548:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    e54a:	4802      	ldr	r0, [pc, #8]	; (e554 <nrfx_flag32_free+0x38>)
    e54c:	e7fc      	b.n	e548 <nrfx_flag32_free+0x2c>
    e54e:	bf00      	nop
    e550:	0bad0000 	.word	0x0bad0000
    e554:	0bad0004 	.word	0x0bad0004

0000e558 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    e558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e55a:	4605      	mov	r5, r0
    switch (domain)
    e55c:	2803      	cmp	r0, #3
    e55e:	d86f      	bhi.n	e640 <clock_stop+0xe8>
    e560:	e8df f000 	tbb	[pc, r0]
    e564:	372a1f02 	.word	0x372a1f02
    p_reg->INTENCLR = mask;
    e568:	2202      	movs	r2, #2
    e56a:	4b36      	ldr	r3, [pc, #216]	; (e644 <clock_stop+0xec>)
    e56c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e570:	2200      	movs	r2, #0
    e572:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e576:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e57a:	2201      	movs	r2, #1
    e57c:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    e57e:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    e580:	429d      	cmp	r5, r3
    e582:	bf18      	it	ne
    e584:	2400      	movne	r4, #0
    e586:	f242 7710 	movw	r7, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    e58a:	4e2e      	ldr	r6, [pc, #184]	; (e644 <clock_stop+0xec>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    e58c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    e590:	bf08      	it	eq
    e592:	f10d 0407 	addeq.w	r4, sp, #7
    switch (domain)
    e596:	2d03      	cmp	r5, #3
    e598:	d852      	bhi.n	e640 <clock_stop+0xe8>
    e59a:	e8df f005 	tbb	[pc, r5]
    e59e:	3827      	.short	0x3827
    e5a0:	4a41      	.short	0x4a41
    p_reg->INTENCLR = mask;
    e5a2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5a4:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    e5a6:	4b27      	ldr	r3, [pc, #156]	; (e644 <clock_stop+0xec>)
    e5a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5ac:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    e5b0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5b4:	605a      	str	r2, [r3, #4]
}
    e5b6:	e7e2      	b.n	e57e <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    e5b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    e5bc:	4b21      	ldr	r3, [pc, #132]	; (e644 <clock_stop+0xec>)
    e5be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5c2:	2200      	movs	r2, #0
    e5c4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    e5c8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5cc:	2201      	movs	r2, #1
    e5ce:	625a      	str	r2, [r3, #36]	; 0x24
}
    e5d0:	e7d5      	b.n	e57e <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    e5d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    e5d6:	4b1b      	ldr	r3, [pc, #108]	; (e644 <clock_stop+0xec>)
    e5d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5dc:	2200      	movs	r2, #0
    e5de:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e5e2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5e6:	2201      	movs	r2, #1
    e5e8:	61da      	str	r2, [r3, #28]
}
    e5ea:	e7c8      	b.n	e57e <clock_stop+0x26>
            if (p_clk_src != NULL)
    e5ec:	b124      	cbz	r4, e5f8 <clock_stop+0xa0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e5ee:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    e5f2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    e5f6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e5f8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    e5fc:	03db      	lsls	r3, r3, #15
    e5fe:	d51f      	bpl.n	e640 <clock_stop+0xe8>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    e600:	b9d4      	cbnz	r4, e638 <clock_stop+0xe0>
    e602:	2001      	movs	r0, #1
    e604:	f004 f9a8 	bl	12958 <nrfx_busy_wait>
    e608:	3f01      	subs	r7, #1
    e60a:	d1c4      	bne.n	e596 <clock_stop+0x3e>
    e60c:	e018      	b.n	e640 <clock_stop+0xe8>
            if (p_clk_src != NULL)
    e60e:	b124      	cbz	r4, e61a <clock_stop+0xc2>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e610:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    e614:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    e618:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e61a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    e61e:	e7ed      	b.n	e5fc <clock_stop+0xa4>
            if (p_clk_src != NULL)
    e620:	b124      	cbz	r4, e62c <clock_stop+0xd4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    e622:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    e626:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    e62a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    e62c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    e630:	e7e4      	b.n	e5fc <clock_stop+0xa4>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    e632:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    e636:	e7e1      	b.n	e5fc <clock_stop+0xa4>
    e638:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e63c:	2b01      	cmp	r3, #1
    e63e:	d0e0      	beq.n	e602 <clock_stop+0xaa>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    e640:	b003      	add	sp, #12
    e642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e644:	40005000 	.word	0x40005000

0000e648 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    e648:	4b04      	ldr	r3, [pc, #16]	; (e65c <nrfx_clock_init+0x14>)
    e64a:	791a      	ldrb	r2, [r3, #4]
    e64c:	b922      	cbnz	r2, e658 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    e64e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    e650:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    e652:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    e654:	4802      	ldr	r0, [pc, #8]	; (e660 <nrfx_clock_init+0x18>)
    e656:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    e658:	4802      	ldr	r0, [pc, #8]	; (e664 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e65a:	4770      	bx	lr
    e65c:	200095f4 	.word	0x200095f4
    e660:	0bad0000 	.word	0x0bad0000
    e664:	0bad000c 	.word	0x0bad000c

0000e668 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    e668:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    e66a:	2005      	movs	r0, #5
    e66c:	f7fc feb2 	bl	b3d4 <arch_irq_is_enabled>
    e670:	b910      	cbnz	r0, e678 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    e672:	2005      	movs	r0, #5
    e674:	f7fc fe8a 	bl	b38c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e678:	2301      	movs	r3, #1
    e67a:	4a05      	ldr	r2, [pc, #20]	; (e690 <nrfx_clock_enable+0x28>)
    e67c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    e680:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    e684:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    e688:	4a02      	ldr	r2, [pc, #8]	; (e694 <nrfx_clock_enable+0x2c>)
    e68a:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    e68c:	bd08      	pop	{r3, pc}
    e68e:	bf00      	nop
    e690:	40005000 	.word	0x40005000
    e694:	200098be 	.word	0x200098be

0000e698 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    e698:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    e69a:	2803      	cmp	r0, #3
    e69c:	d81c      	bhi.n	e6d8 <nrfx_clock_start+0x40>
    e69e:	e8df f000 	tbb	[pc, r0]
    e6a2:	3102      	.short	0x3102
    e6a4:	493c      	.short	0x493c
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e6a6:	4a2a      	ldr	r2, [pc, #168]	; (e750 <nrfx_clock_start+0xb8>)
    e6a8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e6ac:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    e6b0:	03c9      	lsls	r1, r1, #15
    e6b2:	d412      	bmi.n	e6da <nrfx_clock_start+0x42>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    e6b4:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    e6b8:	07db      	lsls	r3, r3, #31
    e6ba:	d418      	bmi.n	e6ee <nrfx_clock_start+0x56>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    e6bc:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    e6be:	4a24      	ldr	r2, [pc, #144]	; (e750 <nrfx_clock_start+0xb8>)
    e6c0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e6c4:	2300      	movs	r3, #0
    e6c6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    e6ca:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    e6ce:	2302      	movs	r3, #2
    e6d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e6d4:	2301      	movs	r3, #1
    e6d6:	6093      	str	r3, [r2, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    e6d8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e6da:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    e6de:	2b02      	cmp	r3, #2
    e6e0:	d0ed      	beq.n	e6be <nrfx_clock_start+0x26>
    if (!is_correct_clk)
    e6e2:	2b01      	cmp	r3, #1
    e6e4:	d0eb      	beq.n	e6be <nrfx_clock_start+0x26>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e6e6:	2000      	movs	r0, #0
    e6e8:	f7ff ff36 	bl	e558 <clock_stop>
    e6ec:	e7e6      	b.n	e6bc <nrfx_clock_start+0x24>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    e6ee:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    e6f2:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    e6f6:	3b01      	subs	r3, #1
    e6f8:	2b01      	cmp	r3, #1
    e6fa:	d8f4      	bhi.n	e6e6 <nrfx_clock_start+0x4e>
    p_reg->INTENSET = mask;
    e6fc:	2302      	movs	r3, #2
    e6fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    e702:	e7e9      	b.n	e6d8 <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e704:	2200      	movs	r2, #0
    e706:	4b12      	ldr	r3, [pc, #72]	; (e750 <nrfx_clock_start+0xb8>)
    e708:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e70c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e710:	2201      	movs	r2, #1
    e712:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e716:	601a      	str	r2, [r3, #0]
}
    e718:	e7de      	b.n	e6d8 <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e71a:	2200      	movs	r2, #0
    e71c:	4b0c      	ldr	r3, [pc, #48]	; (e750 <nrfx_clock_start+0xb8>)
    e71e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    e722:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    e726:	f44f 7200 	mov.w	r2, #512	; 0x200
    e72a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e72e:	2201      	movs	r2, #1
    e730:	621a      	str	r2, [r3, #32]
}
    e732:	e7d1      	b.n	e6d8 <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e734:	2200      	movs	r2, #0
    e736:	4b06      	ldr	r3, [pc, #24]	; (e750 <nrfx_clock_start+0xb8>)
    e738:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e73c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    e740:	f44f 7280 	mov.w	r2, #256	; 0x100
    e744:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e748:	2201      	movs	r2, #1
    e74a:	619a      	str	r2, [r3, #24]
}
    e74c:	e7c4      	b.n	e6d8 <nrfx_clock_start+0x40>
    e74e:	bf00      	nop
    e750:	40005000 	.word	0x40005000

0000e754 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e754:	4b28      	ldr	r3, [pc, #160]	; (e7f8 <nrfx_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    e756:	b510      	push	{r4, lr}
    e758:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    e75c:	b152      	cbz	r2, e774 <nrfx_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e75e:	2000      	movs	r0, #0
    e760:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    e764:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    e768:	2201      	movs	r2, #1
    e76a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    e76e:	4b23      	ldr	r3, [pc, #140]	; (e7fc <nrfx_clock_irq_handler+0xa8>)
    e770:	681b      	ldr	r3, [r3, #0]
    e772:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e774:	4b20      	ldr	r3, [pc, #128]	; (e7f8 <nrfx_clock_irq_handler+0xa4>)
    e776:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    e77a:	b18a      	cbz	r2, e7a0 <nrfx_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e77c:	2200      	movs	r2, #0
    e77e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e782:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e786:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e78a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    e78e:	f002 0203 	and.w	r2, r2, #3
    e792:	2a01      	cmp	r2, #1
    e794:	f04f 0102 	mov.w	r1, #2
    e798:	d126      	bne.n	e7e8 <nrfx_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e79a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e79e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e7a0:	4b15      	ldr	r3, [pc, #84]	; (e7f8 <nrfx_clock_irq_handler+0xa4>)
    e7a2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    e7a6:	b162      	cbz	r2, e7c2 <nrfx_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e7a8:	2200      	movs	r2, #0
    e7aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e7ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    e7b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    e7b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    e7ba:	4b10      	ldr	r3, [pc, #64]	; (e7fc <nrfx_clock_irq_handler+0xa8>)
    e7bc:	2004      	movs	r0, #4
    e7be:	681b      	ldr	r3, [r3, #0]
    e7c0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e7c2:	4b0d      	ldr	r3, [pc, #52]	; (e7f8 <nrfx_clock_irq_handler+0xa4>)
    e7c4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    e7c8:	b1aa      	cbz	r2, e7f6 <nrfx_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    e7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e7ce:	2200      	movs	r2, #0
    e7d0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    e7d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    e7d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    e7dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    e7e0:	4b06      	ldr	r3, [pc, #24]	; (e7fc <nrfx_clock_irq_handler+0xa8>)
    e7e2:	2005      	movs	r0, #5
    e7e4:	681b      	ldr	r3, [r3, #0]
    e7e6:	4718      	bx	r3
    e7e8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e7ec:	4b03      	ldr	r3, [pc, #12]	; (e7fc <nrfx_clock_irq_handler+0xa8>)
    e7ee:	2001      	movs	r0, #1
    e7f0:	681b      	ldr	r3, [r3, #0]
    e7f2:	4798      	blx	r3
    e7f4:	e7d4      	b.n	e7a0 <nrfx_clock_irq_handler+0x4c>
}
    e7f6:	bd10      	pop	{r4, pc}
    e7f8:	40005000 	.word	0x40005000
    e7fc:	200095f4 	.word	0x200095f4

0000e800 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    e800:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    e802:	4801      	ldr	r0, [pc, #4]	; (e808 <nrfx_dppi_channel_alloc+0x8>)
    e804:	f7ff be68 	b.w	e4d8 <nrfx_flag32_alloc>
    e808:	20008040 	.word	0x20008040

0000e80c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    e80c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
    e80e:	4a04      	ldr	r2, [pc, #16]	; (e820 <nrfx_dppi_channel_free+0x14>)
    e810:	4083      	lsls	r3, r0
{
    e812:	4601      	mov	r1, r0
    e814:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    e818:	4802      	ldr	r0, [pc, #8]	; (e824 <nrfx_dppi_channel_free+0x18>)
    e81a:	f7ff be7f 	b.w	e51c <nrfx_flag32_free>
    e81e:	bf00      	nop
    e820:	40017000 	.word	0x40017000
    e824:	20008040 	.word	0x20008040

0000e828 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    e828:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    e82a:	f003 021f 	and.w	r2, r3, #31
    e82e:	6002      	str	r2, [r0, #0]
}
    e830:	4a03      	ldr	r2, [pc, #12]	; (e840 <nrf_gpio_pin_port_decode+0x18>)
    e832:	4804      	ldr	r0, [pc, #16]	; (e844 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    e834:	095b      	lsrs	r3, r3, #5
}
    e836:	2b01      	cmp	r3, #1
    e838:	bf08      	it	eq
    e83a:	4610      	moveq	r0, r2
    e83c:	4770      	bx	lr
    e83e:	bf00      	nop
    e840:	40842800 	.word	0x40842800
    e844:	40842500 	.word	0x40842500

0000e848 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e848:	4b03      	ldr	r3, [pc, #12]	; (e858 <pin_in_use_by_te+0x10>)
    e84a:	3008      	adds	r0, #8
    e84c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    e850:	f3c0 1040 	ubfx	r0, r0, #5, #1
    e854:	4770      	bx	lr
    e856:	bf00      	nop
    e858:	20008044 	.word	0x20008044

0000e85c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    e85c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e85e:	4c0d      	ldr	r4, [pc, #52]	; (e894 <call_handler+0x38>)
    e860:	f100 0308 	add.w	r3, r0, #8
    e864:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    e868:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e86a:	05da      	lsls	r2, r3, #23
{
    e86c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e86e:	d507      	bpl.n	e880 <call_handler+0x24>
    e870:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    e874:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    e878:	6852      	ldr	r2, [r2, #4]
    e87a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    e87e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    e880:	68a3      	ldr	r3, [r4, #8]
    e882:	b12b      	cbz	r3, e890 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    e884:	4631      	mov	r1, r6
    e886:	4628      	mov	r0, r5
    e888:	68e2      	ldr	r2, [r4, #12]
    }
}
    e88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    e88e:	4718      	bx	r3
}
    e890:	bd70      	pop	{r4, r5, r6, pc}
    e892:	bf00      	nop
    e894:	20008044 	.word	0x20008044

0000e898 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e898:	4a12      	ldr	r2, [pc, #72]	; (e8e4 <release_handler+0x4c>)
    e89a:	3008      	adds	r0, #8
    e89c:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    e8a0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e8a2:	05d9      	lsls	r1, r3, #23
    e8a4:	d51b      	bpl.n	e8de <release_handler+0x46>
    e8a6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    e8aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    e8ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    e8b2:	2000      	movs	r0, #0
    e8b4:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    e8b8:	f834 3b02 	ldrh.w	r3, [r4], #2
    e8bc:	f413 7f80 	tst.w	r3, #256	; 0x100
    e8c0:	d003      	beq.n	e8ca <release_handler+0x32>
    e8c2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    e8c6:	4299      	cmp	r1, r3
    e8c8:	d009      	beq.n	e8de <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    e8ca:	3001      	adds	r0, #1
    e8cc:	2830      	cmp	r0, #48	; 0x30
    e8ce:	d1f3      	bne.n	e8b8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    e8d0:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    e8d2:	4805      	ldr	r0, [pc, #20]	; (e8e8 <release_handler+0x50>)
}
    e8d4:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    e8d6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    e8da:	f7ff be1f 	b.w	e51c <nrfx_flag32_free>
}
    e8de:	bc10      	pop	{r4}
    e8e0:	4770      	bx	lr
    e8e2:	bf00      	nop
    e8e4:	20008044 	.word	0x20008044
    e8e8:	200080b8 	.word	0x200080b8

0000e8ec <pin_handler_trigger_uninit>:
{
    e8ec:	b538      	push	{r3, r4, r5, lr}
    e8ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    e8f0:	f7ff ffaa 	bl	e848 <pin_in_use_by_te>
    e8f4:	4c0b      	ldr	r4, [pc, #44]	; (e924 <pin_handler_trigger_uninit+0x38>)
    e8f6:	f102 0508 	add.w	r5, r2, #8
    e8fa:	b160      	cbz	r0, e916 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    e8fc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e8fe:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    e902:	0b5b      	lsrs	r3, r3, #13
    e904:	009b      	lsls	r3, r3, #2
    e906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e90a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    e90e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    e912:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    e916:	4610      	mov	r0, r2
    e918:	f7ff ffbe 	bl	e898 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    e91c:	2300      	movs	r3, #0
    e91e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    e922:	bd38      	pop	{r3, r4, r5, pc}
    e924:	20008044 	.word	0x20008044

0000e928 <nrfx_gpiote_input_configure>:
{
    e928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    e92c:	4604      	mov	r4, r0
    e92e:	4616      	mov	r6, r2
    e930:	461d      	mov	r5, r3
    if (p_input_config)
    e932:	b321      	cbz	r1, e97e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e934:	4f4e      	ldr	r7, [pc, #312]	; (ea70 <nrfx_gpiote_input_configure+0x148>)
    e936:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    e93a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    e93e:	079b      	lsls	r3, r3, #30
    e940:	d506      	bpl.n	e950 <nrfx_gpiote_input_configure+0x28>
    e942:	f7ff ff81 	bl	e848 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    e946:	b118      	cbz	r0, e950 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    e948:	484a      	ldr	r0, [pc, #296]	; (ea74 <nrfx_gpiote_input_configure+0x14c>)
}
    e94a:	b004      	add	sp, #16
    e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    e950:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    e952:	4620      	mov	r0, r4
    e954:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    e958:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    e95c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    e960:	f10d 020f 	add.w	r2, sp, #15
    e964:	460b      	mov	r3, r1
    e966:	f10d 010e 	add.w	r1, sp, #14
    e96a:	f003 fff9 	bl	12960 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    e96e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    e972:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    e976:	f043 0301 	orr.w	r3, r3, #1
    e97a:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    e97e:	b196      	cbz	r6, e9a6 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e980:	483b      	ldr	r0, [pc, #236]	; (ea70 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    e982:	7833      	ldrb	r3, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    e984:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e986:	f104 0608 	add.w	r6, r4, #8
    e98a:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        if (pin_is_output(pin))
    e98e:	078f      	lsls	r7, r1, #30
    e990:	d50c      	bpl.n	e9ac <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    e992:	2a00      	cmp	r2, #0
    e994:	d1d8      	bne.n	e948 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    e996:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
    e99a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    e99e:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    e9a2:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (p_handler_config)
    e9a6:	bbcd      	cbnz	r5, ea1c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    e9a8:	4833      	ldr	r0, [pc, #204]	; (ea78 <nrfx_gpiote_input_configure+0x150>)
    e9aa:	e7ce      	b.n	e94a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    e9ac:	f021 0120 	bic.w	r1, r1, #32
    e9b0:	04c9      	lsls	r1, r1, #19
    e9b2:	0cc9      	lsrs	r1, r1, #19
    e9b4:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
    e9b8:	2a00      	cmp	r2, #0
    e9ba:	d0ec      	beq.n	e996 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    e9bc:	2b03      	cmp	r3, #3
    e9be:	d8c3      	bhi.n	e948 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    e9c0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    e9c4:	4662      	mov	r2, ip
    e9c6:	0092      	lsls	r2, r2, #2
    e9c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e9cc:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    e9d0:	b923      	cbnz	r3, e9dc <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
    e9d2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    e9d6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    e9da:	e7dc      	b.n	e996 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    e9dc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    e9e0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    e9e4:	f027 0703 	bic.w	r7, r7, #3
    e9e8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e9ec:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    e9f0:	f041 0120 	orr.w	r1, r1, #32
    e9f4:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
    e9f8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    e9fc:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ea00:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    ea04:	0227      	lsls	r7, r4, #8
    ea06:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
    ea0a:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
    ea0e:	ea47 070e 	orr.w	r7, r7, lr
    ea12:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    ea16:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
    ea1a:	e7bc      	b.n	e996 <nrfx_gpiote_input_configure+0x6e>
    release_handler(pin);
    ea1c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    ea1e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    ea22:	f7ff ff39 	bl	e898 <release_handler>
    if (!handler)
    ea26:	2e00      	cmp	r6, #0
    ea28:	d0be      	beq.n	e9a8 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ea2a:	4d11      	ldr	r5, [pc, #68]	; (ea70 <nrfx_gpiote_input_configure+0x148>)
    ea2c:	682b      	ldr	r3, [r5, #0]
    ea2e:	429e      	cmp	r6, r3
    ea30:	d104      	bne.n	ea3c <nrfx_gpiote_input_configure+0x114>
    ea32:	686b      	ldr	r3, [r5, #4]
    ea34:	429f      	cmp	r7, r3
    ea36:	d101      	bne.n	ea3c <nrfx_gpiote_input_configure+0x114>
    ea38:	2200      	movs	r2, #0
    ea3a:	e00a      	b.n	ea52 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    ea3c:	480f      	ldr	r0, [pc, #60]	; (ea7c <nrfx_gpiote_input_configure+0x154>)
    ea3e:	f10d 010f 	add.w	r1, sp, #15
    ea42:	f7ff fd49 	bl	e4d8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    ea46:	4b0c      	ldr	r3, [pc, #48]	; (ea78 <nrfx_gpiote_input_configure+0x150>)
    ea48:	4298      	cmp	r0, r3
    ea4a:	f47f af7e 	bne.w	e94a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    ea4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    ea52:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    ea56:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    ea58:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    ea5a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    ea5e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    ea62:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    ea66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ea6a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    ea6e:	e79b      	b.n	e9a8 <nrfx_gpiote_input_configure+0x80>
    ea70:	20008044 	.word	0x20008044
    ea74:	0bad0004 	.word	0x0bad0004
    ea78:	0bad0000 	.word	0x0bad0000
    ea7c:	200080b8 	.word	0x200080b8

0000ea80 <nrfx_gpiote_output_configure>:
{
    ea80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea82:	4604      	mov	r4, r0
    ea84:	4615      	mov	r5, r2
    ea86:	b085      	sub	sp, #20
    if (p_config)
    ea88:	b319      	cbz	r1, ead2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ea8a:	4e34      	ldr	r6, [pc, #208]	; (eb5c <nrfx_gpiote_output_configure+0xdc>)
    ea8c:	f100 0708 	add.w	r7, r0, #8
    ea90:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    ea94:	0793      	lsls	r3, r2, #30
    ea96:	d403      	bmi.n	eaa0 <nrfx_gpiote_output_configure+0x20>
    ea98:	f7ff fed6 	bl	e848 <pin_in_use_by_te>
    ea9c:	2800      	cmp	r0, #0
    ea9e:	d15a      	bne.n	eb56 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    eaa0:	f012 0f1c 	tst.w	r2, #28
    eaa4:	d002      	beq.n	eaac <nrfx_gpiote_output_configure+0x2c>
    eaa6:	784b      	ldrb	r3, [r1, #1]
    eaa8:	2b01      	cmp	r3, #1
    eaaa:	d054      	beq.n	eb56 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    eaac:	2301      	movs	r3, #1
    eaae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    eab2:	2300      	movs	r3, #0
    eab4:	1c4a      	adds	r2, r1, #1
    eab6:	e9cd 1300 	strd	r1, r3, [sp]
    eaba:	4620      	mov	r0, r4
    eabc:	1c8b      	adds	r3, r1, #2
    eabe:	f10d 010f 	add.w	r1, sp, #15
    eac2:	f003 ff4d 	bl	12960 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    eac6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    eaca:	f043 0303 	orr.w	r3, r3, #3
    eace:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    ead2:	b915      	cbnz	r5, eada <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    ead4:	4822      	ldr	r0, [pc, #136]	; (eb60 <nrfx_gpiote_output_configure+0xe0>)
}
    ead6:	b005      	add	sp, #20
    ead8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    eada:	4e20      	ldr	r6, [pc, #128]	; (eb5c <nrfx_gpiote_output_configure+0xdc>)
    eadc:	f104 0708 	add.w	r7, r4, #8
    eae0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    eae4:	0783      	lsls	r3, r0, #30
    eae6:	d536      	bpl.n	eb56 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    eae8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    eaec:	2300      	movs	r3, #0
    eaee:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    eaf0:	f020 0020 	bic.w	r0, r0, #32
    eaf4:	0089      	lsls	r1, r1, #2
    eaf6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    eafa:	04c0      	lsls	r0, r0, #19
    eafc:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
    eb00:	0cc0      	lsrs	r0, r0, #19
    eb02:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    eb06:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    eb0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    eb0e:	786a      	ldrb	r2, [r5, #1]
    eb10:	2a00      	cmp	r2, #0
    eb12:	d0df      	beq.n	ead4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    eb14:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    eb18:	78ad      	ldrb	r5, [r5, #2]
    eb1a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    eb1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    eb22:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    eb26:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    eb2a:	0223      	lsls	r3, r4, #8
    eb2c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    eb30:	0412      	lsls	r2, r2, #16
    eb32:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    eb36:	ea43 030e 	orr.w	r3, r3, lr
    eb3a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    eb3c:	052a      	lsls	r2, r5, #20
    eb3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    eb42:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    eb46:	4313      	orrs	r3, r2
    eb48:	f040 0020 	orr.w	r0, r0, #32
    eb4c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    eb50:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    eb54:	e7be      	b.n	ead4 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    eb56:	4803      	ldr	r0, [pc, #12]	; (eb64 <nrfx_gpiote_output_configure+0xe4>)
    eb58:	e7bd      	b.n	ead6 <nrfx_gpiote_output_configure+0x56>
    eb5a:	bf00      	nop
    eb5c:	20008044 	.word	0x20008044
    eb60:	0bad0000 	.word	0x0bad0000
    eb64:	0bad0004 	.word	0x0bad0004

0000eb68 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    eb68:	4b01      	ldr	r3, [pc, #4]	; (eb70 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    eb6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    eb6e:	4770      	bx	lr
    eb70:	20008044 	.word	0x20008044

0000eb74 <nrfx_gpiote_channel_get>:
{
    eb74:	b508      	push	{r3, lr}
    eb76:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    eb78:	f7ff fe66 	bl	e848 <pin_in_use_by_te>
    eb7c:	b138      	cbz	r0, eb8e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    eb7e:	4b05      	ldr	r3, [pc, #20]	; (eb94 <nrfx_gpiote_channel_get+0x20>)
    eb80:	3208      	adds	r2, #8
    eb82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    eb86:	4804      	ldr	r0, [pc, #16]	; (eb98 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    eb88:	0b5b      	lsrs	r3, r3, #13
    eb8a:	700b      	strb	r3, [r1, #0]
}
    eb8c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    eb8e:	4803      	ldr	r0, [pc, #12]	; (eb9c <nrfx_gpiote_channel_get+0x28>)
    eb90:	e7fc      	b.n	eb8c <nrfx_gpiote_channel_get+0x18>
    eb92:	bf00      	nop
    eb94:	20008044 	.word	0x20008044
    eb98:	0bad0000 	.word	0x0bad0000
    eb9c:	0bad0004 	.word	0x0bad0004

0000eba0 <nrfx_gpiote_init>:
{
    eba0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    eba2:	4c0f      	ldr	r4, [pc, #60]	; (ebe0 <nrfx_gpiote_init+0x40>)
    eba4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    eba8:	b9bd      	cbnz	r5, ebda <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    ebaa:	2260      	movs	r2, #96	; 0x60
    ebac:	4629      	mov	r1, r5
    ebae:	f104 0010 	add.w	r0, r4, #16
    ebb2:	f003 fbd5 	bl	12360 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    ebb6:	202f      	movs	r0, #47	; 0x2f
    ebb8:	f7fc fbe8 	bl	b38c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ebbc:	4b09      	ldr	r3, [pc, #36]	; (ebe4 <nrfx_gpiote_init+0x44>)
    return err_code;
    ebbe:	480a      	ldr	r0, [pc, #40]	; (ebe8 <nrfx_gpiote_init+0x48>)
    ebc0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    ebc4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    ebc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ebcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    ebd0:	2301      	movs	r3, #1
    ebd2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    ebd6:	6763      	str	r3, [r4, #116]	; 0x74
}
    ebd8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    ebda:	4804      	ldr	r0, [pc, #16]	; (ebec <nrfx_gpiote_init+0x4c>)
    ebdc:	e7fc      	b.n	ebd8 <nrfx_gpiote_init+0x38>
    ebde:	bf00      	nop
    ebe0:	20008044 	.word	0x20008044
    ebe4:	4002f000 	.word	0x4002f000
    ebe8:	0bad0000 	.word	0x0bad0000
    ebec:	0bad0005 	.word	0x0bad0005

0000ebf0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    ebf0:	4b03      	ldr	r3, [pc, #12]	; (ec00 <nrfx_gpiote_is_init+0x10>)
    ebf2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    ebf6:	3800      	subs	r0, #0
    ebf8:	bf18      	it	ne
    ebfa:	2001      	movne	r0, #1
    ebfc:	4770      	bx	lr
    ebfe:	bf00      	nop
    ec00:	20008044 	.word	0x20008044

0000ec04 <nrfx_gpiote_channel_free>:
{
    ec04:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    ec06:	4801      	ldr	r0, [pc, #4]	; (ec0c <nrfx_gpiote_channel_free+0x8>)
    ec08:	f7ff bc88 	b.w	e51c <nrfx_flag32_free>
    ec0c:	200080b4 	.word	0x200080b4

0000ec10 <nrfx_gpiote_channel_alloc>:
{
    ec10:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    ec12:	4801      	ldr	r0, [pc, #4]	; (ec18 <nrfx_gpiote_channel_alloc+0x8>)
    ec14:	f7ff bc60 	b.w	e4d8 <nrfx_flag32_alloc>
    ec18:	200080b4 	.word	0x200080b4

0000ec1c <nrfx_gpiote_trigger_enable>:
{
    ec1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ec1e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ec20:	f7ff fe12 	bl	e848 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ec24:	4b1d      	ldr	r3, [pc, #116]	; (ec9c <nrfx_gpiote_trigger_enable+0x80>)
    ec26:	f104 0208 	add.w	r2, r4, #8
    ec2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ec2e:	b1d0      	cbz	r0, ec66 <nrfx_gpiote_trigger_enable+0x4a>
    ec30:	f013 0502 	ands.w	r5, r3, #2
    ec34:	d117      	bne.n	ec66 <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
    ec36:	481a      	ldr	r0, [pc, #104]	; (eca0 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ec38:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    ec3a:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ec3c:	5085      	str	r5, [r0, r2]
    ec3e:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    ec40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ec44:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    ec48:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    ec4c:	f040 0001 	orr.w	r0, r0, #1
    ec50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    ec54:	b129      	cbz	r1, ec62 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    ec56:	2201      	movs	r2, #1
    ec58:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    ec5c:	4a11      	ldr	r2, [pc, #68]	; (eca4 <nrfx_gpiote_trigger_enable+0x88>)
    ec5e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    ec62:	b003      	add	sp, #12
    ec64:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ec66:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    ec6a:	2b04      	cmp	r3, #4
    ec6c:	d011      	beq.n	ec92 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    ec6e:	2b05      	cmp	r3, #5
    ec70:	d011      	beq.n	ec96 <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ec72:	a801      	add	r0, sp, #4
    ec74:	9401      	str	r4, [sp, #4]
    ec76:	f7ff fdd7 	bl	e828 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ec7a:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    ec7c:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ec7e:	40d9      	lsrs	r1, r3
    ec80:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ec84:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    ec86:	4620      	mov	r0, r4
}
    ec88:	b003      	add	sp, #12
    ec8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    ec8e:	f003 beae 	b.w	129ee <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    ec92:	2103      	movs	r1, #3
    ec94:	e7f7      	b.n	ec86 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    ec96:	2102      	movs	r1, #2
    ec98:	e7f5      	b.n	ec86 <nrfx_gpiote_trigger_enable+0x6a>
    ec9a:	bf00      	nop
    ec9c:	20008044 	.word	0x20008044
    eca0:	4002f100 	.word	0x4002f100
    eca4:	4002f000 	.word	0x4002f000

0000eca8 <nrfx_gpiote_trigger_disable>:
{
    eca8:	b508      	push	{r3, lr}
    ecaa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ecac:	f7ff fdcc 	bl	e848 <pin_in_use_by_te>
    ecb0:	b1c0      	cbz	r0, ece4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ecb2:	4b0f      	ldr	r3, [pc, #60]	; (ecf0 <nrfx_gpiote_trigger_disable+0x48>)
    ecb4:	f102 0108 	add.w	r1, r2, #8
    ecb8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ecbc:	0799      	lsls	r1, r3, #30
    ecbe:	d411      	bmi.n	ece4 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    ecc0:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ecc2:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    ecc4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    ecc6:	490b      	ldr	r1, [pc, #44]	; (ecf4 <nrfx_gpiote_trigger_disable+0x4c>)
    ecc8:	009b      	lsls	r3, r3, #2
    ecca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ecce:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    ecd2:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    ecd6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    ecda:	f022 0203 	bic.w	r2, r2, #3
    ecde:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    ece2:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    ece4:	2100      	movs	r1, #0
}
    ece6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    ecea:	4610      	mov	r0, r2
    ecec:	f003 be7f 	b.w	129ee <nrf_gpio_cfg_sense_set>
    ecf0:	20008044 	.word	0x20008044
    ecf4:	4002f000 	.word	0x4002f000

0000ecf8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    ecf8:	4b10      	ldr	r3, [pc, #64]	; (ed3c <nrfx_gpiote_pin_uninit+0x44>)
    ecfa:	f100 0208 	add.w	r2, r0, #8
    ecfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    ed02:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    ed04:	07db      	lsls	r3, r3, #31
{
    ed06:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    ed08:	d516      	bpl.n	ed38 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    ed0a:	f7ff ffcd 	bl	eca8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    ed0e:	4620      	mov	r0, r4
    ed10:	f7ff fdec 	bl	e8ec <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ed14:	a801      	add	r0, sp, #4
    ed16:	9401      	str	r4, [sp, #4]
    ed18:	f7ff fd86 	bl	e828 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    ed1c:	9b01      	ldr	r3, [sp, #4]
    ed1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    ed22:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    ed26:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    ed2a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    ed2e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    ed32:	4803      	ldr	r0, [pc, #12]	; (ed40 <nrfx_gpiote_pin_uninit+0x48>)
}
    ed34:	b002      	add	sp, #8
    ed36:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ed38:	4802      	ldr	r0, [pc, #8]	; (ed44 <nrfx_gpiote_pin_uninit+0x4c>)
    ed3a:	e7fb      	b.n	ed34 <nrfx_gpiote_pin_uninit+0x3c>
    ed3c:	20008044 	.word	0x20008044
    ed40:	0bad0000 	.word	0x0bad0000
    ed44:	0bad0004 	.word	0x0bad0004

0000ed48 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    ed4c:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    ed4e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ed50:	4634      	mov	r4, r6
{
    ed52:	4b60      	ldr	r3, [pc, #384]	; (eed4 <nrfx_gpiote_irq_handler+0x18c>)
    return p_reg->INTENSET & mask;
    ed54:	4860      	ldr	r0, [pc, #384]	; (eed8 <nrfx_gpiote_irq_handler+0x190>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ed56:	4961      	ldr	r1, [pc, #388]	; (eedc <nrfx_gpiote_irq_handler+0x194>)
{
    ed58:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed5a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    ed5c:	b135      	cbz	r5, ed6c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    ed5e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    ed62:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ed64:	bf1e      	ittt	ne
    ed66:	601c      	strne	r4, [r3, #0]
    ed68:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    ed6a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ed6c:	3304      	adds	r3, #4
    ed6e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    ed70:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ed74:	d1f1      	bne.n	ed5a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed76:	f8df 9160 	ldr.w	r9, [pc, #352]	; eed8 <nrfx_gpiote_irq_handler+0x190>
    ed7a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    ed7e:	2b00      	cmp	r3, #0
    ed80:	f000 808a 	beq.w	ee98 <nrfx_gpiote_irq_handler+0x150>
        *p_masks = gpio_regs[i]->LATCH;
    ed84:	4f56      	ldr	r7, [pc, #344]	; (eee0 <nrfx_gpiote_irq_handler+0x198>)
    ed86:	6a3b      	ldr	r3, [r7, #32]
    ed88:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    ed8a:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    ed8c:	4b55      	ldr	r3, [pc, #340]	; (eee4 <nrfx_gpiote_irq_handler+0x19c>)
    ed8e:	6a1a      	ldr	r2, [r3, #32]
    ed90:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    ed92:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    ed94:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    ed98:	f10d 0a10 	add.w	sl, sp, #16
    ed9c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    eda0:	9300      	str	r3, [sp, #0]
    eda2:	e049      	b.n	ee38 <nrfx_gpiote_irq_handler+0xf0>
                uint32_t pin = NRF_CTZ(latch[i]);
    eda4:	fa94 f4a4 	rbit	r4, r4
    eda8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    edac:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    edae:	4a4e      	ldr	r2, [pc, #312]	; (eee8 <nrfx_gpiote_irq_handler+0x1a0>)
                pin += 32 * i;
    edb0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    edb2:	f104 0308 	add.w	r3, r4, #8
    edb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    edba:	08e0      	lsrs	r0, r4, #3
    edbc:	0899      	lsrs	r1, r3, #2
    edbe:	f3c3 0582 	ubfx	r5, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    edc2:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
    edc4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    edc8:	fa03 fc02 	lsl.w	ip, r3, r2
    edcc:	f81a 2000 	ldrb.w	r2, [sl, r0]
    edd0:	9403      	str	r4, [sp, #12]
    edd2:	ea22 020c 	bic.w	r2, r2, ip
    edd6:	f80a 2000 	strb.w	r2, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    edda:	a803      	add	r0, sp, #12
    eddc:	f7ff fd24 	bl	e828 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    ede0:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    ede2:	074b      	lsls	r3, r1, #29
    ede4:	f102 0280 	add.w	r2, r2, #128	; 0x80
    ede8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    edec:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    edee:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    edf2:	d52b      	bpl.n	ee4c <nrfx_gpiote_irq_handler+0x104>
        call_handler(pin, trigger);
    edf4:	4620      	mov	r0, r4
    edf6:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    edf8:	b2d5      	uxtb	r5, r2
    edfa:	f7ff fd2f 	bl	e85c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    edfe:	a803      	add	r0, sp, #12
    ee00:	9403      	str	r4, [sp, #12]
    ee02:	f7ff fd11 	bl	e828 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    ee06:	9b03      	ldr	r3, [sp, #12]
    ee08:	3380      	adds	r3, #128	; 0x80
    ee0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    ee0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    ee12:	429d      	cmp	r5, r3
    ee14:	d107      	bne.n	ee26 <nrfx_gpiote_irq_handler+0xde>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    ee16:	2100      	movs	r1, #0
    ee18:	4620      	mov	r0, r4
    ee1a:	f003 fde8 	bl	129ee <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    ee1e:	4629      	mov	r1, r5
    ee20:	4620      	mov	r0, r4
    ee22:	f003 fde4 	bl	129ee <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ee26:	a803      	add	r0, sp, #12
    ee28:	9403      	str	r4, [sp, #12]
    ee2a:	f7ff fcfd 	bl	e828 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    ee2e:	2201      	movs	r2, #1
    ee30:	9b03      	ldr	r3, [sp, #12]
    ee32:	fa02 f303 	lsl.w	r3, r2, r3
    ee36:	6203      	str	r3, [r0, #32]
            while (latch[i])
    ee38:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    ee3c:	2c00      	cmp	r4, #0
    ee3e:	d1b1      	bne.n	eda4 <nrfx_gpiote_irq_handler+0x5c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    ee40:	f1b8 0f00 	cmp.w	r8, #0
    ee44:	d11a      	bne.n	ee7c <nrfx_gpiote_irq_handler+0x134>
    ee46:	f04f 0801 	mov.w	r8, #1
    ee4a:	e7a7      	b.n	ed9c <nrfx_gpiote_irq_handler+0x54>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ee4c:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ee4e:	bf0c      	ite	eq
    ee50:	2103      	moveq	r1, #3
    ee52:	2102      	movne	r1, #2
    ee54:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ee56:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ee58:	f003 fdc9 	bl	129ee <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ee5c:	2d03      	cmp	r5, #3
    ee5e:	d004      	beq.n	ee6a <nrfx_gpiote_irq_handler+0x122>
    ee60:	9a01      	ldr	r2, [sp, #4]
    ee62:	2a02      	cmp	r2, #2
    ee64:	d106      	bne.n	ee74 <nrfx_gpiote_irq_handler+0x12c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ee66:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ee68:	d1dd      	bne.n	ee26 <nrfx_gpiote_irq_handler+0xde>
            call_handler(pin, trigger);
    ee6a:	4659      	mov	r1, fp
    ee6c:	4620      	mov	r0, r4
    ee6e:	f7ff fcf5 	bl	e85c <call_handler>
    ee72:	e7d8      	b.n	ee26 <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ee74:	2a03      	cmp	r2, #3
    ee76:	d1d6      	bne.n	ee26 <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ee78:	2d02      	cmp	r5, #2
    ee7a:	e7f5      	b.n	ee68 <nrfx_gpiote_irq_handler+0x120>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ee7c:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    ee80:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    ee84:	6a3a      	ldr	r2, [r7, #32]
    ee86:	4917      	ldr	r1, [pc, #92]	; (eee4 <nrfx_gpiote_irq_handler+0x19c>)
    ee88:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    ee8a:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    ee8c:	6a0b      	ldr	r3, [r1, #32]
    ee8e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    ee90:	620b      	str	r3, [r1, #32]
        if (latch[port_idx])
    ee92:	4313      	orrs	r3, r2
    ee94:	f47f af7e 	bne.w	ed94 <nrfx_gpiote_irq_handler+0x4c>
        mask &= ~NRFX_BIT(ch);
    ee98:	2401      	movs	r4, #1
    while (mask)
    ee9a:	b916      	cbnz	r6, eea2 <nrfx_gpiote_irq_handler+0x15a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    ee9c:	b007      	add	sp, #28
    ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    eea2:	fa96 f3a6 	rbit	r3, r6
    eea6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    eeaa:	fa04 f203 	lsl.w	r2, r4, r3
    eeae:	009b      	lsls	r3, r3, #2
    eeb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eeb4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    eeb8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    eebc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    eec0:	f3c0 2005 	ubfx	r0, r0, #8, #6
    eec4:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    eec8:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    eecc:	f7ff fcc6 	bl	e85c <call_handler>
    eed0:	e7e3      	b.n	ee9a <nrfx_gpiote_irq_handler+0x152>
    eed2:	bf00      	nop
    eed4:	4002f100 	.word	0x4002f100
    eed8:	4002f000 	.word	0x4002f000
    eedc:	4002f120 	.word	0x4002f120
    eee0:	40842500 	.word	0x40842500
    eee4:	40842800 	.word	0x40842800
    eee8:	20008044 	.word	0x20008044

0000eeec <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    eeec:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    eeee:	4c08      	ldr	r4, [pc, #32]	; (ef10 <nrfx_ipc_init+0x24>)
{
    eef0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    eef2:	7923      	ldrb	r3, [r4, #4]
{
    eef4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    eef6:	b943      	cbnz	r3, ef0a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    eef8:	202a      	movs	r0, #42	; 0x2a
    eefa:	f7fc fa47 	bl	b38c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    eefe:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    ef00:	4804      	ldr	r0, [pc, #16]	; (ef14 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    ef02:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    ef04:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    ef06:	60a5      	str	r5, [r4, #8]
}
    ef08:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    ef0a:	4803      	ldr	r0, [pc, #12]	; (ef18 <nrfx_ipc_init+0x2c>)
    ef0c:	e7fc      	b.n	ef08 <nrfx_ipc_init+0x1c>
    ef0e:	bf00      	nop
    ef10:	200095fc 	.word	0x200095fc
    ef14:	0bad0000 	.word	0x0bad0000
    ef18:	0bad000c 	.word	0x0bad000c

0000ef1c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    ef1c:	2300      	movs	r3, #0
{
    ef1e:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
    ef20:	4a0d      	ldr	r2, [pc, #52]	; (ef58 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    ef22:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    ef26:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    ef2a:	3301      	adds	r3, #1
    ef2c:	2b10      	cmp	r3, #16
    ef2e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    ef32:	d1f6      	bne.n	ef22 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    ef34:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
    ef36:	4a08      	ldr	r2, [pc, #32]	; (ef58 <nrfx_ipc_config_load+0x3c>)
    ef38:	f100 0140 	add.w	r1, r0, #64	; 0x40
    ef3c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    ef40:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    ef44:	3301      	adds	r3, #1
    ef46:	2b10      	cmp	r3, #16
    ef48:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    ef4c:	d1f6      	bne.n	ef3c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    ef4e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    ef52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    ef56:	bd30      	pop	{r4, r5, pc}
    ef58:	4002a000 	.word	0x4002a000

0000ef5c <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    ef5c:	2301      	movs	r3, #1
    ef5e:	4a02      	ldr	r2, [pc, #8]	; (ef68 <nrfx_ipc_receive_event_enable+0xc>)
    ef60:	4083      	lsls	r3, r0
    ef62:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    ef66:	4770      	bx	lr
    ef68:	4002a000 	.word	0x4002a000

0000ef6c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    ef6c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    ef6e:	4a02      	ldr	r2, [pc, #8]	; (ef78 <nrfx_ipc_receive_event_disable+0xc>)
    ef70:	4083      	lsls	r3, r0
    ef72:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    ef76:	4770      	bx	lr
    ef78:	4002a000 	.word	0x4002a000

0000ef7c <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    ef7c:	4b0c      	ldr	r3, [pc, #48]	; (efb0 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    ef7e:	b430      	push	{r4, r5}
    ef80:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    ef84:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    ef86:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ef88:	2500      	movs	r5, #0
    while (bitmask)
    ef8a:	b923      	cbnz	r3, ef96 <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    ef8c:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    ef8e:	4b09      	ldr	r3, [pc, #36]	; (efb4 <nrfx_ipc_irq_handler+0x38>)
    ef90:	681a      	ldr	r2, [r3, #0]
    ef92:	6899      	ldr	r1, [r3, #8]
    ef94:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
    ef96:	fa93 f2a3 	rbit	r2, r3
    ef9a:	fab2 f282 	clz	r2, r2
        bitmask &= ~(1UL << event_idx);
    ef9e:	fa04 f102 	lsl.w	r1, r4, r2
    efa2:	ea23 0301 	bic.w	r3, r3, r1
    efa6:	4904      	ldr	r1, [pc, #16]	; (efb8 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    efa8:	0092      	lsls	r2, r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    efaa:	508d      	str	r5, [r1, r2]
}
    efac:	e7ed      	b.n	ef8a <nrfx_ipc_irq_handler+0xe>
    efae:	bf00      	nop
    efb0:	4002a000 	.word	0x4002a000
    efb4:	200095fc 	.word	0x200095fc
    efb8:	4002a100 	.word	0x4002a100

0000efbc <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    efbc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    efbe:	4c0e      	ldr	r4, [pc, #56]	; (eff8 <nrfx_power_init+0x3c>)
    efc0:	7823      	ldrb	r3, [r4, #0]
    efc2:	b9b3      	cbnz	r3, eff2 <nrfx_power_init+0x36>
#endif // NRF_REGULATORS_HAS_POFCON_VDDH

#if NRF_REGULATORS_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    efc4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    efc8:	7803      	ldrb	r3, [r0, #0]
    efca:	f3c3 0340 	ubfx	r3, r3, #1, #1
    efce:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    efd2:	7803      	ldrb	r3, [r0, #0]
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    efd4:	2005      	movs	r0, #5
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    efd6:	f003 0301 	and.w	r3, r3, #1
    efda:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
    efde:	f7fc f9f9 	bl	b3d4 <arch_irq_is_enabled>
    efe2:	b910      	cbnz	r0, efea <nrfx_power_init+0x2e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    efe4:	2005      	movs	r0, #5
    efe6:	f7fc f9d1 	bl	b38c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    efea:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    efec:	4803      	ldr	r0, [pc, #12]	; (effc <nrfx_power_init+0x40>)
    m_initialized = true;
    efee:	7023      	strb	r3, [r4, #0]
}
    eff0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    eff2:	4803      	ldr	r0, [pc, #12]	; (f000 <nrfx_power_init+0x44>)
    eff4:	e7fc      	b.n	eff0 <nrfx_power_init+0x34>
    eff6:	bf00      	nop
    eff8:	200098bf 	.word	0x200098bf
    effc:	0bad0000 	.word	0x0bad0000
    f000:	0bad000c 	.word	0x0bad000c

0000f004 <nrfx_power_irq_handler>:
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    f004:	4b18      	ldr	r3, [pc, #96]	; (f068 <nrfx_power_irq_handler+0x64>)

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    f006:	b510      	push	{r4, lr}
    f008:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    f00c:	0761      	lsls	r1, r4, #29
    f00e:	d50a      	bpl.n	f026 <nrfx_power_irq_handler+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f010:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (ret)
    f014:	b13a      	cbz	r2, f026 <nrfx_power_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f016:	2200      	movs	r2, #0
    f018:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    f01c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    f020:	4b12      	ldr	r3, [pc, #72]	; (f06c <nrfx_power_irq_handler+0x68>)
    f022:	681b      	ldr	r3, [r3, #0]
    f024:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    f026:	06a2      	lsls	r2, r4, #26
    f028:	d50b      	bpl.n	f042 <nrfx_power_irq_handler+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f02a:	4b0f      	ldr	r3, [pc, #60]	; (f068 <nrfx_power_irq_handler+0x64>)
    f02c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (ret)
    f030:	b13a      	cbz	r2, f042 <nrfx_power_irq_handler+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f032:	2000      	movs	r0, #0
    f034:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    f038:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    f03c:	4b0c      	ldr	r3, [pc, #48]	; (f070 <nrfx_power_irq_handler+0x6c>)
    f03e:	681b      	ldr	r3, [r3, #0]
    f040:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    f042:	0663      	lsls	r3, r4, #25
    f044:	d50e      	bpl.n	f064 <nrfx_power_irq_handler+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f046:	4b08      	ldr	r3, [pc, #32]	; (f068 <nrfx_power_irq_handler+0x64>)
    f048:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (ret)
    f04c:	b152      	cbz	r2, f064 <nrfx_power_irq_handler+0x60>
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    f04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f052:	2200      	movs	r2, #0
    f054:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f058:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    f05c:	4b04      	ldr	r3, [pc, #16]	; (f070 <nrfx_power_irq_handler+0x6c>)
    f05e:	2001      	movs	r0, #1
    f060:	681b      	ldr	r3, [r3, #0]
    f062:	4718      	bx	r3
}
    f064:	bd10      	pop	{r4, pc}
    f066:	bf00      	nop
    f068:	40005000 	.word	0x40005000
    f06c:	20009608 	.word	0x20009608
    f070:	2000960c 	.word	0x2000960c

0000f074 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    f074:	4b05      	ldr	r3, [pc, #20]	; (f08c <ep_state_access+0x18>)
    f076:	f010 0f80 	tst.w	r0, #128	; 0x80
    f07a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    f07e:	bf08      	it	eq
    f080:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    f082:	f000 000f 	and.w	r0, r0, #15
}
    f086:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f08a:	4770      	bx	lr
    f08c:	20009780 	.word	0x20009780

0000f090 <ev_usbreset_handler>:
 * @{
 */

static void ev_usbreset_handler(void)
{
    m_bus_suspend = false;
    f090:	2300      	movs	r3, #0
{
    f092:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    f094:	4a08      	ldr	r2, [pc, #32]	; (f0b8 <ev_usbreset_handler+0x28>)
    m_last_setup_dir = NRFX_USBD_EPOUT0;

    const nrfx_usbd_evt_t evt = {
    f096:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_bus_suspend = false;
    f09a:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    f09c:	4a07      	ldr	r2, [pc, #28]	; (f0bc <ev_usbreset_handler+0x2c>)
    const nrfx_usbd_evt_t evt = {
    f09e:	f88d 3007 	strb.w	r3, [sp, #7]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    f0a2:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    f0a4:	2301      	movs	r3, #1
    f0a6:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    f0aa:	4b05      	ldr	r3, [pc, #20]	; (f0c0 <ev_usbreset_handler+0x30>)
    f0ac:	a801      	add	r0, sp, #4
    f0ae:	681b      	ldr	r3, [r3, #0]
    f0b0:	4798      	blx	r3
}
    f0b2:	b003      	add	sp, #12
    f0b4:	f85d fb04 	ldr.w	pc, [sp], #4
    f0b8:	200098c0 	.word	0x200098c0
    f0bc:	200098c3 	.word	0x200098c3
    f0c0:	20009810 	.word	0x20009810

0000f0c4 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    f0c4:	4b21      	ldr	r3, [pc, #132]	; (f14c <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    f0c6:	b513      	push	{r0, r1, r4, lr}
    f0c8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    f0cc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    f0d0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    f0d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    f0d6:	d50e      	bpl.n	f0f6 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    f0d8:	2201      	movs	r2, #1
    f0da:	4b1d      	ldr	r3, [pc, #116]	; (f150 <ev_usbevent_handler+0x8c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    f0dc:	a801      	add	r0, sp, #4
        m_bus_suspend = true;
    f0de:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    f0e0:	2300      	movs	r3, #0
    f0e2:	f8ad 3005 	strh.w	r3, [sp, #5]
    f0e6:	f88d 3007 	strb.w	r3, [sp, #7]
    f0ea:	2302      	movs	r3, #2
    f0ec:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    f0f0:	4b18      	ldr	r3, [pc, #96]	; (f154 <ev_usbevent_handler+0x90>)
    f0f2:	681b      	ldr	r3, [r3, #0]
    f0f4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    f0f6:	05a2      	lsls	r2, r4, #22
    f0f8:	d50d      	bpl.n	f116 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    f0fa:	2300      	movs	r3, #0
    f0fc:	4a14      	ldr	r2, [pc, #80]	; (f150 <ev_usbevent_handler+0x8c>)
        const nrfx_usbd_evt_t evt = {
    f0fe:	f8ad 3005 	strh.w	r3, [sp, #5]
        m_bus_suspend = false;
    f102:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    f104:	f88d 3007 	strb.w	r3, [sp, #7]
    f108:	2303      	movs	r3, #3
    f10a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    f10e:	4b11      	ldr	r3, [pc, #68]	; (f154 <ev_usbevent_handler+0x90>)
    f110:	a801      	add	r0, sp, #4
    f112:	681b      	ldr	r3, [r3, #0]
    f114:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    f116:	0563      	lsls	r3, r4, #21
    f118:	d515      	bpl.n	f146 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    f11a:	4a0d      	ldr	r2, [pc, #52]	; (f150 <ev_usbevent_handler+0x8c>)
    f11c:	7813      	ldrb	r3, [r2, #0]
    f11e:	b193      	cbz	r3, f146 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    f120:	2300      	movs	r3, #0
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    f122:	2101      	movs	r1, #1
    f124:	7013      	strb	r3, [r2, #0]
    f126:	4a09      	ldr	r2, [pc, #36]	; (f14c <ev_usbevent_handler+0x88>)
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    f128:	a801      	add	r0, sp, #4
    f12a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    f12e:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    f130:	6d92      	ldr	r2, [r2, #88]	; 0x58
            const nrfx_usbd_evt_t evt = {
    f132:	f8ad 3005 	strh.w	r3, [sp, #5]
    f136:	f88d 3007 	strb.w	r3, [sp, #7]
    f13a:	2304      	movs	r3, #4
    f13c:	f88d 3004 	strb.w	r3, [sp, #4]
            m_event_handler(&evt);
    f140:	4b04      	ldr	r3, [pc, #16]	; (f154 <ev_usbevent_handler+0x90>)
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	4798      	blx	r3
        }
    }
}
    f146:	b002      	add	sp, #8
    f148:	bd10      	pop	{r4, pc}
    f14a:	bf00      	nop
    f14c:	40036000 	.word	0x40036000
    f150:	200098c0 	.word	0x200098c0
    f154:	20009810 	.word	0x20009810

0000f158 <nrfx_usbd_feeder_flash>:
{
    f158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    f15a:	684d      	ldr	r5, [r1, #4]
{
    f15c:	460c      	mov	r4, r1
    f15e:	4295      	cmp	r5, r2
    f160:	bf28      	it	cs
    f162:	4615      	movcs	r5, r2
    f164:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    f166:	4f09      	ldr	r7, [pc, #36]	; (f18c <nrfx_usbd_feeder_flash+0x34>)
    f168:	462a      	mov	r2, r5
    f16a:	4638      	mov	r0, r7
    f16c:	6809      	ldr	r1, [r1, #0]
    f16e:	f003 f8ec 	bl	1234a <memcpy>
    p_transfer->size -= tx_size;
    f172:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    f174:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    f176:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    f178:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    f17c:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    f17e:	6060      	str	r0, [r4, #4]
}
    f180:	3800      	subs	r0, #0
    f182:	bf18      	it	ne
    f184:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    f186:	6022      	str	r2, [r4, #0]
}
    f188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f18a:	bf00      	nop
    f18c:	20009814 	.word	0x20009814

0000f190 <nrfx_usbd_feeder_flash_zlp>:
{
    f190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    f192:	684c      	ldr	r4, [r1, #4]
{
    f194:	4606      	mov	r6, r0
    f196:	4294      	cmp	r4, r2
    f198:	bf28      	it	cs
    f19a:	4614      	movcs	r4, r2
    f19c:	460d      	mov	r5, r1
    if (tx_size != 0)
    f19e:	b18c      	cbz	r4, f1c4 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    f1a0:	4f09      	ldr	r7, [pc, #36]	; (f1c8 <nrfx_usbd_feeder_flash_zlp+0x38>)
    f1a2:	4622      	mov	r2, r4
    f1a4:	4638      	mov	r0, r7
    f1a6:	6809      	ldr	r1, [r1, #0]
    f1a8:	f003 f8cf 	bl	1234a <memcpy>
        p_next->p_data.tx = p_buffer;
    f1ac:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    f1ae:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    f1b0:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    f1b2:	1b1b      	subs	r3, r3, r4
    f1b4:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    f1b6:	682b      	ldr	r3, [r5, #0]
}
    f1b8:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    f1ba:	4423      	add	r3, r4
}
    f1bc:	bf18      	it	ne
    f1be:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    f1c0:	602b      	str	r3, [r5, #0]
}
    f1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    f1c4:	6004      	str	r4, [r0, #0]
    f1c6:	e7f2      	b.n	f1ae <nrfx_usbd_feeder_flash_zlp+0x1e>
    f1c8:	20009814 	.word	0x20009814

0000f1cc <ev_sof_handler>:
    nrfx_usbd_evt_t evt =  {
    f1cc:	2300      	movs	r3, #0
{
    f1ce:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    f1d0:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    f1d4:	4b0b      	ldr	r3, [pc, #44]	; (f204 <ev_sof_handler+0x38>)
    m_event_handler(&evt);
    f1d6:	a801      	add	r0, sp, #4
    f1d8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    f1dc:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    f1e0:	f8ad 2006 	strh.w	r2, [sp, #6]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	bf0c      	ite	eq
    f1e8:	f44f 7180 	moveq.w	r1, #256	; 0x100
    f1ec:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    f1f0:	4a05      	ldr	r2, [pc, #20]	; (f208 <ev_sof_handler+0x3c>)
    f1f2:	6813      	ldr	r3, [r2, #0]
    f1f4:	430b      	orrs	r3, r1
    f1f6:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    f1f8:	4b04      	ldr	r3, [pc, #16]	; (f20c <ev_sof_handler+0x40>)
    f1fa:	681b      	ldr	r3, [r3, #0]
    f1fc:	4798      	blx	r3
}
    f1fe:	b003      	add	sp, #12
    f200:	f85d fb04 	ldr.w	pc, [sp], #4
    f204:	40036000 	.word	0x40036000
    f208:	200096ec 	.word	0x200096ec
    f20c:	20009810 	.word	0x20009810

0000f210 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f210:	4b04      	ldr	r3, [pc, #16]	; (f224 <atomic_and.constprop.0.isra.0+0x14>)
    f212:	e8d3 2fef 	ldaex	r2, [r3]
    f216:	4002      	ands	r2, r0
    f218:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f21c:	2900      	cmp	r1, #0
    f21e:	d1f8      	bne.n	f212 <atomic_and.constprop.0.isra.0+0x2>
}
    f220:	4770      	bx	lr
    f222:	bf00      	nop
    f224:	2000967c 	.word	0x2000967c

0000f228 <nrf_usbd_epin_dma_handler>:
    m_dma_pending = false;
    f228:	2200      	movs	r2, #0
{
    f22a:	b508      	push	{r3, lr}
    m_dma_pending = false;
    f22c:	4b0b      	ldr	r3, [pc, #44]	; (f25c <nrf_usbd_epin_dma_handler+0x34>)
{
    f22e:	4601      	mov	r1, r0
    m_dma_pending = false;
    f230:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    f232:	f7ff ff1f 	bl	f074 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f236:	7b83      	ldrb	r3, [r0, #14]
    f238:	2b03      	cmp	r3, #3
    f23a:	d10a      	bne.n	f252 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f23c:	4608      	mov	r0, r1
    f23e:	f003 fc29 	bl	12a94 <ep2bit>
    f242:	2301      	movs	r3, #1
    f244:	fa03 f000 	lsl.w	r0, r3, r0
    f248:	43c0      	mvns	r0, r0
}
    f24a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f24e:	f7ff bfdf 	b.w	f210 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    f252:	6803      	ldr	r3, [r0, #0]
    f254:	2b00      	cmp	r3, #0
    f256:	d0f1      	beq.n	f23c <nrf_usbd_epin_dma_handler+0x14>
}
    f258:	bd08      	pop	{r3, pc}
    f25a:	bf00      	nop
    f25c:	200098c1 	.word	0x200098c1

0000f260 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    f260:	2200      	movs	r2, #0
    f262:	4b08      	ldr	r3, [pc, #32]	; (f284 <nrf_usbd_ep0in_dma_handler+0x24>)
    f264:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f266:	4b08      	ldr	r3, [pc, #32]	; (f288 <nrf_usbd_ep0in_dma_handler+0x28>)
    f268:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    f26c:	2a03      	cmp	r2, #3
    f26e:	d103      	bne.n	f278 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f270:	f06f 0001 	mvn.w	r0, #1
    f274:	f7ff bfcc 	b.w	f210 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    f278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    f27c:	2b00      	cmp	r3, #0
    f27e:	d0f7      	beq.n	f270 <nrf_usbd_ep0in_dma_handler+0x10>
}
    f280:	4770      	bx	lr
    f282:	bf00      	nop
    f284:	200098c1 	.word	0x200098c1
    f288:	200096f0 	.word	0x200096f0

0000f28c <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    f28c:	2201      	movs	r2, #1
{
    f28e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    f290:	fa02 f501 	lsl.w	r5, r2, r1
    f294:	491c      	ldr	r1, [pc, #112]	; (f308 <usbd_ep_data_handler+0x7c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    f296:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    f29a:	680b      	ldr	r3, [r1, #0]
{
    f29c:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    f29e:	ea43 0305 	orr.w	r3, r3, r5
    f2a2:	4e1a      	ldr	r6, [pc, #104]	; (f30c <usbd_ep_data_handler+0x80>)
    f2a4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    f2a6:	d024      	beq.n	f2f2 <usbd_ep_data_handler+0x66>
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    f2a8:	4b19      	ldr	r3, [pc, #100]	; (f310 <usbd_ep_data_handler+0x84>)
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    f2aa:	f000 020f 	and.w	r2, r0, #15
    f2ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    f2b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f2b6:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    f2ba:	681a      	ldr	r2, [r3, #0]
    if (ret)
    f2bc:	b132      	cbz	r2, f2cc <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    f2be:	2200      	movs	r2, #0
            if (ep != NRFX_USBD_EPIN0)
    f2c0:	2880      	cmp	r0, #128	; 0x80
    f2c2:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    f2c4:	681b      	ldr	r3, [r3, #0]
    f2c6:	d011      	beq.n	f2ec <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    f2c8:	f7ff ffae 	bl	f228 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    f2cc:	6831      	ldr	r1, [r6, #0]
    f2ce:	4029      	ands	r1, r5
    f2d0:	d10a      	bne.n	f2e8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f2d2:	2306      	movs	r3, #6
    f2d4:	f88d 4006 	strb.w	r4, [sp, #6]
    f2d8:	f88d 3004 	strb.w	r3, [sp, #4]
    f2dc:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    f2e0:	4b0c      	ldr	r3, [pc, #48]	; (f314 <usbd_ep_data_handler+0x88>)
    f2e2:	a801      	add	r0, sp, #4
    f2e4:	681b      	ldr	r3, [r3, #0]
    f2e6:	4798      	blx	r3
}
    f2e8:	b002      	add	sp, #8
    f2ea:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    f2ec:	f7ff ffb8 	bl	f260 <nrf_usbd_ep0in_dma_handler>
    f2f0:	e7ec      	b.n	f2cc <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    f2f2:	6833      	ldr	r3, [r6, #0]
    f2f4:	421d      	tst	r5, r3
    f2f6:	d1f7      	bne.n	f2e8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    f2f8:	2306      	movs	r3, #6
    f2fa:	f88d 0006 	strb.w	r0, [sp, #6]
    f2fe:	f88d 3004 	strb.w	r3, [sp, #4]
    f302:	f88d 2007 	strb.w	r2, [sp, #7]
    f306:	e7eb      	b.n	f2e0 <usbd_ep_data_handler+0x54>
    f308:	200096ec 	.word	0x200096ec
    f30c:	2000967c 	.word	0x2000967c
    f310:	0001385c 	.word	0x0001385c
    f314:	20009810 	.word	0x20009810

0000f318 <ev_setup_data_handler>:
{
    f318:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    f31a:	4b05      	ldr	r3, [pc, #20]	; (f330 <ev_setup_data_handler+0x18>)
    f31c:	781a      	ldrb	r2, [r3, #0]
    f31e:	4610      	mov	r0, r2
    f320:	f003 fbb8 	bl	12a94 <ep2bit>
}
    f324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    f328:	4601      	mov	r1, r0
    f32a:	4610      	mov	r0, r2
    f32c:	f7ff bfae 	b.w	f28c <usbd_ep_data_handler>
    f330:	200098c3 	.word	0x200098c3

0000f334 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    f334:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    f336:	2200      	movs	r2, #0
    f338:	4b0d      	ldr	r3, [pc, #52]	; (f370 <ev_dma_epout8_handler+0x3c>)
    f33a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f33c:	4b0d      	ldr	r3, [pc, #52]	; (f374 <ev_dma_epout8_handler+0x40>)
    f33e:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    f342:	2a03      	cmp	r2, #3
    f344:	d010      	beq.n	f368 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    f346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f34a:	b96b      	cbnz	r3, f368 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f34c:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    f350:	f7ff ff5e 	bl	f210 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f354:	2306      	movs	r3, #6
    f356:	f88d 3004 	strb.w	r3, [sp, #4]
    f35a:	2308      	movs	r3, #8
    f35c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    f360:	4b05      	ldr	r3, [pc, #20]	; (f378 <ev_dma_epout8_handler+0x44>)
    f362:	a801      	add	r0, sp, #4
    f364:	681b      	ldr	r3, [r3, #0]
    f366:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    f368:	b003      	add	sp, #12
    f36a:	f85d fb04 	ldr.w	pc, [sp], #4
    f36e:	bf00      	nop
    f370:	200098c1 	.word	0x200098c1
    f374:	200096f0 	.word	0x200096f0
    f378:	20009810 	.word	0x20009810

0000f37c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    f37c:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    f37e:	2200      	movs	r2, #0
    f380:	4b10      	ldr	r3, [pc, #64]	; (f3c4 <ev_dma_epin8_handler+0x48>)
    f382:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f384:	4b10      	ldr	r3, [pc, #64]	; (f3c8 <ev_dma_epin8_handler+0x4c>)
    f386:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    f38a:	2a03      	cmp	r2, #3
    f38c:	d106      	bne.n	f39c <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f38e:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    f392:	b003      	add	sp, #12
    f394:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f398:	f7ff bf3a 	b.w	f210 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    f39c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f3a0:	b96b      	cbnz	r3, f3be <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f3a2:	f46f 7080 	mvn.w	r0, #256	; 0x100
    f3a6:	f7ff ff33 	bl	f210 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f3aa:	2306      	movs	r3, #6
    f3ac:	f88d 3004 	strb.w	r3, [sp, #4]
    f3b0:	2388      	movs	r3, #136	; 0x88
    f3b2:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    f3b6:	4b05      	ldr	r3, [pc, #20]	; (f3cc <ev_dma_epin8_handler+0x50>)
    f3b8:	a801      	add	r0, sp, #4
    f3ba:	681b      	ldr	r3, [r3, #0]
    f3bc:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    f3be:	b003      	add	sp, #12
    f3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    f3c4:	200098c1 	.word	0x200098c1
    f3c8:	200096f0 	.word	0x200096f0
    f3cc:	20009810 	.word	0x20009810

0000f3d0 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    f3d0:	2300      	movs	r3, #0
    f3d2:	4a02      	ldr	r2, [pc, #8]	; (f3dc <nrfx_usbd_uninit+0xc>)
    f3d4:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    f3d6:	4a02      	ldr	r2, [pc, #8]	; (f3e0 <nrfx_usbd_uninit+0x10>)
    f3d8:	7013      	strb	r3, [r2, #0]
    return;
}
    f3da:	4770      	bx	lr
    f3dc:	20009810 	.word	0x20009810
    f3e0:	200098c2 	.word	0x200098c2

0000f3e4 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    f3e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f3e8:	4b13      	ldr	r3, [pc, #76]	; (f438 <nrfx_usbd_enable+0x54>)
    f3ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    f3ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    f3f2:	2201      	movs	r2, #1
    f3f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    f3f8:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    f3fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    f400:	0512      	lsls	r2, r2, #20
    f402:	d5fb      	bpl.n	f3fc <nrfx_usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    f404:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f408:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    f40c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    f410:	2280      	movs	r2, #128	; 0x80
    f412:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    f416:	2200      	movs	r2, #0
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    f418:	f240 11ff 	movw	r1, #511	; 0x1ff
    f41c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    f420:	4b06      	ldr	r3, [pc, #24]	; (f43c <nrfx_usbd_enable+0x58>)
    f422:	6019      	str	r1, [r3, #0]
    m_ep_dma_waiting = 0;
    f424:	4b06      	ldr	r3, [pc, #24]	; (f440 <nrfx_usbd_enable+0x5c>)
    f426:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    f428:	4b06      	ldr	r3, [pc, #24]	; (f444 <nrfx_usbd_enable+0x60>)
    f42a:	701a      	strb	r2, [r3, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    f42c:	4b06      	ldr	r3, [pc, #24]	; (f448 <nrfx_usbd_enable+0x64>)
    f42e:	701a      	strb	r2, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    f430:	2202      	movs	r2, #2
    f432:	4b06      	ldr	r3, [pc, #24]	; (f44c <nrfx_usbd_enable+0x68>)
    f434:	701a      	strb	r2, [r3, #0]
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    f436:	4770      	bx	lr
    f438:	40036000 	.word	0x40036000
    f43c:	200096ec 	.word	0x200096ec
    f440:	2000967c 	.word	0x2000967c
    f444:	200098c1 	.word	0x200098c1
    f448:	200098c3 	.word	0x200098c3
    f44c:	200098c2 	.word	0x200098c2

0000f450 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    f450:	2200      	movs	r2, #0
    f452:	4b0a      	ldr	r3, [pc, #40]	; (f47c <nrfx_usbd_start+0x2c>)
{
    f454:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    f456:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    f458:	4a09      	ldr	r2, [pc, #36]	; (f480 <nrfx_usbd_start+0x30>)
    f45a:	4b0a      	ldr	r3, [pc, #40]	; (f484 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    f45c:	4c0a      	ldr	r4, [pc, #40]	; (f488 <nrfx_usbd_start+0x38>)
    f45e:	2800      	cmp	r0, #0
    f460:	bf18      	it	ne
    f462:	4613      	movne	r3, r2
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    f464:	2036      	movs	r0, #54	; 0x36
    f466:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    f46a:	f7fb ff8f 	bl	b38c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    f46e:	2301      	movs	r3, #1
    f470:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    f474:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    f478:	bd10      	pop	{r4, pc}
    f47a:	bf00      	nop
    f47c:	200098c0 	.word	0x200098c0
    f480:	01e01407 	.word	0x01e01407
    f484:	01c01407 	.word	0x01c01407
    f488:	40036000 	.word	0x40036000

0000f48c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    f48c:	4b03      	ldr	r3, [pc, #12]	; (f49c <nrfx_usbd_is_enabled+0x10>)
    f48e:	7818      	ldrb	r0, [r3, #0]
}
    f490:	2801      	cmp	r0, #1
    f492:	bf94      	ite	ls
    f494:	2000      	movls	r0, #0
    f496:	2001      	movhi	r0, #1
    f498:	4770      	bx	lr
    f49a:	bf00      	nop
    f49c:	200098c2 	.word	0x200098c2

0000f4a0 <nrfx_usbd_wakeup_req>:
	__asm__ volatile(
    f4a0:	f04f 0320 	mov.w	r3, #32
    f4a4:	f3ef 8111 	mrs	r1, BASEPRI
    f4a8:	f383 8812 	msr	BASEPRI_MAX, r3
    f4ac:	f3bf 8f6f 	isb	sy
bool nrfx_usbd_wakeup_req(void)
{
    bool started = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend && nrf_usbd_lowpower_check(NRF_USBD))
    f4b0:	4b0a      	ldr	r3, [pc, #40]	; (f4dc <nrfx_usbd_wakeup_req+0x3c>)
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f4b8:	b143      	cbz	r3, f4cc <nrfx_usbd_wakeup_req+0x2c>
    return (p_reg->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
    f4ba:	4b09      	ldr	r3, [pc, #36]	; (f4e0 <nrfx_usbd_wakeup_req+0x40>)
    f4bc:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    f4c0:	b14a      	cbz	r2, f4d6 <nrfx_usbd_wakeup_req+0x36>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    f4c2:	2200      	movs	r2, #0
    f4c4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    f4c8:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
	__asm__ volatile(
    f4cc:	f381 8811 	msr	BASEPRI, r1
    f4d0:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return started;
}
    f4d4:	4770      	bx	lr
    bool started = false;
    f4d6:	4610      	mov	r0, r2
    f4d8:	e7f8      	b.n	f4cc <nrfx_usbd_wakeup_req+0x2c>
    f4da:	bf00      	nop
    f4dc:	200098c0 	.word	0x200098c0
    f4e0:	40036000 	.word	0x40036000

0000f4e4 <nrfx_usbd_init>:
{
    f4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    f4e8:	4b1d      	ldr	r3, [pc, #116]	; (f560 <nrfx_usbd_init+0x7c>)
    f4ea:	781c      	ldrb	r4, [r3, #0]
    f4ec:	2c00      	cmp	r4, #0
    f4ee:	d135      	bne.n	f55c <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    f4f0:	4a1c      	ldr	r2, [pc, #112]	; (f564 <nrfx_usbd_init+0x80>)
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    f4f2:	4625      	mov	r5, r4
    m_event_handler = event_handler;
    f4f4:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    f4f6:	2201      	movs	r2, #1
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    f4f8:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    f4fc:	4627      	mov	r7, r4
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    f4fe:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    f500:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    f504:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    f508:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    f50a:	bf14      	ite	ne
    f50c:	4641      	movne	r1, r8
    f50e:	2140      	moveq	r1, #64	; 0x40
    f510:	4630      	mov	r0, r6
    f512:	f003 fae0 	bl	12ad6 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    f516:	4630      	mov	r0, r6
    f518:	f7ff fdac 	bl	f074 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    f51c:	3501      	adds	r5, #1
    f51e:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    f520:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    f522:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    f524:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    f526:	d1eb      	bne.n	f500 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    f528:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    f52a:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    f52c:	f240 16ff 	movw	r6, #511	; 0x1ff
    f530:	4620      	mov	r0, r4
    f532:	f003 fad0 	bl	12ad6 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    f536:	4620      	mov	r0, r4
    f538:	f7ff fd9c 	bl	f074 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    f53c:	3401      	adds	r4, #1
    f53e:	b2e4      	uxtb	r4, r4
    f540:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    f542:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    f544:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    f546:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    f548:	d102      	bne.n	f550 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    f54a:	4807      	ldr	r0, [pc, #28]	; (f568 <nrfx_usbd_init+0x84>)
}
    f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    f550:	f014 0f08 	tst.w	r4, #8
    f554:	bf14      	ite	ne
    f556:	4631      	movne	r1, r6
    f558:	2140      	moveq	r1, #64	; 0x40
    f55a:	e7e9      	b.n	f530 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    f55c:	4803      	ldr	r0, [pc, #12]	; (f56c <nrfx_usbd_init+0x88>)
    f55e:	e7f5      	b.n	f54c <nrfx_usbd_init+0x68>
    f560:	200098c2 	.word	0x200098c2
    f564:	20009810 	.word	0x20009810
    f568:	0bad0000 	.word	0x0bad0000
    f56c:	0bad0005 	.word	0x0bad0005

0000f570 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    f570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f574:	4605      	mov	r5, r0
	__asm__ volatile(
    f576:	f04f 0320 	mov.w	r3, #32
    f57a:	f3ef 8811 	mrs	r8, BASEPRI
    f57e:	f383 8812 	msr	BASEPRI_MAX, r3
    f582:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    f586:	f010 040f 	ands.w	r4, r0, #15
    f58a:	d103      	bne.n	f594 <nrfx_usbd_ep_transfer+0x24>
    f58c:	4b27      	ldr	r3, [pc, #156]	; (f62c <nrfx_usbd_ep_transfer+0xbc>)
    f58e:	781b      	ldrb	r3, [r3, #0]
    f590:	4283      	cmp	r3, r0
    f592:	d147      	bne.n	f624 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    f594:	4b26      	ldr	r3, [pc, #152]	; (f630 <nrfx_usbd_ep_transfer+0xc0>)
    const uint8_t ep_bitpos = ep2bit(ep);
    f596:	4628      	mov	r0, r5
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    f598:	681a      	ldr	r2, [r3, #0]
    f59a:	f04f 0901 	mov.w	r9, #1
    f59e:	43d2      	mvns	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    f5a0:	f003 fa78 	bl	12a94 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    f5a4:	4f23      	ldr	r7, [pc, #140]	; (f634 <nrfx_usbd_ep_transfer+0xc4>)
    f5a6:	b292      	uxth	r2, r2
    f5a8:	683e      	ldr	r6, [r7, #0]
    f5aa:	fa09 f900 	lsl.w	r9, r9, r0
    f5ae:	4332      	orrs	r2, r6
    f5b0:	ea12 0f09 	tst.w	r2, r9
    f5b4:	d138      	bne.n	f628 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    f5b6:	4628      	mov	r0, r5
    f5b8:	f7ff fd5c 	bl	f074 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    f5bc:	220c      	movs	r2, #12
    f5be:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    f5c0:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    f5c2:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    f5c4:	d52a      	bpl.n	f61c <nrfx_usbd_ep_transfer+0xac>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    f5c6:	4a1c      	ldr	r2, [pc, #112]	; (f638 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    f5c8:	6808      	ldr	r0, [r1, #0]
    f5ca:	4414      	add	r4, r2
    f5cc:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    f5d0:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    f5d2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    f5d6:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    f5da:	d11a      	bne.n	f612 <nrfx_usbd_ep_transfer+0xa2>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    f5dc:	b9ba      	cbnz	r2, f60e <nrfx_usbd_ep_transfer+0x9e>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    f5de:	4a17      	ldr	r2, [pc, #92]	; (f63c <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    f5e0:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    f5e2:	c907      	ldmia	r1, {r0, r1, r2}
    f5e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    f5e8:	2200      	movs	r2, #0
    f5ea:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    f5ec:	739a      	strb	r2, [r3, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f5ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        p_state->p_context = p_context;
    f5f2:	605c      	str	r4, [r3, #4]
    f5f4:	4b12      	ldr	r3, [pc, #72]	; (f640 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    f5f6:	ea46 0609 	orr.w	r6, r6, r9
        ret = NRFX_SUCCESS;
    f5fa:	4812      	ldr	r0, [pc, #72]	; (f644 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    f5fc:	603e      	str	r6, [r7, #0]
    f5fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    f602:	f388 8811 	msr	BASEPRI, r8
    f606:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    f60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    f60e:	4a0e      	ldr	r2, [pc, #56]	; (f648 <nrfx_usbd_ep_transfer+0xd8>)
    f610:	e7e6      	b.n	f5e0 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    f612:	b90a      	cbnz	r2, f618 <nrfx_usbd_ep_transfer+0xa8>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    f614:	4a0d      	ldr	r2, [pc, #52]	; (f64c <nrfx_usbd_ep_transfer+0xdc>)
    f616:	e7e3      	b.n	f5e0 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    f618:	4a0d      	ldr	r2, [pc, #52]	; (f650 <nrfx_usbd_ep_transfer+0xe0>)
    f61a:	e7e1      	b.n	f5e0 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    f61c:	4a0d      	ldr	r2, [pc, #52]	; (f654 <nrfx_usbd_ep_transfer+0xe4>)
    f61e:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    f620:	4a0d      	ldr	r2, [pc, #52]	; (f658 <nrfx_usbd_ep_transfer+0xe8>)
    f622:	e7dd      	b.n	f5e0 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    f624:	480d      	ldr	r0, [pc, #52]	; (f65c <nrfx_usbd_ep_transfer+0xec>)
    f626:	e7ec      	b.n	f602 <nrfx_usbd_ep_transfer+0x92>
        ret = NRFX_ERROR_BUSY;
    f628:	480d      	ldr	r0, [pc, #52]	; (f660 <nrfx_usbd_ep_transfer+0xf0>)
    f62a:	e7ea      	b.n	f602 <nrfx_usbd_ep_transfer+0x92>
    f62c:	200098c3 	.word	0x200098c3
    f630:	200096ec 	.word	0x200096ec
    f634:	2000967c 	.word	0x2000967c
    f638:	20009680 	.word	0x20009680
    f63c:	00012a49 	.word	0x00012a49
    f640:	e000e100 	.word	0xe000e100
    f644:	0bad0000 	.word	0x0bad0000
    f648:	00012a6b 	.word	0x00012a6b
    f64c:	0000f159 	.word	0x0000f159
    f650:	0000f191 	.word	0x0000f191
    f654:	20009610 	.word	0x20009610
    f658:	00012a1b 	.word	0x00012a1b
    f65c:	0bad000a 	.word	0x0bad000a
    f660:	0bad000b 	.word	0x0bad000b

0000f664 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    f664:	f010 0f08 	tst.w	r0, #8
    f668:	4b07      	ldr	r3, [pc, #28]	; (f688 <nrfx_usbd_epout_size_get+0x24>)
    f66a:	d006      	beq.n	f67a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    f66c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    f670:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    f674:	bf18      	it	ne
    f676:	2000      	movne	r0, #0
    f678:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    f67a:	f000 000f 	and.w	r0, r0, #15
    f67e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    f682:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    f686:	4770      	bx	lr
    f688:	40036000 	.word	0x40036000

0000f68c <usbd_dmareq_process>:
{
    f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    f690:	f8df 814c 	ldr.w	r8, [pc, #332]	; f7e0 <usbd_dmareq_process+0x154>
{
    f694:	b085      	sub	sp, #20
    if (!m_dma_pending)
    f696:	f898 3000 	ldrb.w	r3, [r8]
    f69a:	2b00      	cmp	r3, #0
    f69c:	d164      	bne.n	f768 <usbd_dmareq_process+0xdc>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    f69e:	f8df 9144 	ldr.w	r9, [pc, #324]	; f7e4 <usbd_dmareq_process+0x158>
    f6a2:	4e51      	ldr	r6, [pc, #324]	; (f7e8 <usbd_dmareq_process+0x15c>)
    f6a4:	f8d9 1000 	ldr.w	r1, [r9]
    f6a8:	6833      	ldr	r3, [r6, #0]
    f6aa:	4019      	ands	r1, r3
    f6ac:	d05c      	beq.n	f768 <usbd_dmareq_process+0xdc>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    f6ae:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    f6b2:	bf14      	ite	ne
    f6b4:	fa93 f1a3 	rbitne	r1, r3
    f6b8:	fa91 f1a1 	rbiteq	r1, r1
    f6bc:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    f6c0:	290f      	cmp	r1, #15
    f6c2:	bf8a      	itet	hi
    f6c4:	f1a1 0410 	subhi.w	r4, r1, #16
    f6c8:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    f6cc:	b2e4      	uxtbhi	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    f6ce:	f04f 0b01 	mov.w	fp, #1
            usbd_ep_state_t * p_state = ep_state_access(ep);
    f6d2:	4620      	mov	r0, r4
    f6d4:	f7ff fcce 	bl	f074 <ep_state_access>
            if (NRF_USBD_EPIN_CHECK(ep))
    f6d8:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    f6dc:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    f6e0:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    f6e4:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    f6e6:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    f6ea:	da40      	bge.n	f76e <usbd_dmareq_process+0xe2>
                continue_transfer = p_state->handler.feeder(
    f6ec:	6803      	ldr	r3, [r0, #0]
    f6ee:	8982      	ldrh	r2, [r0, #12]
    f6f0:	6841      	ldr	r1, [r0, #4]
    f6f2:	a802      	add	r0, sp, #8
    f6f4:	4798      	blx	r3
                if (!continue_transfer)
    f6f6:	b900      	cbnz	r0, f6fa <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    f6f8:	6028      	str	r0, [r5, #0]
    m_dma_pending = true;
    f6fa:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    f6fc:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    f6fe:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    f700:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    f704:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    f706:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    f70a:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    f70c:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    f710:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    f712:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    f714:	f004 0008 	and.w	r0, r4, #8
    f718:	9902      	ldr	r1, [sp, #8]
    f71a:	4b34      	ldr	r3, [pc, #208]	; (f7ec <usbd_dmareq_process+0x160>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    f71c:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    f720:	da4f      	bge.n	f7c2 <usbd_dmareq_process+0x136>
        if (NRF_USBD_EPISO_CHECK(ep))
    f722:	2800      	cmp	r0, #0
    f724:	d045      	beq.n	f7b2 <usbd_dmareq_process+0x126>
            p_reg->ISOIN.PTR    = ptr;
    f726:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    f72a:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    f72e:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    f730:	2201      	movs	r2, #1
    f732:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    f736:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f73a:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    f73e:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    f740:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    f742:	4a2b      	ldr	r2, [pc, #172]	; (f7f0 <usbd_dmareq_process+0x164>)
    f744:	4b2b      	ldr	r3, [pc, #172]	; (f7f4 <usbd_dmareq_process+0x168>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    f746:	4929      	ldr	r1, [pc, #164]	; (f7ec <usbd_dmareq_process+0x160>)
    f748:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    f74c:	bf38      	it	cc
    f74e:	4613      	movcc	r3, r2
    f750:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    f754:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f758:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    f75c:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    f75e:	b91a      	cbnz	r2, f768 <usbd_dmareq_process+0xdc>
    f760:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    f764:	2a00      	cmp	r2, #0
    f766:	d0f9      	beq.n	f75c <usbd_dmareq_process+0xd0>
}
    f768:	b005      	add	sp, #20
    f76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    f76e:	4620      	mov	r0, r4
    f770:	f7ff ff78 	bl	f664 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    f774:	89aa      	ldrh	r2, [r5, #12]
    f776:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    f778:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    f77a:	6869      	ldr	r1, [r5, #4]
    f77c:	f8d5 c000 	ldr.w	ip, [r5]
    f780:	a802      	add	r0, sp, #8
    f782:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    f784:	9a02      	ldr	r2, [sp, #8]
    f786:	2a00      	cmp	r2, #0
    f788:	d0b5      	beq.n	f6f6 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    f78a:	9a03      	ldr	r2, [sp, #12]
    f78c:	4297      	cmp	r7, r2
    f78e:	d9b2      	bls.n	f6f6 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    f790:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    f792:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    f794:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    f796:	f7ff fd3b 	bl	f210 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    f79a:	2306      	movs	r3, #6
    f79c:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    f7a0:	4b15      	ldr	r3, [pc, #84]	; (f7f8 <usbd_dmareq_process+0x16c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    f7a2:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    f7a6:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    f7a8:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    f7ac:	a801      	add	r0, sp, #4
    f7ae:	4798      	blx	r3
                    continue;
    f7b0:	e778      	b.n	f6a4 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    f7b2:	2014      	movs	r0, #20
    f7b4:	fb00 3304 	mla	r3, r0, r4, r3
    f7b8:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    f7bc:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    f7c0:	e7b5      	b.n	f72e <usbd_dmareq_process+0xa2>
        if (NRF_USBD_EPISO_CHECK(ep))
    f7c2:	b128      	cbz	r0, f7d0 <usbd_dmareq_process+0x144>
            p_reg->ISOOUT.PTR    = ptr;
    f7c4:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    f7c8:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    f7cc:	2328      	movs	r3, #40	; 0x28
    f7ce:	e7af      	b.n	f730 <usbd_dmareq_process+0xa4>
            p_reg->EPOUT[epnr].PTR    = ptr;
    f7d0:	2014      	movs	r0, #20
    f7d2:	fb00 3304 	mla	r3, r0, r4, r3
    f7d6:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    f7da:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    f7de:	e7f5      	b.n	f7cc <usbd_dmareq_process+0x140>
    f7e0:	200098c1 	.word	0x200098c1
    f7e4:	2000967c 	.word	0x2000967c
    f7e8:	200096ec 	.word	0x200096ec
    f7ec:	40036000 	.word	0x40036000
    f7f0:	0001386e 	.word	0x0001386e
    f7f4:	0001385c 	.word	0x0001385c
    f7f8:	20009810 	.word	0x20009810

0000f7fc <ev_epdata_handler>:
{
    f7fc:	b538      	push	{r3, r4, r5, lr}
        dataepstatus &= ~(1UL << bitpos);
    f7fe:	2501      	movs	r5, #1
    return p_reg->EPDATASTATUS;
    f800:	4b0e      	ldr	r3, [pc, #56]	; (f83c <ev_epdata_handler+0x40>)
    f802:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    f806:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    while (dataepstatus)
    f80a:	b91c      	cbnz	r4, f814 <ev_epdata_handler+0x18>
}
    f80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    f810:	f7ff bf3c 	b.w	f68c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    f814:	fa94 f3a4 	rbit	r3, r4
    f818:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    f81c:	2b0f      	cmp	r3, #15
    f81e:	bfc8      	it	gt
    f820:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    f824:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    f826:	bfd4      	ite	le
    f828:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    f82c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    f82e:	fa05 f303 	lsl.w	r3, r5, r3
    f832:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    f836:	f7ff fd29 	bl	f28c <usbd_ep_data_handler>
    f83a:	e7e6      	b.n	f80a <ev_epdata_handler+0xe>
    f83c:	40036000 	.word	0x40036000

0000f840 <nrf_usbd_epout_dma_handler>:
{
    f840:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    f842:	2200      	movs	r2, #0
    f844:	4b16      	ldr	r3, [pc, #88]	; (f8a0 <nrf_usbd_epout_dma_handler+0x60>)
{
    f846:	4604      	mov	r4, r0
    m_dma_pending = false;
    f848:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    f84a:	f7ff fc13 	bl	f074 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f84e:	7b83      	ldrb	r3, [r0, #14]
    f850:	2b03      	cmp	r3, #3
    f852:	d10d      	bne.n	f870 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f854:	4620      	mov	r0, r4
    f856:	f003 f91d 	bl	12a94 <ep2bit>
    f85a:	2301      	movs	r3, #1
    f85c:	fa03 f000 	lsl.w	r0, r3, r0
    f860:	43c0      	mvns	r0, r0
    f862:	f7ff fcd5 	bl	f210 <atomic_and.constprop.0.isra.0>
}
    f866:	b003      	add	sp, #12
    f868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    f86c:	f7ff bf0e 	b.w	f68c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    f870:	6805      	ldr	r5, [r0, #0]
    f872:	2d00      	cmp	r5, #0
    f874:	d1f7      	bne.n	f866 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f876:	4620      	mov	r0, r4
    f878:	f003 f90c 	bl	12a94 <ep2bit>
    f87c:	2301      	movs	r3, #1
    f87e:	fa03 f000 	lsl.w	r0, r3, r0
    f882:	43c0      	mvns	r0, r0
    f884:	f7ff fcc4 	bl	f210 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f888:	2306      	movs	r3, #6
    f88a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    f88e:	4b05      	ldr	r3, [pc, #20]	; (f8a4 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f890:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    f894:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f896:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    f89a:	a801      	add	r0, sp, #4
    f89c:	4798      	blx	r3
    f89e:	e7e2      	b.n	f866 <nrf_usbd_epout_dma_handler+0x26>
    f8a0:	200098c1 	.word	0x200098c1
    f8a4:	20009810 	.word	0x20009810

0000f8a8 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    f8a8:	4b02      	ldr	r3, [pc, #8]	; (f8b4 <nrfx_usbd_ep_stall+0xc>)
    f8aa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    f8ae:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    f8b2:	4770      	bx	lr
    f8b4:	40036000 	.word	0x40036000

0000f8b8 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    f8b8:	0702      	lsls	r2, r0, #28
    f8ba:	d413      	bmi.n	f8e4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    f8bc:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    f8c0:	f010 0f80 	tst.w	r0, #128	; 0x80
    f8c4:	4a08      	ldr	r2, [pc, #32]	; (f8e8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    f8c6:	bf0b      	itete	eq
    f8c8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    f8cc:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    f8d0:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    f8d4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    f8d8:	bf08      	it	eq
    f8da:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    f8dc:	1e43      	subs	r3, r0, #1
    f8de:	4258      	negs	r0, r3
    f8e0:	4158      	adcs	r0, r3
    f8e2:	4770      	bx	lr
        return false;
    f8e4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    f8e6:	4770      	bx	lr
    f8e8:	40036000 	.word	0x40036000

0000f8ec <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    f8ec:	4b04      	ldr	r3, [pc, #16]	; (f900 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    f8ee:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    f8f2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    f8f6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    f8fa:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    f8fe:	4770      	bx	lr
    f900:	40036000 	.word	0x40036000

0000f904 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    f904:	b510      	push	{r4, lr}
    f906:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    f908:	2208      	movs	r2, #8
    f90a:	2100      	movs	r1, #0
    f90c:	f002 fd28 	bl	12360 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    f910:	4b0e      	ldr	r3, [pc, #56]	; (f94c <nrfx_usbd_setup_get+0x48>)
    f912:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    f916:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    f918:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    f91c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    f91e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    f922:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    f926:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    f92a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    f92c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    f930:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    f934:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    f938:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    f93a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    f93e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    f942:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    f946:	80e3      	strh	r3, [r4, #6]
}
    f948:	bd10      	pop	{r4, pc}
    f94a:	bf00      	nop
    f94c:	40036000 	.word	0x40036000

0000f950 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    f950:	2201      	movs	r2, #1
    f952:	4b02      	ldr	r3, [pc, #8]	; (f95c <nrfx_usbd_setup_data_clear+0xc>)
    f954:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    f956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	40036000 	.word	0x40036000

0000f960 <ev_dma_epout0_handler>:
    m_dma_pending = false;
    f960:	2200      	movs	r2, #0
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    f962:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    f964:	4b11      	ldr	r3, [pc, #68]	; (f9ac <ev_dma_epout0_handler+0x4c>)
    f966:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    f968:	4b11      	ldr	r3, [pc, #68]	; (f9b0 <ev_dma_epout0_handler+0x50>)
    f96a:	7b9a      	ldrb	r2, [r3, #14]
    f96c:	2a03      	cmp	r2, #3
    f96e:	d106      	bne.n	f97e <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f970:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    f974:	b002      	add	sp, #8
    f976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f97a:	f7ff bc49 	b.w	f210 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    f97e:	681c      	ldr	r4, [r3, #0]
    f980:	b974      	cbnz	r4, f9a0 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    f982:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    f986:	f7ff fc43 	bl	f210 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f98a:	2306      	movs	r3, #6
    f98c:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    f990:	4b08      	ldr	r3, [pc, #32]	; (f9b4 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    f992:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    f996:	681b      	ldr	r3, [r3, #0]
    f998:	a801      	add	r0, sp, #4
    f99a:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    f99c:	b002      	add	sp, #8
    f99e:	bd10      	pop	{r4, pc}
    f9a0:	b002      	add	sp, #8
    f9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    f9a6:	f7ff bfd3 	b.w	f950 <nrfx_usbd_setup_data_clear>
    f9aa:	bf00      	nop
    f9ac:	200098c1 	.word	0x200098c1
    f9b0:	200096f0 	.word	0x200096f0
    f9b4:	20009810 	.word	0x20009810

0000f9b8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    f9b8:	2201      	movs	r2, #1
    f9ba:	4b02      	ldr	r3, [pc, #8]	; (f9c4 <nrfx_usbd_setup_clear+0xc>)
    f9bc:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    f9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    f9c0:	4770      	bx	lr
    f9c2:	bf00      	nop
    f9c4:	40036000 	.word	0x40036000

0000f9c8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    f9c8:	2201      	movs	r2, #1
    f9ca:	4b02      	ldr	r3, [pc, #8]	; (f9d4 <nrfx_usbd_setup_stall+0xc>)
    f9cc:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    f9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    f9d0:	4770      	bx	lr
    f9d2:	bf00      	nop
    f9d4:	40036000 	.word	0x40036000

0000f9d8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    f9d8:	4b01      	ldr	r3, [pc, #4]	; (f9e0 <nrfx_usbd_last_setup_dir_get+0x8>)
    f9da:	7818      	ldrb	r0, [r3, #0]
    f9dc:	4770      	bx	lr
    f9de:	bf00      	nop
    f9e0:	200098c3 	.word	0x200098c3

0000f9e4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    f9e4:	4602      	mov	r2, r0
    f9e6:	b510      	push	{r4, lr}
	__asm__ volatile(
    f9e8:	f04f 0320 	mov.w	r3, #32
    f9ec:	f3ef 8411 	mrs	r4, BASEPRI
    f9f0:	f383 8812 	msr	BASEPRI_MAX, r3
    f9f4:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    f9f8:	f003 f84c 	bl	12a94 <ep2bit>
    f9fc:	2301      	movs	r3, #1
    f9fe:	490d      	ldr	r1, [pc, #52]	; (fa34 <nrfx_usbd_transfer_out_drop+0x50>)
    fa00:	fa03 f000 	lsl.w	r0, r3, r0
    fa04:	680b      	ldr	r3, [r1, #0]
    fa06:	ea23 0300 	bic.w	r3, r3, r0
    fa0a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    fa0c:	f012 0108 	ands.w	r1, r2, #8
    fa10:	d10a      	bne.n	fa28 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    fa12:	f002 030f 	and.w	r3, r2, #15
    fa16:	009b      	lsls	r3, r3, #2
    fa18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fa1c:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    fa20:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    fa24:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    fa28:	f384 8811 	msr	BASEPRI, r4
    fa2c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    fa30:	bd10      	pop	{r4, pc}
    fa32:	bf00      	nop
    fa34:	200096ec 	.word	0x200096ec

0000fa38 <usbd_ep_abort>:
{
    fa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa3a:	4601      	mov	r1, r0
	__asm__ volatile(
    fa3c:	f04f 0320 	mov.w	r3, #32
    fa40:	f3ef 8511 	mrs	r5, BASEPRI
    fa44:	f383 8812 	msr	BASEPRI_MAX, r3
    fa48:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    fa4c:	f7ff fb12 	bl	f074 <ep_state_access>
    fa50:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    fa52:	4608      	mov	r0, r1
    fa54:	f003 f81e 	bl	12a94 <ep2bit>
    fa58:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    fa5a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    fa5e:	fa02 f200 	lsl.w	r2, r2, r0
    fa62:	482e      	ldr	r0, [pc, #184]	; (fb1c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    fa64:	d118      	bne.n	fa98 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    fa66:	6803      	ldr	r3, [r0, #0]
    fa68:	ea32 0403 	bics.w	r4, r2, r3
    fa6c:	d00a      	beq.n	fa84 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    fa6e:	4608      	mov	r0, r1
    fa70:	f7ff ffb8 	bl	f9e4 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    fa74:	2303      	movs	r3, #3
    fa76:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    fa78:	f385 8811 	msr	BASEPRI, r5
    fa7c:	f3bf 8f6f 	isb	sy
}
    fa80:	b003      	add	sp, #12
    fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    fa84:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    fa88:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    fa8a:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    fa8c:	4b24      	ldr	r3, [pc, #144]	; (fb20 <usbd_ep_abort+0xe8>)
    fa8e:	6818      	ldr	r0, [r3, #0]
    fa90:	ea20 0002 	bic.w	r0, r0, r2
    fa94:	6018      	str	r0, [r3, #0]
    fa96:	e7ed      	b.n	fa74 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    fa98:	070b      	lsls	r3, r1, #28
    fa9a:	d415      	bmi.n	fac8 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    fa9c:	2980      	cmp	r1, #128	; 0x80
    fa9e:	4b21      	ldr	r3, [pc, #132]	; (fb24 <usbd_ep_abort+0xec>)
    faa0:	d02f      	beq.n	fb02 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    faa2:	f001 040f 	and.w	r4, r1, #15
    faa6:	f204 34da 	addw	r4, r4, #986	; 0x3da
    faaa:	0064      	lsls	r4, r4, #1
    faac:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    fab0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    fab4:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    fab8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    faba:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    fabe:	433c      	orrs	r4, r7
    fac0:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    fac4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    fac8:	4f15      	ldr	r7, [pc, #84]	; (fb20 <usbd_ep_abort+0xe8>)
    faca:	6804      	ldr	r4, [r0, #0]
    facc:	683b      	ldr	r3, [r7, #0]
    face:	ea64 0c03 	orn	ip, r4, r3
    fad2:	ea1c 0f02 	tst.w	ip, r2
    fad6:	d0cf      	beq.n	fa78 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    fad8:	4313      	orrs	r3, r2
    fada:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    fadc:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    fade:	ea24 0402 	bic.w	r4, r4, r2
    fae2:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    fae4:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    fae6:	2303      	movs	r3, #3
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    fae8:	2206      	movs	r2, #6
            p_state->status = NRFX_USBD_EP_ABORTED;
    faea:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    faec:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    faf0:	4b0d      	ldr	r3, [pc, #52]	; (fb28 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    faf2:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    faf6:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    faf8:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
    fafc:	a801      	add	r0, sp, #4
    fafe:	4798      	blx	r3
    fb00:	e7ba      	b.n	fa78 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    fb02:	f240 74b4 	movw	r4, #1972	; 0x7b4
    fb06:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    fb0a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    fb0e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    fb12:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    fb14:	f044 0404 	orr.w	r4, r4, #4
    fb18:	e7d1      	b.n	fabe <usbd_ep_abort+0x86>
    fb1a:	bf00      	nop
    fb1c:	2000967c 	.word	0x2000967c
    fb20:	200096ec 	.word	0x200096ec
    fb24:	40036000 	.word	0x40036000
    fb28:	20009810 	.word	0x20009810

0000fb2c <ev_setup_handler>:
{
    fb2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    fb2e:	4b17      	ldr	r3, [pc, #92]	; (fb8c <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    fb30:	4c17      	ldr	r4, [pc, #92]	; (fb90 <ev_setup_handler+0x64>)
    fb32:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    fb36:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    fb38:	4e16      	ldr	r6, [pc, #88]	; (fb94 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    fb3a:	43da      	mvns	r2, r3
    fb3c:	4b16      	ldr	r3, [pc, #88]	; (fb98 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    fb3e:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    fb40:	681b      	ldr	r3, [r3, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    fb42:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    fb44:	b292      	uxth	r2, r2
    fb46:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    fb48:	f002 ffa4 	bl	12a94 <ep2bit>
    fb4c:	2301      	movs	r3, #1
    fb4e:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    fb50:	4213      	tst	r3, r2
    fb52:	d002      	beq.n	fb5a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    fb54:	4608      	mov	r0, r1
    fb56:	f7ff ff6f 	bl	fa38 <usbd_ep_abort>
    (void)(NRFX_ATOMIC_FETCH_AND(
    fb5a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    fb5e:	f005 0580 	and.w	r5, r5, #128	; 0x80
    m_last_setup_dir =
    fb62:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    fb64:	f7ff fb54 	bl	f210 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    fb68:	6823      	ldr	r3, [r4, #0]
    m_event_handler(&evt);
    fb6a:	a801      	add	r0, sp, #4
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    fb6c:	f043 0301 	orr.w	r3, r3, #1
    fb70:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    fb72:	2300      	movs	r3, #0
    fb74:	f8ad 3005 	strh.w	r3, [sp, #5]
    fb78:	f88d 3007 	strb.w	r3, [sp, #7]
    fb7c:	2305      	movs	r3, #5
    fb7e:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    fb82:	4b06      	ldr	r3, [pc, #24]	; (fb9c <ev_setup_handler+0x70>)
    fb84:	681b      	ldr	r3, [r3, #0]
    fb86:	4798      	blx	r3
}
    fb88:	b002      	add	sp, #8
    fb8a:	bd70      	pop	{r4, r5, r6, pc}
    fb8c:	40036000 	.word	0x40036000
    fb90:	200096ec 	.word	0x200096ec
    fb94:	200098c3 	.word	0x200098c3
    fb98:	2000967c 	.word	0x2000967c
    fb9c:	20009810 	.word	0x20009810

0000fba0 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    fba0:	4b1b      	ldr	r3, [pc, #108]	; (fc10 <nrfx_usbd_irq_handler+0x70>)
{
    fba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fba6:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    fbaa:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    fbac:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    fbae:	461d      	mov	r5, r3
    while (to_process)
    fbb0:	b970      	cbnz	r0, fbd0 <nrfx_usbd_irq_handler+0x30>
        active &= ~(1UL << event_nr);
    fbb2:	f04f 0801 	mov.w	r8, #1
        m_isr[event_nr]();
    fbb6:	4f17      	ldr	r7, [pc, #92]	; (fc14 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    fbb8:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    fbbc:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
    while (active)
    fbc0:	b9bc      	cbnz	r4, fbf2 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    fbc2:	f7ff fd63 	bl	f68c <usbd_dmareq_process>
    if (setup_active)
    fbc6:	b306      	cbz	r6, fc0a <nrfx_usbd_irq_handler+0x6a>
}
    fbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    fbcc:	f7ff bfae 	b.w	fb2c <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    fbd0:	fa90 f2a0 	rbit	r2, r0
    fbd4:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    fbd8:	490f      	ldr	r1, [pc, #60]	; (fc18 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    fbda:	0096      	lsls	r6, r2, #2
    fbdc:	4431      	add	r1, r6
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    fbde:	680e      	ldr	r6, [r1, #0]
            active |= 1UL << event_nr;
    fbe0:	fa04 f202 	lsl.w	r2, r4, r2
    if (ret)
    fbe4:	b116      	cbz	r6, fbec <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    fbe6:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    fbe8:	6809      	ldr	r1, [r1, #0]
    fbea:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    fbec:	ea20 0002 	bic.w	r0, r0, r2
    fbf0:	e7de      	b.n	fbb0 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    fbf2:	fa94 f5a4 	rbit	r5, r4
    fbf6:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    fbfa:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    fbfe:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    fc02:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    fc04:	ea24 0405 	bic.w	r4, r4, r5
    fc08:	e7da      	b.n	fbc0 <nrfx_usbd_irq_handler+0x20>
}
    fc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc0e:	bf00      	nop
    fc10:	40036000 	.word	0x40036000
    fc14:	000137cc 	.word	0x000137cc
    fc18:	40036100 	.word	0x40036100

0000fc1c <usbd_ep_abort_all>:
{
    fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        ep_waiting &= ~(1U << bitpos);
    fc1e:	2701      	movs	r7, #1
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    fc20:	4e10      	ldr	r6, [pc, #64]	; (fc64 <usbd_ep_abort_all+0x48>)
    fc22:	4b11      	ldr	r3, [pc, #68]	; (fc68 <usbd_ep_abort_all+0x4c>)
    fc24:	6834      	ldr	r4, [r6, #0]
    fc26:	681b      	ldr	r3, [r3, #0]
    fc28:	0c24      	lsrs	r4, r4, #16
    fc2a:	0424      	lsls	r4, r4, #16
    fc2c:	431c      	orrs	r4, r3
    while (0 != ep_waiting)
    fc2e:	b91c      	cbnz	r4, fc38 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    fc30:	f240 13ff 	movw	r3, #511	; 0x1ff
    fc34:	6033      	str	r3, [r6, #0]
}
    fc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    fc38:	fa94 f5a4 	rbit	r5, r4
    fc3c:	fab5 f585 	clz	r5, r5
    fc40:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    fc42:	2d0f      	cmp	r5, #15
    fc44:	bfc6      	itte	gt
    fc46:	f1a5 0010 	subgt.w	r0, r5, #16
    fc4a:	b2c0      	uxtbgt	r0, r0
    fc4c:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    fc50:	0703      	lsls	r3, r0, #28
    fc52:	d401      	bmi.n	fc58 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    fc54:	f7ff fef0 	bl	fa38 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    fc58:	fa07 f505 	lsl.w	r5, r7, r5
    fc5c:	ea24 0405 	bic.w	r4, r4, r5
    fc60:	e7e5      	b.n	fc2e <usbd_ep_abort_all+0x12>
    fc62:	bf00      	nop
    fc64:	200096ec 	.word	0x200096ec
    fc68:	2000967c 	.word	0x2000967c

0000fc6c <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fc6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    fc70:	4b0b      	ldr	r3, [pc, #44]	; (fca0 <nrfx_usbd_stop+0x34>)
{
    fc72:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    fc74:	2036      	movs	r0, #54	; 0x36
    fc76:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    fc7a:	f7fb fbab 	bl	b3d4 <arch_irq_is_enabled>
    fc7e:	b170      	cbz	r0, fc9e <nrfx_usbd_stop+0x32>
        usbd_ep_abort_all();
    fc80:	f7ff ffcc 	bl	fc1c <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    fc84:	2300      	movs	r3, #0
    fc86:	4c07      	ldr	r4, [pc, #28]	; (fca4 <nrfx_usbd_stop+0x38>)
        NRFX_IRQ_DISABLE(USBD_IRQn);
    fc88:	2036      	movs	r0, #54	; 0x36
    fc8a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    fc8e:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    fc92:	f7fb fb8b 	bl	b3ac <arch_irq_disable>
    p_reg->INTENCLR = mask;
    fc96:	f04f 33ff 	mov.w	r3, #4294967295
    fc9a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    fc9e:	bd10      	pop	{r4, pc}
    fca0:	e000e100 	.word	0xe000e100
    fca4:	40036000 	.word	0x40036000

0000fca8 <nrfx_usbd_disable>:
{
    fca8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    fcaa:	f7ff ffdf 	bl	fc6c <nrfx_usbd_stop>
    return p_reg->INTENSET;
    fcae:	4b08      	ldr	r3, [pc, #32]	; (fcd0 <nrfx_usbd_disable+0x28>)
    fcb0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    fcb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    fcb8:	2200      	movs	r2, #0
    fcba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    fcbe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    fcc2:	4b04      	ldr	r3, [pc, #16]	; (fcd4 <nrfx_usbd_disable+0x2c>)
    fcc4:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    fcc6:	2201      	movs	r2, #1
    fcc8:	4b03      	ldr	r3, [pc, #12]	; (fcd8 <nrfx_usbd_disable+0x30>)
    fcca:	701a      	strb	r2, [r3, #0]
}
    fccc:	bd08      	pop	{r3, pc}
    fcce:	bf00      	nop
    fcd0:	40036000 	.word	0x40036000
    fcd4:	200098c1 	.word	0x200098c1
    fcd8:	200098c2 	.word	0x200098c2

0000fcdc <nrfx_usbd_suspend>:
{
    fcdc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fcde:	f04f 0320 	mov.w	r3, #32
    fce2:	f3ef 8511 	mrs	r5, BASEPRI
    fce6:	f383 8812 	msr	BASEPRI_MAX, r3
    fcea:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    fcee:	4b11      	ldr	r3, [pc, #68]	; (fd34 <nrfx_usbd_suspend+0x58>)
    fcf0:	781b      	ldrb	r3, [r3, #0]
    fcf2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    fcf6:	b933      	cbnz	r3, fd06 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    fcf8:	2400      	movs	r4, #0
	__asm__ volatile(
    fcfa:	f385 8811 	msr	BASEPRI, r5
    fcfe:	f3bf 8f6f 	isb	sy
}
    fd02:	4620      	mov	r0, r4
    fd04:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    fd06:	f7ff ff89 	bl	fc1c <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    fd0a:	4b0b      	ldr	r3, [pc, #44]	; (fd38 <nrfx_usbd_suspend+0x5c>)
    fd0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    fd10:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    fd14:	d1f0      	bne.n	fcf8 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    fd16:	2101      	movs	r1, #1
    fd18:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    fd1c:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    fd20:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    fd24:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    fd26:	bf42      	ittt	mi
    fd28:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    bool suspended = false;
    fd2c:	4614      	movmi	r4, r2
    (void) p_reg->LOWPOWER;
    fd2e:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
}
    fd32:	e7e2      	b.n	fcfa <nrfx_usbd_suspend+0x1e>
    fd34:	200098c0 	.word	0x200098c0
    fd38:	40036000 	.word	0x40036000

0000fd3c <nrfx_usbd_ep_disable>:
{
    fd3c:	b510      	push	{r4, lr}
    fd3e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    fd40:	f7ff fe7a 	bl	fa38 <usbd_ep_abort>
        p_reg->EPINEN &= ~(1UL << epnr);
    fd44:	2301      	movs	r3, #1
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    fd46:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    fd4a:	4083      	lsls	r3, r0
    fd4c:	43db      	mvns	r3, r3
    fd4e:	4a0c      	ldr	r2, [pc, #48]	; (fd80 <nrfx_usbd_ep_disable+0x44>)
    if (NRF_USBD_EPIN_CHECK(ep))
    fd50:	f014 0f80 	tst.w	r4, #128	; 0x80
        p_reg->EPINEN &= ~(1UL << epnr);
    fd54:	bf15      	itete	ne
    fd56:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    fd5a:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    fd5e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    fd60:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    fd62:	bf15      	itete	ne
    fd64:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    fd68:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    fd6c:	4b05      	ldrne	r3, [pc, #20]	; (fd84 <nrfx_usbd_ep_disable+0x48>)
    fd6e:	4b06      	ldreq	r3, [pc, #24]	; (fd88 <nrfx_usbd_ep_disable+0x4c>)
    fd70:	5c1a      	ldrb	r2, [r3, r0]
    fd72:	2301      	movs	r3, #1
    fd74:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    fd76:	4a02      	ldr	r2, [pc, #8]	; (fd80 <nrfx_usbd_ep_disable+0x44>)
    fd78:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    fd7c:	bd10      	pop	{r4, pc}
    fd7e:	bf00      	nop
    fd80:	40036000 	.word	0x40036000
    fd84:	00014780 	.word	0x00014780
    fd88:	00014789 	.word	0x00014789

0000fd8c <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    fd8c:	b243      	sxtb	r3, r0
    fd8e:	2b00      	cmp	r3, #0
    fd90:	4b23      	ldr	r3, [pc, #140]	; (fe20 <nrfx_usbd_ep_enable+0x94>)
    fd92:	4a24      	ldr	r2, [pc, #144]	; (fe24 <nrfx_usbd_ep_enable+0x98>)
    fd94:	bfa8      	it	ge
    fd96:	461a      	movge	r2, r3
{
    fd98:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    fd9a:	f04f 0401 	mov.w	r4, #1
    fd9e:	f000 030f 	and.w	r3, r0, #15
    fda2:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    fda4:	4a20      	ldr	r2, [pc, #128]	; (fe28 <nrfx_usbd_ep_enable+0x9c>)
    fda6:	fa04 f101 	lsl.w	r1, r4, r1
{
    fdaa:	4605      	mov	r5, r0
    fdac:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    fdb0:	da0c      	bge.n	fdcc <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    fdb2:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    fdb6:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    fdb8:	07c8      	lsls	r0, r1, #31
    fdba:	d406      	bmi.n	fdca <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    fdbc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    fdc0:	fa04 f303 	lsl.w	r3, r4, r3
    fdc4:	4303      	orrs	r3, r0
    fdc6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    fdca:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    fdcc:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    fdd0:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    fdd2:	07c9      	lsls	r1, r1, #31
    fdd4:	d4f9      	bmi.n	fdca <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    fdd6:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    fdda:	fa04 f103 	lsl.w	r1, r4, r3
    fdde:	4331      	orrs	r1, r6
    fde0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    fde4:	2b00      	cmp	r3, #0
    fde6:	d0f0      	beq.n	fdca <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    fde8:	0703      	lsls	r3, r0, #28
    fdea:	d4ee      	bmi.n	fdca <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    fdec:	f04f 0320 	mov.w	r3, #32
    fdf0:	f3ef 8611 	mrs	r6, BASEPRI
    fdf4:	f383 8812 	msr	BASEPRI_MAX, r3
    fdf8:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    fdfc:	f7ff fdf2 	bl	f9e4 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    fe00:	4628      	mov	r0, r5
    fe02:	f002 fe47 	bl	12a94 <ep2bit>
    fe06:	4a09      	ldr	r2, [pc, #36]	; (fe2c <nrfx_usbd_ep_enable+0xa0>)
    fe08:	fa04 f000 	lsl.w	r0, r4, r0
    fe0c:	6813      	ldr	r3, [r2, #0]
    fe0e:	ea23 0000 	bic.w	r0, r3, r0
    fe12:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    fe14:	f386 8811 	msr	BASEPRI, r6
    fe18:	f3bf 8f6f 	isb	sy
}
    fe1c:	e7d5      	b.n	fdca <nrfx_usbd_ep_enable+0x3e>
    fe1e:	bf00      	nop
    fe20:	00014789 	.word	0x00014789
    fe24:	00014780 	.word	0x00014780
    fe28:	40036000 	.word	0x40036000
    fe2c:	2000967c 	.word	0x2000967c

0000fe30 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    fe30:	0603      	lsls	r3, r0, #24
{
    fe32:	b510      	push	{r4, lr}
    fe34:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    fe36:	d405      	bmi.n	fe44 <nrfx_usbd_ep_stall_clear+0x14>
    fe38:	f7ff fd3e 	bl	f8b8 <nrfx_usbd_ep_stall_check>
    fe3c:	b110      	cbz	r0, fe44 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    fe3e:	4620      	mov	r0, r4
    fe40:	f7ff fdd0 	bl	f9e4 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    fe44:	4b01      	ldr	r3, [pc, #4]	; (fe4c <nrfx_usbd_ep_stall_clear+0x1c>)
    fe46:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    fe4a:	bd10      	pop	{r4, pc}
    fe4c:	40036000 	.word	0x40036000

0000fe50 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    fe50:	2207      	movs	r2, #7
    fe52:	4b02      	ldr	r3, [pc, #8]	; (fe5c <nrfx_usbreg_enable+0xc>)
    fe54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    fe58:	4770      	bx	lr
    fe5a:	bf00      	nop
    fe5c:	40037000 	.word	0x40037000

0000fe60 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    fe60:	2207      	movs	r2, #7
    fe62:	4b02      	ldr	r3, [pc, #8]	; (fe6c <nrfx_usbreg_disable+0xc>)
    fe64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    fe68:	4770      	bx	lr
    fe6a:	bf00      	nop
    fe6c:	40037000 	.word	0x40037000

0000fe70 <nrfx_usbreg_uninit>:
    fe70:	2207      	movs	r2, #7

void nrfx_usbreg_uninit(void)
{
    fe72:	b508      	push	{r3, lr}
    fe74:	4b04      	ldr	r3, [pc, #16]	; (fe88 <nrfx_usbreg_uninit+0x18>)
    nrfx_usbreg_disable();
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    fe76:	2037      	movs	r0, #55	; 0x37
    fe78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    fe7c:	f7fb fa96 	bl	b3ac <arch_irq_disable>
    m_usbevt_handler = NULL;
    fe80:	2200      	movs	r2, #0
    fe82:	4b02      	ldr	r3, [pc, #8]	; (fe8c <nrfx_usbreg_uninit+0x1c>)
    fe84:	601a      	str	r2, [r3, #0]
}
    fe86:	bd08      	pop	{r3, pc}
    fe88:	40037000 	.word	0x40037000
    fe8c:	20009854 	.word	0x20009854

0000fe90 <nrfx_usbreg_init>:
{
    fe90:	b510      	push	{r4, lr}
    fe92:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    fe94:	f7ff ffec 	bl	fe70 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    fe98:	6822      	ldr	r2, [r4, #0]
    fe9a:	4b07      	ldr	r3, [pc, #28]	; (feb8 <nrfx_usbreg_init+0x28>)
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    fe9c:	2037      	movs	r0, #55	; 0x37
}
    fe9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m_usbevt_handler = p_config->handler;
    fea2:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fea4:	2200      	movs	r2, #0
    fea6:	4b05      	ldr	r3, [pc, #20]	; (febc <nrfx_usbreg_init+0x2c>)
    fea8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    feac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    feb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    feb4:	f7fb ba6a 	b.w	b38c <arch_irq_enable>
    feb8:	20009854 	.word	0x20009854
    febc:	40037000 	.word	0x40037000

0000fec0 <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    fec0:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fec2:	4c11      	ldr	r4, [pc, #68]	; (ff08 <nrfx_usbreg_irq_handler+0x48>)
    fec4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    fec8:	b12b      	cbz	r3, fed6 <nrfx_usbreg_irq_handler+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    feca:	2000      	movs	r0, #0
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    fecc:	4b0f      	ldr	r3, [pc, #60]	; (ff0c <nrfx_usbreg_irq_handler+0x4c>)
    fece:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    fed2:	681b      	ldr	r3, [r3, #0]
    fed4:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fed6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    feda:	b133      	cbz	r3, feea <nrfx_usbreg_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fedc:	2300      	movs	r3, #0
    fede:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    fee2:	4b0a      	ldr	r3, [pc, #40]	; (ff0c <nrfx_usbreg_irq_handler+0x4c>)
    fee4:	2001      	movs	r0, #1
    fee6:	681b      	ldr	r3, [r3, #0]
    fee8:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    feea:	4b07      	ldr	r3, [pc, #28]	; (ff08 <nrfx_usbreg_irq_handler+0x48>)
    feec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    fef0:	b142      	cbz	r2, ff04 <nrfx_usbreg_irq_handler+0x44>
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    }
}
    fef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fef6:	2200      	movs	r2, #0
    fef8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    fefc:	4b03      	ldr	r3, [pc, #12]	; (ff0c <nrfx_usbreg_irq_handler+0x4c>)
    fefe:	2002      	movs	r0, #2
    ff00:	681b      	ldr	r3, [r3, #0]
    ff02:	4718      	bx	r3
}
    ff04:	bd10      	pop	{r4, pc}
    ff06:	bf00      	nop
    ff08:	40037000 	.word	0x40037000
    ff0c:	20009854 	.word	0x20009854

0000ff10 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ff10:	4b0e      	ldr	r3, [pc, #56]	; (ff4c <z_sys_init_run_level+0x3c>)
{
    ff12:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ff14:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ff18:	3001      	adds	r0, #1
    ff1a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ff1e:	42a6      	cmp	r6, r4
    ff20:	d800      	bhi.n	ff24 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    ff22:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    ff24:	e9d4 3500 	ldrd	r3, r5, [r4]
    ff28:	4628      	mov	r0, r5
    ff2a:	4798      	blx	r3
		if (dev != NULL) {
    ff2c:	b165      	cbz	r5, ff48 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    ff2e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    ff30:	b130      	cbz	r0, ff40 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ff32:	2800      	cmp	r0, #0
    ff34:	bfb8      	it	lt
    ff36:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    ff38:	28ff      	cmp	r0, #255	; 0xff
    ff3a:	bfa8      	it	ge
    ff3c:	20ff      	movge	r0, #255	; 0xff
    ff3e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    ff40:	785a      	ldrb	r2, [r3, #1]
    ff42:	f042 0201 	orr.w	r2, r2, #1
    ff46:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ff48:	3408      	adds	r4, #8
    ff4a:	e7e8      	b.n	ff1e <z_sys_init_run_level+0xe>
    ff4c:	00013830 	.word	0x00013830

0000ff50 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    ff50:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    ff52:	4605      	mov	r5, r0
    ff54:	b910      	cbnz	r0, ff5c <z_impl_device_get_binding+0xc>
		return NULL;
    ff56:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    ff58:	4620      	mov	r0, r4
    ff5a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    ff5c:	7803      	ldrb	r3, [r0, #0]
    ff5e:	2b00      	cmp	r3, #0
    ff60:	d0f9      	beq.n	ff56 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    ff62:	4c0e      	ldr	r4, [pc, #56]	; (ff9c <z_impl_device_get_binding+0x4c>)
    ff64:	4e0e      	ldr	r6, [pc, #56]	; (ffa0 <z_impl_device_get_binding+0x50>)
    ff66:	42b4      	cmp	r4, r6
    ff68:	d108      	bne.n	ff7c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    ff6a:	4c0c      	ldr	r4, [pc, #48]	; (ff9c <z_impl_device_get_binding+0x4c>)
    ff6c:	42b4      	cmp	r4, r6
    ff6e:	d0f2      	beq.n	ff56 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    ff70:	4620      	mov	r0, r4
    ff72:	f002 fde4 	bl	12b3e <z_device_is_ready>
    ff76:	b950      	cbnz	r0, ff8e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    ff78:	3418      	adds	r4, #24
    ff7a:	e7f7      	b.n	ff6c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    ff7c:	4620      	mov	r0, r4
    ff7e:	f002 fdde 	bl	12b3e <z_device_is_ready>
    ff82:	b110      	cbz	r0, ff8a <z_impl_device_get_binding+0x3a>
    ff84:	6823      	ldr	r3, [r4, #0]
    ff86:	42ab      	cmp	r3, r5
    ff88:	d0e6      	beq.n	ff58 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    ff8a:	3418      	adds	r4, #24
    ff8c:	e7eb      	b.n	ff66 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    ff8e:	4628      	mov	r0, r5
    ff90:	6821      	ldr	r1, [r4, #0]
    ff92:	f002 f9ce 	bl	12332 <strcmp>
    ff96:	2800      	cmp	r0, #0
    ff98:	d1ee      	bne.n	ff78 <z_impl_device_get_binding+0x28>
    ff9a:	e7dd      	b.n	ff58 <z_impl_device_get_binding+0x8>
    ff9c:	00013238 	.word	0x00013238
    ffa0:	000132e0 	.word	0x000132e0

0000ffa4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ffa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffa8:	b086      	sub	sp, #24
    ffaa:	4605      	mov	r5, r0
    ffac:	460e      	mov	r6, r1
    ffae:	af00      	add	r7, sp, #0
	__asm__ volatile(
    ffb0:	f04f 0320 	mov.w	r3, #32
    ffb4:	f3ef 8811 	mrs	r8, BASEPRI
    ffb8:	f383 8812 	msr	BASEPRI_MAX, r3
    ffbc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    ffc0:	f000 ffb2 	bl	10f28 <z_impl_z_current_get>
    ffc4:	2d04      	cmp	r5, #4
    ffc6:	bf98      	it	ls
    ffc8:	4b2c      	ldrls	r3, [pc, #176]	; (1007c <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ffca:	46e9      	mov	r9, sp
    ffcc:	b08a      	sub	sp, #40	; 0x28
    ffce:	4604      	mov	r4, r0
    ffd0:	466a      	mov	r2, sp
    ffd2:	bf94      	ite	ls
    ffd4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    ffd8:	4b29      	ldrhi	r3, [pc, #164]	; (10080 <z_fatal_error+0xdc>)
    ffda:	61d3      	str	r3, [r2, #28]
    ffdc:	2303      	movs	r3, #3
    ffde:	f04f 0a00 	mov.w	sl, #0
    ffe2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    ffe6:	4927      	ldr	r1, [pc, #156]	; (10084 <z_fatal_error+0xe0>)
    ffe8:	4b27      	ldr	r3, [pc, #156]	; (10088 <z_fatal_error+0xe4>)
    ffea:	e9c2 1505 	strd	r1, r5, [r2, #20]
    ffee:	f8c2 a020 	str.w	sl, [r2, #32]
    fff2:	f842 3f10 	str.w	r3, [r2, #16]!
    fff6:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    fffa:	4653      	mov	r3, sl
    fffc:	4823      	ldr	r0, [pc, #140]	; (1008c <z_fatal_error+0xe8>)
    fffe:	f7f9 fe67 	bl	9cd0 <z_impl_z_log_msg_static_create>
   10002:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   10004:	b17e      	cbz	r6, 10026 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   10006:	69f3      	ldr	r3, [r6, #28]
   10008:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1000c:	b15b      	cbz	r3, 10026 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   1000e:	4b20      	ldr	r3, [pc, #128]	; (10090 <z_fatal_error+0xec>)
   10010:	617b      	str	r3, [r7, #20]
   10012:	2302      	movs	r3, #2
   10014:	613b      	str	r3, [r7, #16]
   10016:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1001a:	4653      	mov	r3, sl
   1001c:	481b      	ldr	r0, [pc, #108]	; (1008c <z_fatal_error+0xe8>)
   1001e:	f107 0210 	add.w	r2, r7, #16
   10022:	f7f9 fe55 	bl	9cd0 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   10026:	b12c      	cbz	r4, 10034 <z_fatal_error+0x90>
   10028:	4620      	mov	r0, r4
   1002a:	f002 fdc8 	bl	12bbe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1002e:	b108      	cbz	r0, 10034 <z_fatal_error+0x90>
   10030:	7803      	ldrb	r3, [r0, #0]
   10032:	b903      	cbnz	r3, 10036 <z_fatal_error+0x92>
		thread_name = "unknown";
   10034:	4817      	ldr	r0, [pc, #92]	; (10094 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   10036:	46e9      	mov	r9, sp
   10038:	b08a      	sub	sp, #40	; 0x28
   1003a:	466a      	mov	r2, sp
   1003c:	4b16      	ldr	r3, [pc, #88]	; (10098 <z_fatal_error+0xf4>)
   1003e:	61d0      	str	r0, [r2, #28]
   10040:	e9c2 3405 	strd	r3, r4, [r2, #20]
   10044:	2303      	movs	r3, #3
   10046:	f882 3020 	strb.w	r3, [r2, #32]
   1004a:	4b14      	ldr	r3, [pc, #80]	; (1009c <z_fatal_error+0xf8>)
   1004c:	f842 3f10 	str.w	r3, [r2, #16]!
   10050:	2300      	movs	r3, #0
   10052:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   10056:	480d      	ldr	r0, [pc, #52]	; (1008c <z_fatal_error+0xe8>)
   10058:	f7f9 fe3a 	bl	9cd0 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1005c:	4631      	mov	r1, r6
   1005e:	46cd      	mov	sp, r9
   10060:	4628      	mov	r0, r5
   10062:	f7fe f987 	bl	e374 <k_sys_fatal_error_handler>
	__asm__ volatile(
   10066:	f388 8811 	msr	BASEPRI, r8
   1006a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1006e:	4620      	mov	r0, r4
   10070:	f7fb fe1e 	bl	bcb0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   10074:	3718      	adds	r7, #24
   10076:	46bd      	mov	sp, r7
   10078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1007c:	00013848 	.word	0x00013848
   10080:	00014792 	.word	0x00014792
   10084:	000147a8 	.word	0x000147a8
   10088:	01000005 	.word	0x01000005
   1008c:	0001356c 	.word	0x0001356c
   10090:	000147d0 	.word	0x000147d0
   10094:	000147a0 	.word	0x000147a0
   10098:	000147f1 	.word	0x000147f1
   1009c:	01000004 	.word	0x01000004

000100a0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   100a0:	2201      	movs	r2, #1
{
   100a2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   100a4:	4b09      	ldr	r3, [pc, #36]	; (100cc <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   100a6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   100a8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   100aa:	f7ff ff31 	bl	ff10 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   100ae:	f001 f9e3 	bl	11478 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   100b2:	2003      	movs	r0, #3
   100b4:	f7ff ff2c 	bl	ff10 <z_sys_init_run_level>

	z_init_static_threads();
   100b8:	f000 f964 	bl	10384 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   100bc:	f7f8 fb62 	bl	8784 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   100c0:	4a03      	ldr	r2, [pc, #12]	; (100d0 <bg_thread_main+0x30>)
   100c2:	7b13      	ldrb	r3, [r2, #12]
   100c4:	f023 0301 	bic.w	r3, r3, #1
   100c8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   100ca:	bd08      	pop	{r3, pc}
   100cc:	200098c4 	.word	0x200098c4
   100d0:	20008818 	.word	0x20008818

000100d4 <z_bss_zero>:
{
   100d4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   100d6:	4803      	ldr	r0, [pc, #12]	; (100e4 <z_bss_zero+0x10>)
   100d8:	4a03      	ldr	r2, [pc, #12]	; (100e8 <z_bss_zero+0x14>)
   100da:	2100      	movs	r1, #0
   100dc:	1a12      	subs	r2, r2, r0
   100de:	f002 fd38 	bl	12b52 <z_early_memset>
}
   100e2:	bd08      	pop	{r3, pc}
   100e4:	20008210 	.word	0x20008210
   100e8:	200098c8 	.word	0x200098c8

000100ec <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   100ec:	2300      	movs	r3, #0
   100ee:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   100f0:	b570      	push	{r4, r5, r6, lr}
   100f2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   100f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   100f8:	220f      	movs	r2, #15
   100fa:	9301      	str	r3, [sp, #4]
   100fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10100:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   10102:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10106:	4d0e      	ldr	r5, [pc, #56]	; (10140 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
   10108:	4e0e      	ldr	r6, [pc, #56]	; (10144 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1010a:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
   1010e:	490e      	ldr	r1, [pc, #56]	; (10148 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   10110:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   10114:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   10116:	fb02 1100 	mla	r1, r2, r0, r1
   1011a:	4b0c      	ldr	r3, [pc, #48]	; (1014c <z_init_cpu+0x60>)
   1011c:	4630      	mov	r0, r6
   1011e:	9500      	str	r5, [sp, #0]
   10120:	f000 f8d4 	bl	102cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10124:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10126:	480a      	ldr	r0, [pc, #40]	; (10150 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   10128:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1012a:	3401      	adds	r4, #1
   1012c:	f023 0304 	bic.w	r3, r3, #4
   10130:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   10134:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   10136:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   10138:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1013a:	b006      	add	sp, #24
   1013c:	bd70      	pop	{r4, r5, r6, pc}
   1013e:	bf00      	nop
   10140:	20009858 	.word	0x20009858
   10144:	20008798 	.word	0x20008798
   10148:	2000a3c8 	.word	0x2000a3c8
   1014c:	0001043d 	.word	0x0001043d
   10150:	2000a508 	.word	0x2000a508

00010154 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   10154:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   10156:	4b2e      	ldr	r3, [pc, #184]	; (10210 <z_cstart+0xbc>)
   10158:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   1015a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1015e:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   10162:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10166:	2400      	movs	r4, #0
   10168:	23e0      	movs	r3, #224	; 0xe0
   1016a:	4d2a      	ldr	r5, [pc, #168]	; (10214 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1016c:	4e2a      	ldr	r6, [pc, #168]	; (10218 <z_cstart+0xc4>)
   1016e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   10172:	77ec      	strb	r4, [r5, #31]
   10174:	762c      	strb	r4, [r5, #24]
   10176:	766c      	strb	r4, [r5, #25]
   10178:	76ac      	strb	r4, [r5, #26]
   1017a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1017e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10180:	4f26      	ldr	r7, [pc, #152]	; (1021c <z_cstart+0xc8>)
   10182:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10186:	626b      	str	r3, [r5, #36]	; 0x24
   10188:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1018c:	f7fb fcf6 	bl	bb7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10190:	f7fb f878 	bl	b284 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10194:	f04f 33ff 	mov.w	r3, #4294967295
   10198:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1019a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1019c:	f7fb ff36 	bl	c00c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   101a0:	f7fb fd9c 	bl	bcdc <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   101a4:	f7f9 fc42 	bl	9a2c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   101a8:	f240 1301 	movw	r3, #257	; 0x101
   101ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   101b0:	ab06      	add	r3, sp, #24
   101b2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   101b4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   101b8:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   101ba:	f002 fcbf 	bl	12b3c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   101be:	4620      	mov	r0, r4
   101c0:	f7ff fea6 	bl	ff10 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   101c4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   101c6:	4d16      	ldr	r5, [pc, #88]	; (10220 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   101c8:	f7ff fea2 	bl	ff10 <z_sys_init_run_level>
	z_sched_init();
   101cc:	f000 fdfe 	bl	10dcc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   101d0:	4b14      	ldr	r3, [pc, #80]	; (10224 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   101d2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   101d4:	9305      	str	r3, [sp, #20]
   101d6:	2301      	movs	r3, #1
   101d8:	4913      	ldr	r1, [pc, #76]	; (10228 <z_cstart+0xd4>)
   101da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   101de:	e9cd 4303 	strd	r4, r3, [sp, #12]
   101e2:	4628      	mov	r0, r5
   101e4:	463b      	mov	r3, r7
   101e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   101ea:	9400      	str	r4, [sp, #0]
   101ec:	f000 f86e 	bl	102cc <z_setup_new_thread>
   101f0:	4606      	mov	r6, r0
   101f2:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   101f4:	4628      	mov	r0, r5
   101f6:	f022 0204 	bic.w	r2, r2, #4
   101fa:	736a      	strb	r2, [r5, #13]
   101fc:	f002 fe0e 	bl	12e1c <z_ready_thread>
	z_init_cpu(0);
   10200:	4620      	mov	r0, r4
   10202:	f7ff ff73 	bl	100ec <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10206:	463a      	mov	r2, r7
   10208:	4631      	mov	r1, r6
   1020a:	4628      	mov	r0, r5
   1020c:	f7fb f99e 	bl	b54c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10210:	2000a508 	.word	0x2000a508
   10214:	e000ed00 	.word	0xe000ed00
   10218:	20009858 	.word	0x20009858
   1021c:	000100a1 	.word	0x000100a1
   10220:	20008818 	.word	0x20008818
   10224:	00013ae1 	.word	0x00013ae1
   10228:	20009fc8 	.word	0x20009fc8

0001022c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1022c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1022e:	4b0e      	ldr	r3, [pc, #56]	; (10268 <init_mem_slab_module+0x3c>)
   10230:	4c0e      	ldr	r4, [pc, #56]	; (1026c <init_mem_slab_module+0x40>)
   10232:	42a3      	cmp	r3, r4
   10234:	d301      	bcc.n	1023a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   10236:	2000      	movs	r0, #0
	return rc;
}
   10238:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1023a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1023e:	ea41 0200 	orr.w	r2, r1, r0
   10242:	f012 0203 	ands.w	r2, r2, #3
   10246:	d10b      	bne.n	10260 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   10248:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1024a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1024c:	42aa      	cmp	r2, r5
   1024e:	d101      	bne.n	10254 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10250:	331c      	adds	r3, #28
   10252:	e7ee      	b.n	10232 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   10254:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   10256:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   10258:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1025a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1025c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1025e:	e7f5      	b.n	1024c <init_mem_slab_module+0x20>
	return rc;
   10260:	f06f 0015 	mvn.w	r0, #21
   10264:	e7e8      	b.n	10238 <init_mem_slab_module+0xc>
   10266:	bf00      	nop
   10268:	200080e4 	.word	0x200080e4
   1026c:	20008100 	.word	0x20008100

00010270 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10270:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10272:	460c      	mov	r4, r1
	__asm__ volatile(
   10274:	f04f 0520 	mov.w	r5, #32
   10278:	f3ef 8111 	mrs	r1, BASEPRI
   1027c:	f385 8812 	msr	BASEPRI_MAX, r5
   10280:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   10284:	6945      	ldr	r5, [r0, #20]
   10286:	b15d      	cbz	r5, 102a0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   10288:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1028a:	682b      	ldr	r3, [r5, #0]
   1028c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1028e:	6983      	ldr	r3, [r0, #24]
   10290:	3301      	adds	r3, #1
   10292:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   10294:	2000      	movs	r0, #0
	__asm__ volatile(
   10296:	f381 8811 	msr	BASEPRI, r1
   1029a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1029e:	e011      	b.n	102c4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   102a0:	ea52 0c03 	orrs.w	ip, r2, r3
   102a4:	d103      	bne.n	102ae <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   102a6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   102aa:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   102ac:	e7f3      	b.n	10296 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   102ae:	e9cd 2300 	strd	r2, r3, [sp]
   102b2:	4602      	mov	r2, r0
   102b4:	3008      	adds	r0, #8
   102b6:	f000 fcdf 	bl	10c78 <z_pend_curr>
		if (result == 0) {
   102ba:	b918      	cbnz	r0, 102c4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   102bc:	4b02      	ldr	r3, [pc, #8]	; (102c8 <k_mem_slab_alloc+0x58>)
   102be:	689b      	ldr	r3, [r3, #8]
   102c0:	695b      	ldr	r3, [r3, #20]
   102c2:	6023      	str	r3, [r4, #0]
}
   102c4:	b003      	add	sp, #12
   102c6:	bd30      	pop	{r4, r5, pc}
   102c8:	20009858 	.word	0x20009858

000102cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   102cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   102d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   102d2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   102d6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   102d8:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   102da:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   102de:	2500      	movs	r5, #0
{
   102e0:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   102e2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   102e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   102e6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   102ea:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   102ec:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   102ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   102f0:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   102f4:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   102f8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   102fa:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   102fc:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   102fe:	9202      	str	r2, [sp, #8]
   10300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   10302:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10306:	9201      	str	r2, [sp, #4]
   10308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1030a:	9200      	str	r2, [sp, #0]
   1030c:	4642      	mov	r2, r8
   1030e:	f7fb f8ff 	bl	b510 <arch_new_thread>
	if (!_current) {
   10312:	4b05      	ldr	r3, [pc, #20]	; (10328 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   10314:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   10316:	689b      	ldr	r3, [r3, #8]
   10318:	b103      	cbz	r3, 1031c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1031a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   1031c:	4640      	mov	r0, r8
   1031e:	6723      	str	r3, [r4, #112]	; 0x70
   10320:	b004      	add	sp, #16
   10322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10326:	bf00      	nop
   10328:	20009858 	.word	0x20009858

0001032c <z_impl_k_thread_create>:
{
   1032c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1032e:	2700      	movs	r7, #0
{
   10330:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10332:	9705      	str	r7, [sp, #20]
   10334:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
   10336:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1033a:	9704      	str	r7, [sp, #16]
   1033c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
   1033e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10340:	9703      	str	r7, [sp, #12]
   10342:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10344:	9702      	str	r7, [sp, #8]
   10346:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   10348:	9701      	str	r7, [sp, #4]
   1034a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1034c:	9700      	str	r7, [sp, #0]
   1034e:	f7ff ffbd 	bl	102cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   10352:	f1b5 3fff 	cmp.w	r5, #4294967295
   10356:	bf08      	it	eq
   10358:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1035c:	d005      	beq.n	1036a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1035e:	ea55 0306 	orrs.w	r3, r5, r6
   10362:	d105      	bne.n	10370 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   10364:	4620      	mov	r0, r4
   10366:	f000 fc2b 	bl	10bc0 <z_sched_start>
}
   1036a:	4620      	mov	r0, r4
   1036c:	b007      	add	sp, #28
   1036e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10370:	4632      	mov	r2, r6
   10372:	462b      	mov	r3, r5
   10374:	4902      	ldr	r1, [pc, #8]	; (10380 <z_impl_k_thread_create+0x54>)
   10376:	f104 0018 	add.w	r0, r4, #24
   1037a:	f000 feb1 	bl	110e0 <z_add_timeout>
   1037e:	e7f4      	b.n	1036a <z_impl_k_thread_create+0x3e>
   10380:	00012e3d 	.word	0x00012e3d

00010384 <z_init_static_threads>:
{
   10384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10388:	4c29      	ldr	r4, [pc, #164]	; (10430 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1038a:	4d2a      	ldr	r5, [pc, #168]	; (10434 <z_init_static_threads+0xb0>)
{
   1038c:	b087      	sub	sp, #28
   1038e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   10390:	42ae      	cmp	r6, r5
   10392:	f104 0430 	add.w	r4, r4, #48	; 0x30
   10396:	d30f      	bcc.n	103b8 <z_init_static_threads+0x34>
	k_sched_lock();
   10398:	f000 fb2c 	bl	109f4 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1039c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   103a0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   103a4:	4c22      	ldr	r4, [pc, #136]	; (10430 <z_init_static_threads+0xac>)
   103a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 10438 <z_init_static_threads+0xb4>
   103aa:	42ac      	cmp	r4, r5
   103ac:	d320      	bcc.n	103f0 <z_init_static_threads+0x6c>
}
   103ae:	b007      	add	sp, #28
   103b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   103b4:	f000 bcee 	b.w	10d94 <k_sched_unlock>
		z_setup_new_thread(
   103b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   103bc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   103c0:	9305      	str	r3, [sp, #20]
   103c2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   103c6:	9304      	str	r3, [sp, #16]
   103c8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   103cc:	9303      	str	r3, [sp, #12]
   103ce:	f854 3c18 	ldr.w	r3, [r4, #-24]
   103d2:	9302      	str	r3, [sp, #8]
   103d4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   103d8:	9301      	str	r3, [sp, #4]
   103da:	f854 3c20 	ldr.w	r3, [r4, #-32]
   103de:	9300      	str	r3, [sp, #0]
   103e0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   103e4:	f7ff ff72 	bl	102cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   103e8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   103ec:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   103ee:	e7ce      	b.n	1038e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   103f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   103f2:	1c5a      	adds	r2, r3, #1
   103f4:	d00d      	beq.n	10412 <z_init_static_threads+0x8e>
   103f6:	2100      	movs	r1, #0
   103f8:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   103fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103fe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10402:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   10406:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1040a:	d104      	bne.n	10416 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1040c:	4640      	mov	r0, r8
   1040e:	f000 fbd7 	bl	10bc0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10412:	3430      	adds	r4, #48	; 0x30
   10414:	e7c9      	b.n	103aa <z_init_static_threads+0x26>
   10416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1041a:	2300      	movs	r3, #0
   1041c:	f7f7 fe9a 	bl	8154 <__aeabi_uldivmod>
   10420:	4602      	mov	r2, r0
   10422:	460b      	mov	r3, r1
   10424:	f108 0018 	add.w	r0, r8, #24
   10428:	4649      	mov	r1, r9
   1042a:	f000 fe59 	bl	110e0 <z_add_timeout>
   1042e:	e7f0      	b.n	10412 <z_init_static_threads+0x8e>
   10430:	200080e4 	.word	0x200080e4
   10434:	200080e4 	.word	0x200080e4
   10438:	00012e3d 	.word	0x00012e3d

0001043c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1043c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1043e:	4c0b      	ldr	r4, [pc, #44]	; (1046c <idle+0x30>)
   10440:	4d0b      	ldr	r5, [pc, #44]	; (10470 <idle+0x34>)
	__asm__ volatile(
   10442:	f04f 0220 	mov.w	r2, #32
   10446:	f3ef 8311 	mrs	r3, BASEPRI
   1044a:	f382 8812 	msr	BASEPRI_MAX, r2
   1044e:	f3bf 8f6f 	isb	sy
   10452:	f002 fdaf 	bl	12fb4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10456:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   10458:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1045a:	b913      	cbnz	r3, 10462 <idle+0x26>
	arch_cpu_idle();
   1045c:	f7fa ff18 	bl	b290 <arch_cpu_idle>
}
   10460:	e7ef      	b.n	10442 <idle+0x6>
   10462:	f7fa fe4b 	bl	b0fc <pm_system_suspend>
   10466:	2800      	cmp	r0, #0
   10468:	d1eb      	bne.n	10442 <idle+0x6>
   1046a:	e7f7      	b.n	1045c <idle+0x20>
   1046c:	20009858 	.word	0x20009858
   10470:	200098c4 	.word	0x200098c4

00010474 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10478:	4604      	mov	r4, r0
   1047a:	4617      	mov	r7, r2
   1047c:	461e      	mov	r6, r3
   1047e:	f04f 0320 	mov.w	r3, #32
   10482:	f3ef 8811 	mrs	r8, BASEPRI
   10486:	f383 8812 	msr	BASEPRI_MAX, r3
   1048a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1048e:	68c3      	ldr	r3, [r0, #12]
   10490:	4a32      	ldr	r2, [pc, #200]	; (1055c <z_impl_k_mutex_lock+0xe8>)
   10492:	b16b      	cbz	r3, 104b0 <z_impl_k_mutex_lock+0x3c>
   10494:	6880      	ldr	r0, [r0, #8]
   10496:	6891      	ldr	r1, [r2, #8]
   10498:	4288      	cmp	r0, r1
   1049a:	d019      	beq.n	104d0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1049c:	ea57 0306 	orrs.w	r3, r7, r6
   104a0:	d118      	bne.n	104d4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   104a2:	f388 8811 	msr	BASEPRI, r8
   104a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   104aa:	f06f 000f 	mvn.w	r0, #15
   104ae:	e00c      	b.n	104ca <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   104b0:	6891      	ldr	r1, [r2, #8]
   104b2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   104b6:	3301      	adds	r3, #1
   104b8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   104ba:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   104bc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   104be:	60a3      	str	r3, [r4, #8]
   104c0:	f388 8811 	msr	BASEPRI, r8
   104c4:	f3bf 8f6f 	isb	sy
		return 0;
   104c8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   104ca:	b002      	add	sp, #8
   104cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   104d0:	6921      	ldr	r1, [r4, #16]
   104d2:	e7f0      	b.n	104b6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   104d4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   104d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   104dc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   104e0:	4299      	cmp	r1, r3
   104e2:	bfa8      	it	ge
   104e4:	4619      	movge	r1, r3
   104e6:	4291      	cmp	r1, r2
   104e8:	bfb8      	it	lt
   104ea:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   104ec:	428b      	cmp	r3, r1
   104ee:	dd2e      	ble.n	1054e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   104f0:	f002 fb70 	bl	12bd4 <adjust_owner_prio.isra.0>
   104f4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   104f6:	4622      	mov	r2, r4
   104f8:	4641      	mov	r1, r8
   104fa:	e9cd 7600 	strd	r7, r6, [sp]
   104fe:	4818      	ldr	r0, [pc, #96]	; (10560 <z_impl_k_mutex_lock+0xec>)
   10500:	f000 fbba 	bl	10c78 <z_pend_curr>
	if (got_mutex == 0) {
   10504:	2800      	cmp	r0, #0
   10506:	d0e0      	beq.n	104ca <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   10508:	f04f 0320 	mov.w	r3, #32
   1050c:	f3ef 8611 	mrs	r6, BASEPRI
   10510:	f383 8812 	msr	BASEPRI_MAX, r3
   10514:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10518:	6823      	ldr	r3, [r4, #0]
   1051a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1051c:	429c      	cmp	r4, r3
   1051e:	d00a      	beq.n	10536 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10520:	b14b      	cbz	r3, 10536 <z_impl_k_mutex_lock+0xc2>
   10522:	f993 300e 	ldrsb.w	r3, [r3, #14]
   10526:	4299      	cmp	r1, r3
   10528:	bfa8      	it	ge
   1052a:	4619      	movge	r1, r3
   1052c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   10530:	4299      	cmp	r1, r3
   10532:	bfb8      	it	lt
   10534:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10536:	68a0      	ldr	r0, [r4, #8]
   10538:	f002 fb4c 	bl	12bd4 <adjust_owner_prio.isra.0>
   1053c:	b900      	cbnz	r0, 10540 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1053e:	b145      	cbz	r5, 10552 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   10540:	4631      	mov	r1, r6
   10542:	4807      	ldr	r0, [pc, #28]	; (10560 <z_impl_k_mutex_lock+0xec>)
   10544:	f000 fa44 	bl	109d0 <z_reschedule>
	return -EAGAIN;
   10548:	f06f 000a 	mvn.w	r0, #10
   1054c:	e7bd      	b.n	104ca <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1054e:	2500      	movs	r5, #0
   10550:	e7d1      	b.n	104f6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   10552:	f386 8811 	msr	BASEPRI, r6
   10556:	f3bf 8f6f 	isb	sy
   1055a:	e7f5      	b.n	10548 <z_impl_k_mutex_lock+0xd4>
   1055c:	20009858 	.word	0x20009858
   10560:	200098c5 	.word	0x200098c5

00010564 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10564:	6883      	ldr	r3, [r0, #8]
{
   10566:	b570      	push	{r4, r5, r6, lr}
   10568:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1056a:	b36b      	cbz	r3, 105c8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1056c:	4a19      	ldr	r2, [pc, #100]	; (105d4 <z_impl_k_mutex_unlock+0x70>)
   1056e:	6892      	ldr	r2, [r2, #8]
   10570:	4293      	cmp	r3, r2
   10572:	d12c      	bne.n	105ce <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10574:	68c3      	ldr	r3, [r0, #12]
   10576:	2b01      	cmp	r3, #1
   10578:	d903      	bls.n	10582 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1057a:	3b01      	subs	r3, #1
   1057c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1057e:	2000      	movs	r0, #0
}
   10580:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   10582:	f04f 0320 	mov.w	r3, #32
   10586:	f3ef 8511 	mrs	r5, BASEPRI
   1058a:	f383 8812 	msr	BASEPRI_MAX, r3
   1058e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10592:	6901      	ldr	r1, [r0, #16]
   10594:	6880      	ldr	r0, [r0, #8]
   10596:	f002 fb1d 	bl	12bd4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1059a:	4620      	mov	r0, r4
   1059c:	f002 fcaf 	bl	12efe <z_unpend_first_thread>
	mutex->owner = new_owner;
   105a0:	2600      	movs	r6, #0
   105a2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   105a4:	b150      	cbz	r0, 105bc <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   105a6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   105aa:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   105ac:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   105ae:	f002 fc35 	bl	12e1c <z_ready_thread>
		z_reschedule(&lock, key);
   105b2:	4629      	mov	r1, r5
   105b4:	4808      	ldr	r0, [pc, #32]	; (105d8 <z_impl_k_mutex_unlock+0x74>)
   105b6:	f000 fa0b 	bl	109d0 <z_reschedule>
   105ba:	e7e0      	b.n	1057e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   105bc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   105be:	f385 8811 	msr	BASEPRI, r5
   105c2:	f3bf 8f6f 	isb	sy
   105c6:	e7da      	b.n	1057e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   105c8:	f06f 0015 	mvn.w	r0, #21
   105cc:	e7d8      	b.n	10580 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   105ce:	f04f 30ff 	mov.w	r0, #4294967295
   105d2:	e7d5      	b.n	10580 <z_impl_k_mutex_unlock+0x1c>
   105d4:	20009858 	.word	0x20009858
   105d8:	200098c5 	.word	0x200098c5

000105dc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   105dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   105de:	4611      	mov	r1, r2
	__asm__ volatile(
   105e0:	f04f 0220 	mov.w	r2, #32
   105e4:	f3ef 8511 	mrs	r5, BASEPRI
   105e8:	f382 8812 	msr	BASEPRI_MAX, r2
   105ec:	f3bf 8f6f 	isb	sy
   105f0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   105f2:	b19c      	cbz	r4, 1061c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   105f4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   105f6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   105f8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   105fc:	4294      	cmp	r4, r2
	list->head = node;
   105fe:	6003      	str	r3, [r0, #0]
	list->tail = node;
   10600:	bf08      	it	eq
   10602:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   10604:	2101      	movs	r1, #1
   10606:	4620      	mov	r0, r4
   10608:	f002 fb53 	bl	12cb2 <z_queue_node_peek>
   1060c:	4604      	mov	r4, r0
	__asm__ volatile(
   1060e:	f385 8811 	msr	BASEPRI, r5
   10612:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   10616:	4620      	mov	r0, r4
   10618:	b003      	add	sp, #12
   1061a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1061c:	ea51 0203 	orrs.w	r2, r1, r3
   10620:	d0f5      	beq.n	1060e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   10622:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   10626:	e9cd 1300 	strd	r1, r3, [sp]
   1062a:	4610      	mov	r0, r2
   1062c:	4629      	mov	r1, r5
   1062e:	f000 fb23 	bl	10c78 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   10632:	2800      	cmp	r0, #0
   10634:	d1ef      	bne.n	10616 <z_impl_k_queue_get+0x3a>
   10636:	4b02      	ldr	r3, [pc, #8]	; (10640 <z_impl_k_queue_get+0x64>)
   10638:	689b      	ldr	r3, [r3, #8]
   1063a:	695c      	ldr	r4, [r3, #20]
   1063c:	e7eb      	b.n	10616 <z_impl_k_queue_get+0x3a>
   1063e:	bf00      	nop
   10640:	20009858 	.word	0x20009858

00010644 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10644:	b538      	push	{r3, r4, r5, lr}
   10646:	4604      	mov	r4, r0
	__asm__ volatile(
   10648:	f04f 0320 	mov.w	r3, #32
   1064c:	f3ef 8511 	mrs	r5, BASEPRI
   10650:	f383 8812 	msr	BASEPRI_MAX, r3
   10654:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10658:	f002 fc51 	bl	12efe <z_unpend_first_thread>

	if (thread != NULL) {
   1065c:	b148      	cbz	r0, 10672 <z_impl_k_sem_give+0x2e>
   1065e:	2200      	movs	r2, #0
   10660:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10662:	f002 fbdb 	bl	12e1c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10666:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1066c:	4804      	ldr	r0, [pc, #16]	; (10680 <z_impl_k_sem_give+0x3c>)
   1066e:	f000 b9af 	b.w	109d0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10672:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10676:	429a      	cmp	r2, r3
   10678:	bf18      	it	ne
   1067a:	3301      	addne	r3, #1
   1067c:	60a3      	str	r3, [r4, #8]
}
   1067e:	e7f2      	b.n	10666 <z_impl_k_sem_give+0x22>
   10680:	200098c5 	.word	0x200098c5

00010684 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10684:	b513      	push	{r0, r1, r4, lr}
   10686:	f04f 0420 	mov.w	r4, #32
   1068a:	f3ef 8111 	mrs	r1, BASEPRI
   1068e:	f384 8812 	msr	BASEPRI_MAX, r4
   10692:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10696:	6884      	ldr	r4, [r0, #8]
   10698:	b144      	cbz	r4, 106ac <z_impl_k_sem_take+0x28>
		sem->count--;
   1069a:	3c01      	subs	r4, #1
   1069c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1069e:	f381 8811 	msr	BASEPRI, r1
   106a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   106a6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   106a8:	b002      	add	sp, #8
   106aa:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   106ac:	ea52 0403 	orrs.w	r4, r2, r3
   106b0:	d106      	bne.n	106c0 <z_impl_k_sem_take+0x3c>
   106b2:	f381 8811 	msr	BASEPRI, r1
   106b6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   106ba:	f06f 000f 	mvn.w	r0, #15
   106be:	e7f3      	b.n	106a8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   106c0:	e9cd 2300 	strd	r2, r3, [sp]
   106c4:	4602      	mov	r2, r0
   106c6:	4802      	ldr	r0, [pc, #8]	; (106d0 <z_impl_k_sem_take+0x4c>)
   106c8:	f000 fad6 	bl	10c78 <z_pend_curr>
	return ret;
   106cc:	e7ec      	b.n	106a8 <z_impl_k_sem_take+0x24>
   106ce:	bf00      	nop
   106d0:	200098c5 	.word	0x200098c5

000106d4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   106d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   106d6:	2400      	movs	r4, #0
   106d8:	4b08      	ldr	r3, [pc, #32]	; (106fc <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   106da:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   106de:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   106e0:	ab02      	add	r3, sp, #8
   106e2:	9300      	str	r3, [sp, #0]
   106e4:	4906      	ldr	r1, [pc, #24]	; (10700 <k_sys_work_q_init+0x2c>)
   106e6:	f04f 33ff 	mov.w	r3, #4294967295
   106ea:	4806      	ldr	r0, [pc, #24]	; (10704 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   106ec:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   106f0:	f000 f8f0 	bl	108d4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   106f4:	4620      	mov	r0, r4
   106f6:	b004      	add	sp, #16
   106f8:	bd10      	pop	{r4, pc}
   106fa:	bf00      	nop
   106fc:	00014856 	.word	0x00014856
   10700:	2000ad08 	.word	0x2000ad08
   10704:	20008898 	.word	0x20008898

00010708 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   10708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1070c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1070e:	f04f 38ff 	mov.w	r8, #4294967295
   10712:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   10716:	4e45      	ldr	r6, [pc, #276]	; (1082c <work_queue_main+0x124>)
{
   10718:	b085      	sub	sp, #20
	__asm__ volatile(
   1071a:	f04f 0320 	mov.w	r3, #32
   1071e:	f3ef 8711 	mrs	r7, BASEPRI
   10722:	f383 8812 	msr	BASEPRI_MAX, r3
   10726:	f3bf 8f6f 	isb	sy
   1072a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1072e:	b98d      	cbnz	r5, 10754 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   10730:	2102      	movs	r1, #2
   10732:	f104 0098 	add.w	r0, r4, #152	; 0x98
   10736:	f002 fadf 	bl	12cf8 <flag_test_and_clear>
   1073a:	2800      	cmp	r0, #0
   1073c:	d135      	bne.n	107aa <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1073e:	2300      	movs	r3, #0
   10740:	4639      	mov	r1, r7
   10742:	e9cd 8900 	strd	r8, r9, [sp]
   10746:	9302      	str	r3, [sp, #8]
   10748:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1074c:	4838      	ldr	r0, [pc, #224]	; (10830 <work_queue_main+0x128>)
   1074e:	f000 fc51 	bl	10ff4 <z_sched_wait>
			continue;
   10752:	e7e2      	b.n	1071a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10754:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   10758:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1075a:	4295      	cmp	r5, r2
	list->head = node;
   1075c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10760:	d101      	bne.n	10766 <work_queue_main+0x5e>
	list->tail = node;
   10762:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   10766:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1076a:	f043 0302 	orr.w	r3, r3, #2
   1076e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   10772:	68eb      	ldr	r3, [r5, #12]
   10774:	f023 0304 	bic.w	r3, r3, #4
   10778:	f043 0301 	orr.w	r3, r3, #1
   1077c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1077e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   10780:	f387 8811 	msr	BASEPRI, r7
   10784:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   10788:	4628      	mov	r0, r5
   1078a:	4798      	blx	r3
	__asm__ volatile(
   1078c:	f04f 0320 	mov.w	r3, #32
   10790:	f3ef 8b11 	mrs	fp, BASEPRI
   10794:	f383 8812 	msr	BASEPRI_MAX, r3
   10798:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1079c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1079e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   107a0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   107a4:	d40b      	bmi.n	107be <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   107a6:	60ea      	str	r2, [r5, #12]
   107a8:	e00e      	b.n	107c8 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   107aa:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   107ae:	2200      	movs	r2, #0
   107b0:	2101      	movs	r1, #1
   107b2:	4628      	mov	r0, r5
   107b4:	f002 fbcb 	bl	12f4e <z_sched_wake>
   107b8:	2800      	cmp	r0, #0
   107ba:	d1f8      	bne.n	107ae <work_queue_main+0xa6>
   107bc:	e7bf      	b.n	1073e <work_queue_main+0x36>
	return list->head;
   107be:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   107c0:	f023 0303 	bic.w	r3, r3, #3
   107c4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   107c6:	b970      	cbnz	r0, 107e6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   107c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   107cc:	f023 0302 	bic.w	r3, r3, #2
   107d0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   107d4:	f38b 8811 	msr	BASEPRI, fp
   107d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   107dc:	05d8      	lsls	r0, r3, #23
   107de:	d49c      	bmi.n	1071a <work_queue_main+0x12>
	z_impl_k_yield();
   107e0:	f000 fb00 	bl	10de4 <z_impl_k_yield>
}
   107e4:	e799      	b.n	1071a <work_queue_main+0x12>
	return node->next;
   107e6:	2700      	movs	r7, #0
	parent->next = child;
   107e8:	463b      	mov	r3, r7
	return node->next;
   107ea:	f8d0 a000 	ldr.w	sl, [r0]
		if (wc->work == work) {
   107ee:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   107f0:	4601      	mov	r1, r0
		if (wc->work == work) {
   107f2:	4295      	cmp	r5, r2
   107f4:	d10c      	bne.n	10810 <work_queue_main+0x108>
   107f6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   107f8:	b997      	cbnz	r7, 10820 <work_queue_main+0x118>
   107fa:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   107fc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   107fe:	4282      	cmp	r2, r0
   10800:	d100      	bne.n	10804 <work_queue_main+0xfc>
	list->tail = node;
   10802:	6071      	str	r1, [r6, #4]
	parent->next = child;
   10804:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   10808:	f7ff ff1c 	bl	10644 <z_impl_k_sem_give>
}
   1080c:	4639      	mov	r1, r7
   1080e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10810:	f1ba 0f00 	cmp.w	sl, #0
   10814:	d0d8      	beq.n	107c8 <work_queue_main+0xc0>
	return node->next;
   10816:	4650      	mov	r0, sl
   10818:	460f      	mov	r7, r1
   1081a:	f8da a000 	ldr.w	sl, [sl]
   1081e:	e7e6      	b.n	107ee <work_queue_main+0xe6>
	return list->tail;
   10820:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   10822:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   10824:	4290      	cmp	r0, r2
	list->tail = node;
   10826:	bf08      	it	eq
   10828:	6077      	streq	r7, [r6, #4]
}
   1082a:	e7eb      	b.n	10804 <work_queue_main+0xfc>
   1082c:	20009880 	.word	0x20009880
   10830:	200098c5 	.word	0x200098c5

00010834 <submit_to_queue_locked>:
{
   10834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   10836:	68c3      	ldr	r3, [r0, #12]
{
   10838:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1083a:	079a      	lsls	r2, r3, #30
{
   1083c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1083e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   10842:	d41f      	bmi.n	10884 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   10844:	075f      	lsls	r7, r3, #29
   10846:	d41f      	bmi.n	10888 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   10848:	680a      	ldr	r2, [r1, #0]
   1084a:	b90a      	cbnz	r2, 10850 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1084c:	6882      	ldr	r2, [r0, #8]
   1084e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   10850:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   10852:	bf42      	ittt	mi
   10854:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   10856:	2502      	movmi	r5, #2
			*queuep = work->queue;
   10858:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1085a:	6837      	ldr	r7, [r6, #0]
		ret = 1;
   1085c:	bf58      	it	pl
   1085e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   10860:	b37f      	cbz	r7, 108c2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10862:	4b1b      	ldr	r3, [pc, #108]	; (108d0 <submit_to_queue_locked+0x9c>)
   10864:	689b      	ldr	r3, [r3, #8]
   10866:	42bb      	cmp	r3, r7
   10868:	d111      	bne.n	1088e <submit_to_queue_locked+0x5a>
   1086a:	f002 f99f 	bl	12bac <k_is_in_isr>
   1086e:	f080 0001 	eor.w	r0, r0, #1
   10872:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   10874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10878:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1087a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1087e:	d523      	bpl.n	108c8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   10880:	b13a      	cbz	r2, 10892 <submit_to_queue_locked+0x5e>
   10882:	b940      	cbnz	r0, 10896 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   10884:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   10888:	2300      	movs	r3, #0
   1088a:	6033      	str	r3, [r6, #0]
	return ret;
   1088c:	e013      	b.n	108b6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1088e:	2000      	movs	r0, #0
   10890:	e7f0      	b.n	10874 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   10892:	071b      	lsls	r3, r3, #28
   10894:	d4f6      	bmi.n	10884 <submit_to_queue_locked+0x50>
	parent->next = child;
   10896:	2300      	movs	r3, #0
   10898:	6023      	str	r3, [r4, #0]
	return list->tail;
   1089a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1089e:	b963      	cbnz	r3, 108ba <submit_to_queue_locked+0x86>
	list->head = node;
   108a0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   108a4:	4638      	mov	r0, r7
   108a6:	f002 fa32 	bl	12d0e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   108aa:	68e3      	ldr	r3, [r4, #12]
   108ac:	f043 0304 	orr.w	r3, r3, #4
   108b0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   108b2:	6833      	ldr	r3, [r6, #0]
   108b4:	60a3      	str	r3, [r4, #8]
}
   108b6:	4628      	mov	r0, r5
   108b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   108ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   108bc:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   108c0:	e7f0      	b.n	108a4 <submit_to_queue_locked+0x70>
		return -EINVAL;
   108c2:	f06f 0515 	mvn.w	r5, #21
   108c6:	e7df      	b.n	10888 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   108c8:	f06f 0512 	mvn.w	r5, #18
   108cc:	e7dc      	b.n	10888 <submit_to_queue_locked+0x54>
   108ce:	bf00      	nop
   108d0:	20009858 	.word	0x20009858

000108d4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   108d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   108d6:	4604      	mov	r4, r0
	list->head = NULL;
   108d8:	2000      	movs	r0, #0
   108da:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   108dc:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   108e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   108e2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   108e6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   108ea:	f104 0090 	add.w	r0, r4, #144	; 0x90
   108ee:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   108f2:	b31d      	cbz	r5, 1093c <k_work_queue_start+0x68>
   108f4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   108f6:	2800      	cmp	r0, #0
   108f8:	f240 1001 	movw	r0, #257	; 0x101
   108fc:	bf08      	it	eq
   108fe:	2001      	moveq	r0, #1
	*flagp = flags;
   10900:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10904:	2000      	movs	r0, #0
   10906:	f04f 36ff 	mov.w	r6, #4294967295
   1090a:	f04f 37ff 	mov.w	r7, #4294967295
   1090e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   10912:	e9cd 0001 	strd	r0, r0, [sp, #4]
   10916:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1091a:	4620      	mov	r0, r4
   1091c:	4b08      	ldr	r3, [pc, #32]	; (10940 <k_work_queue_start+0x6c>)
   1091e:	9400      	str	r4, [sp, #0]
   10920:	f7ff fd04 	bl	1032c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   10924:	b125      	cbz	r5, 10930 <k_work_queue_start+0x5c>
   10926:	6829      	ldr	r1, [r5, #0]
   10928:	b111      	cbz	r1, 10930 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1092a:	4620      	mov	r0, r4
   1092c:	f002 f944 	bl	12bb8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   10930:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   10932:	b009      	add	sp, #36	; 0x24
   10934:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10938:	f002 b943 	b.w	12bc2 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1093c:	2001      	movs	r0, #1
   1093e:	e7df      	b.n	10900 <k_work_queue_start+0x2c>
   10940:	00010709 	.word	0x00010709

00010944 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   10944:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   10946:	4d07      	ldr	r5, [pc, #28]	; (10964 <z_reset_time_slice+0x20>)
   10948:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1094a:	b154      	cbz	r4, 10962 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1094c:	f7fd fb98 	bl	e080 <sys_clock_elapsed>
   10950:	4b05      	ldr	r3, [pc, #20]	; (10968 <z_reset_time_slice+0x24>)
   10952:	4404      	add	r4, r0
   10954:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   10956:	6828      	ldr	r0, [r5, #0]
   10958:	2100      	movs	r1, #0
	}
}
   1095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1095e:	f002 bb39 	b.w	12fd4 <z_set_timeout_expiry>
}
   10962:	bd38      	pop	{r3, r4, r5, pc}
   10964:	20009890 	.word	0x20009890
   10968:	20009858 	.word	0x20009858

0001096c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1096e:	4604      	mov	r4, r0
   10970:	460d      	mov	r5, r1
	__asm__ volatile(
   10972:	f04f 0320 	mov.w	r3, #32
   10976:	f3ef 8711 	mrs	r7, BASEPRI
   1097a:	f383 8812 	msr	BASEPRI_MAX, r3
   1097e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   10982:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   10984:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10988:	f240 30e7 	movw	r0, #999	; 0x3e7
   1098c:	4e0d      	ldr	r6, [pc, #52]	; (109c4 <k_sched_time_slice_set+0x58>)
   1098e:	2300      	movs	r3, #0
   10990:	6131      	str	r1, [r6, #16]
   10992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10996:	fbe4 010c 	umlal	r0, r1, r4, ip
   1099a:	f7f7 fbdb 	bl	8154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1099e:	2c00      	cmp	r4, #0
   109a0:	4b09      	ldr	r3, [pc, #36]	; (109c8 <k_sched_time_slice_set+0x5c>)
   109a2:	dc0a      	bgt.n	109ba <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   109a4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   109a6:	4b09      	ldr	r3, [pc, #36]	; (109cc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   109a8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   109aa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   109ac:	f7ff ffca 	bl	10944 <z_reset_time_slice>
	__asm__ volatile(
   109b0:	f387 8811 	msr	BASEPRI, r7
   109b4:	f3bf 8f6f 	isb	sy
	}
}
   109b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   109ba:	2802      	cmp	r0, #2
   109bc:	bfb8      	it	lt
   109be:	2002      	movlt	r0, #2
   109c0:	e7f0      	b.n	109a4 <k_sched_time_slice_set+0x38>
   109c2:	bf00      	nop
   109c4:	20009858 	.word	0x20009858
   109c8:	20009890 	.word	0x20009890
   109cc:	2000988c 	.word	0x2000988c

000109d0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   109d0:	b949      	cbnz	r1, 109e6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   109d2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   109d6:	b930      	cbnz	r0, 109e6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   109d8:	4b05      	ldr	r3, [pc, #20]	; (109f0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   109da:	69da      	ldr	r2, [r3, #28]
   109dc:	689b      	ldr	r3, [r3, #8]
   109de:	429a      	cmp	r2, r3
   109e0:	d001      	beq.n	109e6 <z_reschedule+0x16>
	ret = arch_swap(key);
   109e2:	f7fa bd3b 	b.w	b45c <arch_swap>
   109e6:	f381 8811 	msr	BASEPRI, r1
   109ea:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   109ee:	4770      	bx	lr
   109f0:	20009858 	.word	0x20009858

000109f4 <k_sched_lock>:
	__asm__ volatile(
   109f4:	f04f 0320 	mov.w	r3, #32
   109f8:	f3ef 8111 	mrs	r1, BASEPRI
   109fc:	f383 8812 	msr	BASEPRI_MAX, r3
   10a00:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   10a04:	4b04      	ldr	r3, [pc, #16]	; (10a18 <k_sched_lock+0x24>)
   10a06:	689a      	ldr	r2, [r3, #8]
   10a08:	7bd3      	ldrb	r3, [r2, #15]
   10a0a:	3b01      	subs	r3, #1
   10a0c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10a0e:	f381 8811 	msr	BASEPRI, r1
   10a12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   10a16:	4770      	bx	lr
   10a18:	20009858 	.word	0x20009858

00010a1c <update_cache>:
{
   10a1c:	b538      	push	{r3, r4, r5, lr}
   10a1e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   10a20:	480c      	ldr	r0, [pc, #48]	; (10a54 <update_cache+0x38>)
   10a22:	f002 f9f5 	bl	12e10 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10a26:	4d0c      	ldr	r5, [pc, #48]	; (10a58 <update_cache+0x3c>)
   10a28:	4604      	mov	r4, r0
   10a2a:	b900      	cbnz	r0, 10a2e <update_cache+0x12>
   10a2c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   10a2e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   10a30:	b94a      	cbnz	r2, 10a46 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   10a32:	7b5a      	ldrb	r2, [r3, #13]
   10a34:	06d2      	lsls	r2, r2, #27
   10a36:	d106      	bne.n	10a46 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10a38:	69a2      	ldr	r2, [r4, #24]
   10a3a:	b922      	cbnz	r2, 10a46 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   10a3c:	89da      	ldrh	r2, [r3, #14]
   10a3e:	2a7f      	cmp	r2, #127	; 0x7f
   10a40:	d901      	bls.n	10a46 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   10a42:	61eb      	str	r3, [r5, #28]
}
   10a44:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   10a46:	429c      	cmp	r4, r3
   10a48:	d002      	beq.n	10a50 <update_cache+0x34>
			z_reset_time_slice(thread);
   10a4a:	4620      	mov	r0, r4
   10a4c:	f7ff ff7a 	bl	10944 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   10a50:	61ec      	str	r4, [r5, #28]
}
   10a52:	e7f7      	b.n	10a44 <update_cache+0x28>
   10a54:	20009878 	.word	0x20009878
   10a58:	20009858 	.word	0x20009858

00010a5c <move_thread_to_end_of_prio_q>:
{
   10a5c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   10a5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10a62:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   10a64:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   10a66:	7b43      	ldrb	r3, [r0, #13]
   10a68:	da04      	bge.n	10a74 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10a6e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   10a70:	f002 f982 	bl	12d78 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10a74:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   10a76:	4a15      	ldr	r2, [pc, #84]	; (10acc <move_thread_to_end_of_prio_q+0x70>)
   10a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10a7c:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a7e:	f102 0520 	add.w	r5, r2, #32
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10a82:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a86:	42ab      	cmp	r3, r5
   10a88:	d01b      	beq.n	10ac2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10a8a:	b1d3      	cbz	r3, 10ac2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   10a8c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   10a90:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   10a94:	4286      	cmp	r6, r0
   10a96:	d00f      	beq.n	10ab8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   10a98:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10a9a:	2800      	cmp	r0, #0
   10a9c:	dd0c      	ble.n	10ab8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10a9e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   10aa0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   10aa4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   10aa6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   10aa8:	6890      	ldr	r0, [r2, #8]
}
   10aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   10aae:	1a43      	subs	r3, r0, r1
   10ab0:	4258      	negs	r0, r3
   10ab2:	4158      	adcs	r0, r3
   10ab4:	f7ff bfb2 	b.w	10a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10ab8:	42a3      	cmp	r3, r4
   10aba:	d002      	beq.n	10ac2 <move_thread_to_end_of_prio_q+0x66>
   10abc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10abe:	2b00      	cmp	r3, #0
   10ac0:	d1e6      	bne.n	10a90 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   10ac2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   10ac6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   10ac8:	6251      	str	r1, [r2, #36]	; 0x24
}
   10aca:	e7ed      	b.n	10aa8 <move_thread_to_end_of_prio_q+0x4c>
   10acc:	20009858 	.word	0x20009858

00010ad0 <z_time_slice>:
{
   10ad0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10ad2:	f04f 0320 	mov.w	r3, #32
   10ad6:	f3ef 8511 	mrs	r5, BASEPRI
   10ada:	f383 8812 	msr	BASEPRI_MAX, r3
   10ade:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   10ae2:	4b17      	ldr	r3, [pc, #92]	; (10b40 <z_time_slice+0x70>)
   10ae4:	4a17      	ldr	r2, [pc, #92]	; (10b44 <z_time_slice+0x74>)
   10ae6:	689c      	ldr	r4, [r3, #8]
   10ae8:	6811      	ldr	r1, [r2, #0]
   10aea:	428c      	cmp	r4, r1
   10aec:	d107      	bne.n	10afe <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   10aee:	4620      	mov	r0, r4
   10af0:	f7ff ff28 	bl	10944 <z_reset_time_slice>
	__asm__ volatile(
   10af4:	f385 8811 	msr	BASEPRI, r5
   10af8:	f3bf 8f6f 	isb	sy
}
   10afc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   10afe:	2100      	movs	r1, #0
   10b00:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   10b02:	4a11      	ldr	r2, [pc, #68]	; (10b48 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   10b04:	6812      	ldr	r2, [r2, #0]
   10b06:	b1c2      	cbz	r2, 10b3a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10b08:	89e2      	ldrh	r2, [r4, #14]
   10b0a:	2a7f      	cmp	r2, #127	; 0x7f
   10b0c:	d815      	bhi.n	10b3a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   10b0e:	7b62      	ldrb	r2, [r4, #13]
   10b10:	06d2      	lsls	r2, r2, #27
   10b12:	d112      	bne.n	10b3a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10b14:	4a0d      	ldr	r2, [pc, #52]	; (10b4c <z_time_slice+0x7c>)
   10b16:	f994 100e 	ldrsb.w	r1, [r4, #14]
   10b1a:	6812      	ldr	r2, [r2, #0]
   10b1c:	4291      	cmp	r1, r2
   10b1e:	db0c      	blt.n	10b3a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   10b20:	4a0b      	ldr	r2, [pc, #44]	; (10b50 <z_time_slice+0x80>)
   10b22:	4294      	cmp	r4, r2
   10b24:	d009      	beq.n	10b3a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   10b26:	691a      	ldr	r2, [r3, #16]
   10b28:	4282      	cmp	r2, r0
   10b2a:	dc03      	bgt.n	10b34 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   10b2c:	4620      	mov	r0, r4
   10b2e:	f7ff ff95 	bl	10a5c <move_thread_to_end_of_prio_q>
   10b32:	e7dc      	b.n	10aee <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   10b34:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   10b36:	611a      	str	r2, [r3, #16]
   10b38:	e7dc      	b.n	10af4 <z_time_slice+0x24>
   10b3a:	2200      	movs	r2, #0
   10b3c:	e7fb      	b.n	10b36 <z_time_slice+0x66>
   10b3e:	bf00      	nop
   10b40:	20009858 	.word	0x20009858
   10b44:	20009888 	.word	0x20009888
   10b48:	20009890 	.word	0x20009890
   10b4c:	2000988c 	.word	0x2000988c
   10b50:	20008798 	.word	0x20008798

00010b54 <ready_thread>:
{
   10b54:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10b56:	f990 200d 	ldrsb.w	r2, [r0, #13]
   10b5a:	7b43      	ldrb	r3, [r0, #13]
   10b5c:	2a00      	cmp	r2, #0
   10b5e:	db2a      	blt.n	10bb6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10b60:	06da      	lsls	r2, r3, #27
   10b62:	d128      	bne.n	10bb6 <ready_thread+0x62>
   10b64:	6982      	ldr	r2, [r0, #24]
   10b66:	bb32      	cbnz	r2, 10bb6 <ready_thread+0x62>
	return list->head == list;
   10b68:	4a14      	ldr	r2, [pc, #80]	; (10bbc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   10b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10b6e:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b70:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   10b74:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b78:	42ab      	cmp	r3, r5
   10b7a:	d017      	beq.n	10bac <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10b7c:	b1b3      	cbz	r3, 10bac <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   10b7e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   10b82:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   10b86:	428e      	cmp	r6, r1
   10b88:	d00b      	beq.n	10ba2 <ready_thread+0x4e>
		return b2 - b1;
   10b8a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10b8c:	2900      	cmp	r1, #0
   10b8e:	dd08      	ble.n	10ba2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   10b90:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10b92:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   10b96:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   10b98:	6058      	str	r0, [r3, #4]
		update_cache(0);
   10b9a:	2000      	movs	r0, #0
}
   10b9c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   10b9e:	f7ff bf3d 	b.w	10a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10ba2:	42a3      	cmp	r3, r4
   10ba4:	d002      	beq.n	10bac <ready_thread+0x58>
   10ba6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d1ea      	bne.n	10b82 <ready_thread+0x2e>
	node->prev = tail;
   10bac:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   10bb0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   10bb2:	6250      	str	r0, [r2, #36]	; 0x24
}
   10bb4:	e7f1      	b.n	10b9a <ready_thread+0x46>
}
   10bb6:	bc70      	pop	{r4, r5, r6}
   10bb8:	4770      	bx	lr
   10bba:	bf00      	nop
   10bbc:	20009858 	.word	0x20009858

00010bc0 <z_sched_start>:
{
   10bc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   10bc2:	f04f 0220 	mov.w	r2, #32
   10bc6:	f3ef 8411 	mrs	r4, BASEPRI
   10bca:	f382 8812 	msr	BASEPRI_MAX, r2
   10bce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   10bd2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   10bd4:	0751      	lsls	r1, r2, #29
   10bd6:	d404      	bmi.n	10be2 <z_sched_start+0x22>
	__asm__ volatile(
   10bd8:	f384 8811 	msr	BASEPRI, r4
   10bdc:	f3bf 8f6f 	isb	sy
}
   10be0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10be2:	f022 0204 	bic.w	r2, r2, #4
   10be6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   10be8:	f7ff ffb4 	bl	10b54 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   10bec:	4621      	mov	r1, r4
}
   10bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   10bf2:	4801      	ldr	r0, [pc, #4]	; (10bf8 <z_sched_start+0x38>)
   10bf4:	f7ff beec 	b.w	109d0 <z_reschedule>
   10bf8:	200098c5 	.word	0x200098c5

00010bfc <unready_thread>:
{
   10bfc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   10bfe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10c02:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   10c04:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   10c06:	7b43      	ldrb	r3, [r0, #13]
   10c08:	da04      	bge.n	10c14 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10c0e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10c10:	f002 f8b2 	bl	12d78 <sys_dlist_remove>
	update_cache(thread == _current);
   10c14:	4b04      	ldr	r3, [pc, #16]	; (10c28 <unready_thread+0x2c>)
   10c16:	6898      	ldr	r0, [r3, #8]
   10c18:	1a43      	subs	r3, r0, r1
   10c1a:	4258      	negs	r0, r3
   10c1c:	4158      	adcs	r0, r3
}
   10c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   10c22:	f7ff befb 	b.w	10a1c <update_cache>
   10c26:	bf00      	nop
   10c28:	20009858 	.word	0x20009858

00010c2c <pend>:
{
   10c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c30:	4606      	mov	r6, r0
   10c32:	4615      	mov	r5, r2
   10c34:	461c      	mov	r4, r3
	__asm__ volatile(
   10c36:	f04f 0320 	mov.w	r3, #32
   10c3a:	f3ef 8711 	mrs	r7, BASEPRI
   10c3e:	f383 8812 	msr	BASEPRI_MAX, r3
   10c42:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   10c46:	f002 f91b 	bl	12e80 <add_to_waitq_locked>
	__asm__ volatile(
   10c4a:	f387 8811 	msr	BASEPRI, r7
   10c4e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10c52:	f1b4 3fff 	cmp.w	r4, #4294967295
   10c56:	bf08      	it	eq
   10c58:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   10c5c:	d008      	beq.n	10c70 <pend+0x44>
   10c5e:	462a      	mov	r2, r5
   10c60:	4623      	mov	r3, r4
   10c62:	f106 0018 	add.w	r0, r6, #24
   10c66:	4903      	ldr	r1, [pc, #12]	; (10c74 <pend+0x48>)
}
   10c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10c6c:	f000 ba38 	b.w	110e0 <z_add_timeout>
   10c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c74:	00012e3d 	.word	0x00012e3d

00010c78 <z_pend_curr>:
{
   10c78:	b510      	push	{r4, lr}
   10c7a:	460c      	mov	r4, r1
	pending_current = _current;
   10c7c:	4b06      	ldr	r3, [pc, #24]	; (10c98 <z_pend_curr+0x20>)
{
   10c7e:	4611      	mov	r1, r2
	pending_current = _current;
   10c80:	6898      	ldr	r0, [r3, #8]
   10c82:	4b06      	ldr	r3, [pc, #24]	; (10c9c <z_pend_curr+0x24>)
   10c84:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   10c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10c8a:	f7ff ffcf 	bl	10c2c <pend>
   10c8e:	4620      	mov	r0, r4
}
   10c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10c94:	f7fa bbe2 	b.w	b45c <arch_swap>
   10c98:	20009858 	.word	0x20009858
   10c9c:	20009888 	.word	0x20009888

00010ca0 <z_set_prio>:
{
   10ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ca2:	4604      	mov	r4, r0
	__asm__ volatile(
   10ca4:	f04f 0320 	mov.w	r3, #32
   10ca8:	f3ef 8611 	mrs	r6, BASEPRI
   10cac:	f383 8812 	msr	BASEPRI_MAX, r3
   10cb0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   10cb4:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   10cb6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10cb8:	06da      	lsls	r2, r3, #27
   10cba:	d133      	bne.n	10d24 <z_set_prio+0x84>
		if (need_sched) {
   10cbc:	6982      	ldr	r2, [r0, #24]
   10cbe:	bb8a      	cbnz	r2, 10d24 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10cc4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10cc6:	f002 f857 	bl	12d78 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10cca:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   10ccc:	4a17      	ldr	r2, [pc, #92]	; (10d2c <z_set_prio+0x8c>)
   10cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10cd2:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
   10cd4:	7381      	strb	r1, [r0, #14]
   10cd6:	4610      	mov	r0, r2
   10cd8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10cdc:	4283      	cmp	r3, r0
   10cde:	d01b      	beq.n	10d18 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10ce0:	b1d3      	cbz	r3, 10d18 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   10ce2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   10ce4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   10ce8:	42a9      	cmp	r1, r5
   10cea:	d010      	beq.n	10d0e <z_set_prio+0x6e>
		return b2 - b1;
   10cec:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   10cee:	2d00      	cmp	r5, #0
   10cf0:	dd0d      	ble.n	10d0e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   10cf2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10cf4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   10cf8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10cfa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   10cfc:	2001      	movs	r0, #1
   10cfe:	f7ff fe8d 	bl	10a1c <update_cache>
   10d02:	2001      	movs	r0, #1
	__asm__ volatile(
   10d04:	f386 8811 	msr	BASEPRI, r6
   10d08:	f3bf 8f6f 	isb	sy
}
   10d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   10d0e:	42bb      	cmp	r3, r7
   10d10:	d002      	beq.n	10d18 <z_set_prio+0x78>
   10d12:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10d14:	2b00      	cmp	r3, #0
   10d16:	d1e5      	bne.n	10ce4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   10d18:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   10d1a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   10d1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10d20:	6254      	str	r4, [r2, #36]	; 0x24
}
   10d22:	e7eb      	b.n	10cfc <z_set_prio+0x5c>
			thread->base.prio = prio;
   10d24:	2000      	movs	r0, #0
   10d26:	73a1      	strb	r1, [r4, #14]
   10d28:	e7ec      	b.n	10d04 <z_set_prio+0x64>
   10d2a:	bf00      	nop
   10d2c:	20009858 	.word	0x20009858

00010d30 <z_impl_k_thread_suspend>:
{
   10d30:	b570      	push	{r4, r5, r6, lr}
   10d32:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   10d34:	3018      	adds	r0, #24
   10d36:	f002 f927 	bl	12f88 <z_abort_timeout>
	__asm__ volatile(
   10d3a:	f04f 0320 	mov.w	r3, #32
   10d3e:	f3ef 8611 	mrs	r6, BASEPRI
   10d42:	f383 8812 	msr	BASEPRI_MAX, r3
   10d46:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   10d4a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   10d4e:	7b63      	ldrb	r3, [r4, #13]
   10d50:	2a00      	cmp	r2, #0
   10d52:	da05      	bge.n	10d60 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   10d58:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10d5a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10d5c:	f002 f80c 	bl	12d78 <sys_dlist_remove>
		update_cache(thread == _current);
   10d60:	4d0b      	ldr	r5, [pc, #44]	; (10d90 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10d62:	7b63      	ldrb	r3, [r4, #13]
   10d64:	68a8      	ldr	r0, [r5, #8]
   10d66:	f043 0310 	orr.w	r3, r3, #16
   10d6a:	7363      	strb	r3, [r4, #13]
   10d6c:	1b03      	subs	r3, r0, r4
   10d6e:	4258      	negs	r0, r3
   10d70:	4158      	adcs	r0, r3
   10d72:	f7ff fe53 	bl	10a1c <update_cache>
	__asm__ volatile(
   10d76:	f386 8811 	msr	BASEPRI, r6
   10d7a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   10d7e:	68ab      	ldr	r3, [r5, #8]
   10d80:	42a3      	cmp	r3, r4
   10d82:	d103      	bne.n	10d8c <z_impl_k_thread_suspend+0x5c>
}
   10d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   10d88:	f002 b838 	b.w	12dfc <z_reschedule_unlocked>
}
   10d8c:	bd70      	pop	{r4, r5, r6, pc}
   10d8e:	bf00      	nop
   10d90:	20009858 	.word	0x20009858

00010d94 <k_sched_unlock>:
{
   10d94:	b510      	push	{r4, lr}
	__asm__ volatile(
   10d96:	f04f 0320 	mov.w	r3, #32
   10d9a:	f3ef 8411 	mrs	r4, BASEPRI
   10d9e:	f383 8812 	msr	BASEPRI_MAX, r3
   10da2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   10da6:	4b08      	ldr	r3, [pc, #32]	; (10dc8 <k_sched_unlock+0x34>)
		update_cache(0);
   10da8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   10daa:	689a      	ldr	r2, [r3, #8]
   10dac:	7bd3      	ldrb	r3, [r2, #15]
   10dae:	3301      	adds	r3, #1
   10db0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10db2:	f7ff fe33 	bl	10a1c <update_cache>
	__asm__ volatile(
   10db6:	f384 8811 	msr	BASEPRI, r4
   10dba:	f3bf 8f6f 	isb	sy
}
   10dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   10dc2:	f002 b81b 	b.w	12dfc <z_reschedule_unlocked>
   10dc6:	bf00      	nop
   10dc8:	20009858 	.word	0x20009858

00010dcc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   10dcc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   10dce:	4b04      	ldr	r3, [pc, #16]	; (10de0 <z_sched_init+0x14>)
   10dd0:	4608      	mov	r0, r1
   10dd2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   10dd6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   10dda:	f7ff bdc7 	b.w	1096c <k_sched_time_slice_set>
   10dde:	bf00      	nop
   10de0:	20009858 	.word	0x20009858

00010de4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   10de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   10de6:	f04f 0320 	mov.w	r3, #32
   10dea:	f3ef 8511 	mrs	r5, BASEPRI
   10dee:	f383 8812 	msr	BASEPRI_MAX, r3
   10df2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   10df6:	491a      	ldr	r1, [pc, #104]	; (10e60 <z_impl_k_yield+0x7c>)
   10df8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10dfa:	7b43      	ldrb	r3, [r0, #13]
   10dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10e00:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10e02:	f001 ffb9 	bl	12d78 <sys_dlist_remove>
	return list->head == list;
   10e06:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   10e08:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   10e0a:	7b5a      	ldrb	r2, [r3, #13]
   10e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10e10:	735a      	strb	r2, [r3, #13]
   10e12:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e16:	4282      	cmp	r2, r0
   10e18:	d01c      	beq.n	10e54 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10e1a:	b1da      	cbz	r2, 10e54 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   10e1c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   10e1e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   10e22:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   10e26:	42a6      	cmp	r6, r4
   10e28:	d00f      	beq.n	10e4a <z_impl_k_yield+0x66>
		return b2 - b1;
   10e2a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10e2c:	2c00      	cmp	r4, #0
   10e2e:	dd0c      	ble.n	10e4a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   10e30:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   10e32:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   10e36:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   10e38:	6053      	str	r3, [r2, #4]
	update_cache(1);
   10e3a:	2001      	movs	r0, #1
   10e3c:	f7ff fdee 	bl	10a1c <update_cache>
   10e40:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   10e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10e46:	f7fa bb09 	b.w	b45c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   10e4a:	42ba      	cmp	r2, r7
   10e4c:	d002      	beq.n	10e54 <z_impl_k_yield+0x70>
   10e4e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10e50:	2a00      	cmp	r2, #0
   10e52:	d1e6      	bne.n	10e22 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   10e54:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   10e56:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   10e5a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10e5c:	624b      	str	r3, [r1, #36]	; 0x24
}
   10e5e:	e7ec      	b.n	10e3a <z_impl_k_yield+0x56>
   10e60:	20009858 	.word	0x20009858

00010e64 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   10e64:	ea50 0301 	orrs.w	r3, r0, r1
{
   10e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e6c:	4605      	mov	r5, r0
   10e6e:	460e      	mov	r6, r1
	if (ticks == 0) {
   10e70:	d103      	bne.n	10e7a <z_tick_sleep+0x16>
	z_impl_k_yield();
   10e72:	f7ff ffb7 	bl	10de4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   10e76:	2000      	movs	r0, #0
   10e78:	e033      	b.n	10ee2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   10e7a:	f06f 0401 	mvn.w	r4, #1
   10e7e:	f04f 33ff 	mov.w	r3, #4294967295
   10e82:	1a24      	subs	r4, r4, r0
   10e84:	eb63 0301 	sbc.w	r3, r3, r1
   10e88:	2c01      	cmp	r4, #1
   10e8a:	f173 0300 	sbcs.w	r3, r3, #0
   10e8e:	da02      	bge.n	10e96 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   10e90:	f002 f8ba 	bl	13008 <sys_clock_tick_get_32>
   10e94:	1944      	adds	r4, r0, r5
   10e96:	f04f 0320 	mov.w	r3, #32
   10e9a:	f3ef 8811 	mrs	r8, BASEPRI
   10e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   10ea2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   10ea6:	4f10      	ldr	r7, [pc, #64]	; (10ee8 <z_tick_sleep+0x84>)
   10ea8:	4b10      	ldr	r3, [pc, #64]	; (10eec <z_tick_sleep+0x88>)
   10eaa:	68b8      	ldr	r0, [r7, #8]
   10eac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   10eae:	f7ff fea5 	bl	10bfc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   10eb2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10eb4:	490e      	ldr	r1, [pc, #56]	; (10ef0 <z_tick_sleep+0x8c>)
   10eb6:	462a      	mov	r2, r5
   10eb8:	4633      	mov	r3, r6
   10eba:	3018      	adds	r0, #24
   10ebc:	f000 f910 	bl	110e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   10ec0:	68ba      	ldr	r2, [r7, #8]
   10ec2:	4640      	mov	r0, r8
   10ec4:	7b53      	ldrb	r3, [r2, #13]
   10ec6:	f043 0310 	orr.w	r3, r3, #16
   10eca:	7353      	strb	r3, [r2, #13]
   10ecc:	f7fa fac6 	bl	b45c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   10ed0:	f002 f89a 	bl	13008 <sys_clock_tick_get_32>
   10ed4:	1a20      	subs	r0, r4, r0
   10ed6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   10eda:	2801      	cmp	r0, #1
   10edc:	f173 0300 	sbcs.w	r3, r3, #0
   10ee0:	dbc9      	blt.n	10e76 <z_tick_sleep+0x12>
}
   10ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ee6:	bf00      	nop
   10ee8:	20009858 	.word	0x20009858
   10eec:	20009888 	.word	0x20009888
   10ef0:	00012e3d 	.word	0x00012e3d

00010ef4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10ef4:	f1b1 3fff 	cmp.w	r1, #4294967295
   10ef8:	bf08      	it	eq
   10efa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   10efe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10f00:	d106      	bne.n	10f10 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   10f02:	4b08      	ldr	r3, [pc, #32]	; (10f24 <z_impl_k_sleep+0x30>)
   10f04:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10f06:	f7ff ff13 	bl	10d30 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   10f0a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   10f0e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   10f10:	f7ff ffa8 	bl	10e64 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   10f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10f18:	fb80 0303 	smull	r0, r3, r0, r3
   10f1c:	0bc0      	lsrs	r0, r0, #15
   10f1e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   10f22:	e7f4      	b.n	10f0e <z_impl_k_sleep+0x1a>
   10f24:	20009858 	.word	0x20009858

00010f28 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   10f28:	4b01      	ldr	r3, [pc, #4]	; (10f30 <z_impl_z_current_get+0x8>)
   10f2a:	6898      	ldr	r0, [r3, #8]
   10f2c:	4770      	bx	lr
   10f2e:	bf00      	nop
   10f30:	20009858 	.word	0x20009858

00010f34 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   10f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f38:	4604      	mov	r4, r0
   10f3a:	f04f 0320 	mov.w	r3, #32
   10f3e:	f3ef 8611 	mrs	r6, BASEPRI
   10f42:	f383 8812 	msr	BASEPRI_MAX, r3
   10f46:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   10f4a:	7b03      	ldrb	r3, [r0, #12]
   10f4c:	07d9      	lsls	r1, r3, #31
   10f4e:	d50b      	bpl.n	10f68 <z_thread_abort+0x34>
	__asm__ volatile(
   10f50:	f386 8811 	msr	BASEPRI, r6
   10f54:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   10f58:	4040      	eors	r0, r0
   10f5a:	f380 8811 	msr	BASEPRI, r0
   10f5e:	f04f 0004 	mov.w	r0, #4
   10f62:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   10f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   10f68:	7b43      	ldrb	r3, [r0, #13]
   10f6a:	071a      	lsls	r2, r3, #28
   10f6c:	d504      	bpl.n	10f78 <z_thread_abort+0x44>
   10f6e:	f386 8811 	msr	BASEPRI, r6
   10f72:	f3bf 8f6f 	isb	sy
   10f76:	e7f5      	b.n	10f64 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10f78:	f023 0220 	bic.w	r2, r3, #32
   10f7c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   10f80:	09d2      	lsrs	r2, r2, #7
   10f82:	d120      	bne.n	10fc6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10f84:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   10f86:	68a3      	ldr	r3, [r4, #8]
   10f88:	b113      	cbz	r3, 10f90 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   10f8a:	4620      	mov	r0, r4
   10f8c:	f001 fefc 	bl	12d88 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   10f90:	f104 0018 	add.w	r0, r4, #24
   10f94:	f001 fff8 	bl	12f88 <z_abort_timeout>
   10f98:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10f9c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   10fa0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10fa2:	42bd      	cmp	r5, r7
   10fa4:	d000      	beq.n	10fa8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10fa6:	b9b5      	cbnz	r5, 10fd6 <z_thread_abort+0xa2>
		update_cache(1);
   10fa8:	2001      	movs	r0, #1
   10faa:	f7ff fd37 	bl	10a1c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   10fae:	4b10      	ldr	r3, [pc, #64]	; (10ff0 <z_thread_abort+0xbc>)
   10fb0:	689b      	ldr	r3, [r3, #8]
   10fb2:	42a3      	cmp	r3, r4
   10fb4:	d1db      	bne.n	10f6e <z_thread_abort+0x3a>
   10fb6:	f3ef 8305 	mrs	r3, IPSR
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d1d7      	bne.n	10f6e <z_thread_abort+0x3a>
   10fbe:	4630      	mov	r0, r6
   10fc0:	f7fa fa4c 	bl	b45c <arch_swap>
	return ret;
   10fc4:	e7d3      	b.n	10f6e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10fc6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   10fca:	f043 0308 	orr.w	r3, r3, #8
   10fce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10fd0:	f001 fed2 	bl	12d78 <sys_dlist_remove>
}
   10fd4:	e7d7      	b.n	10f86 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   10fd6:	4628      	mov	r0, r5
   10fd8:	f001 fed6 	bl	12d88 <unpend_thread_no_timeout>
   10fdc:	f105 0018 	add.w	r0, r5, #24
   10fe0:	f001 ffd2 	bl	12f88 <z_abort_timeout>
		ready_thread(thread);
   10fe4:	4628      	mov	r0, r5
   10fe6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   10fea:	f7ff fdb3 	bl	10b54 <ready_thread>
   10fee:	e7d7      	b.n	10fa0 <z_thread_abort+0x6c>
   10ff0:	20009858 	.word	0x20009858

00010ff4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   10ff4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10ff6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   10ffa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10ffc:	e9cd 6700 	strd	r6, r7, [sp]
   11000:	f7ff fe3a 	bl	10c78 <z_pend_curr>

	if (data != NULL) {
   11004:	b11c      	cbz	r4, 1100e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   11006:	4b03      	ldr	r3, [pc, #12]	; (11014 <z_sched_wait+0x20>)
   11008:	689b      	ldr	r3, [r3, #8]
   1100a:	695b      	ldr	r3, [r3, #20]
   1100c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1100e:	b002      	add	sp, #8
   11010:	bdd0      	pop	{r4, r6, r7, pc}
   11012:	bf00      	nop
   11014:	20009858 	.word	0x20009858

00011018 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11018:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1101a:	4806      	ldr	r0, [pc, #24]	; (11034 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1101c:	4a06      	ldr	r2, [pc, #24]	; (11038 <z_data_copy+0x20>)
   1101e:	4907      	ldr	r1, [pc, #28]	; (1103c <z_data_copy+0x24>)
   11020:	1a12      	subs	r2, r2, r0
   11022:	f001 fd98 	bl	12b56 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1102a:	4a05      	ldr	r2, [pc, #20]	; (11040 <z_data_copy+0x28>)
   1102c:	4905      	ldr	r1, [pc, #20]	; (11044 <z_data_copy+0x2c>)
   1102e:	4806      	ldr	r0, [pc, #24]	; (11048 <z_data_copy+0x30>)
   11030:	f001 bd91 	b.w	12b56 <z_early_memcpy>
   11034:	20008000 	.word	0x20008000
   11038:	20008210 	.word	0x20008210
   1103c:	00014894 	.word	0x00014894
   11040:	00000000 	.word	0x00000000
   11044:	00014894 	.word	0x00014894
   11048:	20008000 	.word	0x20008000

0001104c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1104c:	4b03      	ldr	r3, [pc, #12]	; (1105c <elapsed+0x10>)
   1104e:	681b      	ldr	r3, [r3, #0]
   11050:	b90b      	cbnz	r3, 11056 <elapsed+0xa>
   11052:	f7fd b815 	b.w	e080 <sys_clock_elapsed>
}
   11056:	2000      	movs	r0, #0
   11058:	4770      	bx	lr
   1105a:	bf00      	nop
   1105c:	20009894 	.word	0x20009894

00011060 <next_timeout>:
	return list->head == list;
   11060:	4b10      	ldr	r3, [pc, #64]	; (110a4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   11062:	b510      	push	{r4, lr}
   11064:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11066:	429c      	cmp	r4, r3
   11068:	bf08      	it	eq
   1106a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1106c:	f7ff ffee 	bl	1104c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   11070:	b1a4      	cbz	r4, 1109c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   11072:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   11076:	1a1b      	subs	r3, r3, r0
   11078:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1107c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11080:	f170 0200 	sbcs.w	r2, r0, #0
   11084:	da0a      	bge.n	1109c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   11086:	2800      	cmp	r0, #0
   11088:	bfac      	ite	ge
   1108a:	4618      	movge	r0, r3
   1108c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1108e:	4b06      	ldr	r3, [pc, #24]	; (110a8 <next_timeout+0x48>)
   11090:	691b      	ldr	r3, [r3, #16]
   11092:	b113      	cbz	r3, 1109a <next_timeout+0x3a>
   11094:	4298      	cmp	r0, r3
   11096:	bfa8      	it	ge
   11098:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1109a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1109c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   110a0:	e7f5      	b.n	1108e <next_timeout+0x2e>
   110a2:	bf00      	nop
   110a4:	200080c0 	.word	0x200080c0
   110a8:	20009858 	.word	0x20009858

000110ac <remove_timeout>:
{
   110ac:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   110ae:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   110b0:	b168      	cbz	r0, 110ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   110b2:	4a0a      	ldr	r2, [pc, #40]	; (110dc <remove_timeout+0x30>)
   110b4:	6852      	ldr	r2, [r2, #4]
   110b6:	4290      	cmp	r0, r2
   110b8:	d009      	beq.n	110ce <remove_timeout+0x22>
	if (next(t) != NULL) {
   110ba:	b143      	cbz	r3, 110ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   110bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   110c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   110c4:	1912      	adds	r2, r2, r4
   110c6:	eb41 0105 	adc.w	r1, r1, r5
   110ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   110ce:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   110d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   110d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   110d4:	2300      	movs	r3, #0
	node->prev = NULL;
   110d6:	e9c0 3300 	strd	r3, r3, [r0]
}
   110da:	bd30      	pop	{r4, r5, pc}
   110dc:	200080c0 	.word	0x200080c0

000110e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   110e0:	f1b3 3fff 	cmp.w	r3, #4294967295
   110e4:	bf08      	it	eq
   110e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   110ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110ec:	4604      	mov	r4, r0
   110ee:	461f      	mov	r7, r3
   110f0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   110f2:	d067      	beq.n	111c4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   110f4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   110f6:	f04f 0320 	mov.w	r3, #32
   110fa:	f3ef 8611 	mrs	r6, BASEPRI
   110fe:	f383 8812 	msr	BASEPRI_MAX, r3
   11102:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11106:	f06f 0201 	mvn.w	r2, #1
   1110a:	f04f 3cff 	mov.w	ip, #4294967295
   1110e:	1b53      	subs	r3, r2, r5
   11110:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11114:	2b00      	cmp	r3, #0
   11116:	db1b      	blt.n	11150 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11118:	4b2b      	ldr	r3, [pc, #172]	; (111c8 <z_add_timeout+0xe8>)
   1111a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1111e:	1a52      	subs	r2, r2, r1
   11120:	eb6c 0303 	sbc.w	r3, ip, r3
   11124:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   11126:	eb63 0307 	sbc.w	r3, r3, r7
   1112a:	2d01      	cmp	r5, #1
   1112c:	f173 0200 	sbcs.w	r2, r3, #0
   11130:	bfbc      	itt	lt
   11132:	2501      	movlt	r5, #1
   11134:	2300      	movlt	r3, #0
   11136:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1113a:	4824      	ldr	r0, [pc, #144]	; (111cc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1113c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11140:	4283      	cmp	r3, r0
   11142:	d118      	bne.n	11176 <z_add_timeout+0x96>
	node->prev = tail;
   11144:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   11148:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1114c:	6044      	str	r4, [r0, #4]
}
   1114e:	e026      	b.n	1119e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11150:	f7ff ff7c 	bl	1104c <elapsed>
   11154:	3501      	adds	r5, #1
   11156:	f147 0700 	adc.w	r7, r7, #0
   1115a:	182d      	adds	r5, r5, r0
   1115c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   11160:	e9c4 5704 	strd	r5, r7, [r4, #16]
   11164:	e7e9      	b.n	1113a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   11166:	1a52      	subs	r2, r2, r1
   11168:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1116c:	459c      	cmp	ip, r3
   1116e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   11172:	d0e7      	beq.n	11144 <z_add_timeout+0x64>
   11174:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   11176:	2b00      	cmp	r3, #0
   11178:	d0e4      	beq.n	11144 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1117a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1117e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   11182:	428a      	cmp	r2, r1
   11184:	eb75 0e07 	sbcs.w	lr, r5, r7
   11188:	daed      	bge.n	11166 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1118a:	1a8a      	subs	r2, r1, r2
   1118c:	eb67 0505 	sbc.w	r5, r7, r5
   11190:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   11194:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11196:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1119a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1119c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1119e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   111a0:	4283      	cmp	r3, r0
   111a2:	d00b      	beq.n	111bc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   111a4:	429c      	cmp	r4, r3
   111a6:	d109      	bne.n	111bc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   111a8:	f7ff ff5a 	bl	11060 <next_timeout>

			if (next_time == 0 ||
   111ac:	b118      	cbz	r0, 111b6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   111ae:	4b08      	ldr	r3, [pc, #32]	; (111d0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   111b0:	691b      	ldr	r3, [r3, #16]
   111b2:	4283      	cmp	r3, r0
   111b4:	d002      	beq.n	111bc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   111b6:	2100      	movs	r1, #0
   111b8:	f7fc ff32 	bl	e020 <sys_clock_set_timeout>
	__asm__ volatile(
   111bc:	f386 8811 	msr	BASEPRI, r6
   111c0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   111c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111c6:	bf00      	nop
   111c8:	20008938 	.word	0x20008938
   111cc:	200080c0 	.word	0x200080c0
   111d0:	20009858 	.word	0x20009858

000111d4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   111d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   111da:	f7ff fc79 	bl	10ad0 <z_time_slice>
	__asm__ volatile(
   111de:	f04f 0320 	mov.w	r3, #32
   111e2:	f3ef 8511 	mrs	r5, BASEPRI
   111e6:	f383 8812 	msr	BASEPRI_MAX, r3
   111ea:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   111ee:	4f24      	ldr	r7, [pc, #144]	; (11280 <sys_clock_announce+0xac>)
	return list->head == list;
   111f0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11284 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   111f4:	4e24      	ldr	r6, [pc, #144]	; (11288 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
   111f6:	603c      	str	r4, [r7, #0]
   111f8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   111fc:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   111fe:	4540      	cmp	r0, r8
   11200:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
   11204:	e9d6 2e00 	ldrd	r2, lr, [r6]
   11208:	d00b      	beq.n	11222 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1120a:	b150      	cbz	r0, 11222 <sys_clock_announce+0x4e>
   1120c:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   11210:	42a3      	cmp	r3, r4
   11212:	eb71 090c 	sbcs.w	r9, r1, ip
   11216:	da16      	bge.n	11246 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11218:	1ae4      	subs	r4, r4, r3
   1121a:	eb6c 0c01 	sbc.w	ip, ip, r1
   1121e:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11222:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11224:	189b      	adds	r3, r3, r2
   11226:	eb4e 0101 	adc.w	r1, lr, r1
   1122a:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   1122e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11230:	f7ff ff16 	bl	11060 <next_timeout>
   11234:	4621      	mov	r1, r4
   11236:	f7fc fef3 	bl	e020 <sys_clock_set_timeout>
	__asm__ volatile(
   1123a:	f385 8811 	msr	BASEPRI, r5
   1123e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   11246:	18a2      	adds	r2, r4, r2
   11248:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
   1124c:	2300      	movs	r3, #0
		curr_tick += dt;
   1124e:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   11252:	2200      	movs	r2, #0
   11254:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   11258:	f7ff ff28 	bl	110ac <remove_timeout>
   1125c:	f385 8811 	msr	BASEPRI, r5
   11260:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11264:	6883      	ldr	r3, [r0, #8]
   11266:	4798      	blx	r3
	__asm__ volatile(
   11268:	f04f 0320 	mov.w	r3, #32
   1126c:	f3ef 8511 	mrs	r5, BASEPRI
   11270:	f383 8812 	msr	BASEPRI_MAX, r3
   11274:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   11278:	683b      	ldr	r3, [r7, #0]
   1127a:	1b1b      	subs	r3, r3, r4
   1127c:	603b      	str	r3, [r7, #0]
   1127e:	e7bb      	b.n	111f8 <sys_clock_announce+0x24>
   11280:	20009894 	.word	0x20009894
   11284:	200080c0 	.word	0x200080c0
   11288:	20008938 	.word	0x20008938

0001128c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1128c:	b510      	push	{r4, lr}
   1128e:	f04f 0320 	mov.w	r3, #32
   11292:	f3ef 8411 	mrs	r4, BASEPRI
   11296:	f383 8812 	msr	BASEPRI_MAX, r3
   1129a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1129e:	f7ff fed5 	bl	1104c <elapsed>
   112a2:	4601      	mov	r1, r0
   112a4:	4b05      	ldr	r3, [pc, #20]	; (112bc <sys_clock_tick_get+0x30>)
   112a6:	e9d3 0300 	ldrd	r0, r3, [r3]
   112aa:	1808      	adds	r0, r1, r0
   112ac:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   112b0:	f384 8811 	msr	BASEPRI, r4
   112b4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   112b8:	bd10      	pop	{r4, pc}
   112ba:	bf00      	nop
   112bc:	20008938 	.word	0x20008938

000112c0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   112c0:	b570      	push	{r4, r5, r6, lr}
   112c2:	4604      	mov	r4, r0
	__asm__ volatile(
   112c4:	f04f 0320 	mov.w	r3, #32
   112c8:	f3ef 8511 	mrs	r5, BASEPRI
   112cc:	f383 8812 	msr	BASEPRI_MAX, r3
   112d0:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   112d4:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   112d8:	3301      	adds	r3, #1
   112da:	f142 0200 	adc.w	r2, r2, #0
   112de:	2b02      	cmp	r3, #2
   112e0:	f172 0300 	sbcs.w	r3, r2, #0
   112e4:	d322      	bcc.n	1132c <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   112e6:	f001 fe93 	bl	13010 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   112ea:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   112ee:	3001      	adds	r0, #1
   112f0:	f141 0100 	adc.w	r1, r1, #0
   112f4:	18c0      	adds	r0, r0, r3
   112f6:	eb41 0102 	adc.w	r1, r1, r2
   112fa:	2801      	cmp	r0, #1
   112fc:	f171 0300 	sbcs.w	r3, r1, #0
   11300:	db32      	blt.n	11368 <z_timer_expiration_handler+0xa8>
   11302:	f001 fe85 	bl	13010 <z_impl_k_uptime_ticks>
   11306:	3001      	adds	r0, #1
   11308:	f141 0300 	adc.w	r3, r1, #0
   1130c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   11310:	1880      	adds	r0, r0, r2
   11312:	f06f 0201 	mvn.w	r2, #1
   11316:	eb43 0301 	adc.w	r3, r3, r1
   1131a:	f04f 31ff 	mov.w	r1, #4294967295
   1131e:	1a12      	subs	r2, r2, r0
   11320:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11324:	4620      	mov	r0, r4
   11326:	491a      	ldr	r1, [pc, #104]	; (11390 <z_timer_expiration_handler+0xd0>)
   11328:	f7ff feda 	bl	110e0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1132c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1132e:	3301      	adds	r3, #1
   11330:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   11332:	6a23      	ldr	r3, [r4, #32]
   11334:	b173      	cbz	r3, 11354 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   11336:	f385 8811 	msr	BASEPRI, r5
   1133a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1133e:	4620      	mov	r0, r4
   11340:	6a23      	ldr	r3, [r4, #32]
   11342:	4798      	blx	r3
	__asm__ volatile(
   11344:	f04f 0320 	mov.w	r3, #32
   11348:	f3ef 8511 	mrs	r5, BASEPRI
   1134c:	f383 8812 	msr	BASEPRI_MAX, r3
   11350:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11354:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11358:	42a6      	cmp	r6, r4
   1135a:	d000      	beq.n	1135e <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1135c:	b94e      	cbnz	r6, 11372 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   1135e:	f385 8811 	msr	BASEPRI, r5
   11362:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   11366:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   11368:	f06f 0201 	mvn.w	r2, #1
   1136c:	f04f 33ff 	mov.w	r3, #4294967295
   11370:	e7d8      	b.n	11324 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   11372:	4630      	mov	r0, r6
   11374:	f001 fd12 	bl	12d9c <z_unpend_thread_no_timeout>
   11378:	2300      	movs	r3, #0
   1137a:	67b3      	str	r3, [r6, #120]	; 0x78
   1137c:	f385 8811 	msr	BASEPRI, r5
   11380:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   11384:	4630      	mov	r0, r6
}
   11386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1138a:	f001 bd47 	b.w	12e1c <z_ready_thread>
   1138e:	bf00      	nop
   11390:	000112c1 	.word	0x000112c1

00011394 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   11394:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   11396:	f1b3 3fff 	cmp.w	r3, #4294967295
   1139a:	bf08      	it	eq
   1139c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   113a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113a4:	4606      	mov	r6, r0
   113a6:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   113aa:	461c      	mov	r4, r3
   113ac:	4689      	mov	r9, r1
   113ae:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   113b0:	d03e      	beq.n	11430 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   113b2:	f1b0 3fff 	cmp.w	r0, #4294967295
   113b6:	bf08      	it	eq
   113b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   113bc:	4615      	mov	r5, r2
   113be:	4607      	mov	r7, r0
   113c0:	d014      	beq.n	113ec <z_impl_k_timer_start+0x58>
   113c2:	ea50 0302 	orrs.w	r3, r0, r2
   113c6:	d011      	beq.n	113ec <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   113c8:	f06f 0301 	mvn.w	r3, #1
   113cc:	1a9b      	subs	r3, r3, r2
   113ce:	f04f 33ff 	mov.w	r3, #4294967295
   113d2:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   113d6:	2b00      	cmp	r3, #0
   113d8:	da08      	bge.n	113ec <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   113da:	2a02      	cmp	r2, #2
   113dc:	f170 0300 	sbcs.w	r3, r0, #0
   113e0:	bfbc      	itt	lt
   113e2:	2502      	movlt	r5, #2
   113e4:	2700      	movlt	r7, #0
   113e6:	3d01      	subs	r5, #1
   113e8:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   113ec:	f06f 0301 	mvn.w	r3, #1
   113f0:	1a5b      	subs	r3, r3, r1
   113f2:	f04f 33ff 	mov.w	r3, #4294967295
   113f6:	eb63 0304 	sbc.w	r3, r3, r4
   113fa:	2b00      	cmp	r3, #0
   113fc:	da09      	bge.n	11412 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   113fe:	2901      	cmp	r1, #1
   11400:	f174 0300 	sbcs.w	r3, r4, #0
   11404:	bfbc      	itt	lt
   11406:	2101      	movlt	r1, #1
   11408:	2400      	movlt	r4, #0
   1140a:	f111 39ff 	adds.w	r9, r1, #4294967295
   1140e:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   11412:	4630      	mov	r0, r6
   11414:	f001 fdb8 	bl	12f88 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   11418:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1141a:	464a      	mov	r2, r9
	timer->status = 0U;
   1141c:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1141e:	4630      	mov	r0, r6
   11420:	4643      	mov	r3, r8
	timer->period = period;
   11422:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28
		     duration);
}
   11426:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1142a:	4902      	ldr	r1, [pc, #8]	; (11434 <z_impl_k_timer_start+0xa0>)
   1142c:	f7ff be58 	b.w	110e0 <z_add_timeout>
}
   11430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11434:	000112c1 	.word	0x000112c1

00011438 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   11438:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1143a:	4606      	mov	r6, r0
   1143c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1143e:	f001 fbb5 	bl	12bac <k_is_in_isr>
   11442:	b978      	cbnz	r0, 11464 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   11444:	4b0b      	ldr	r3, [pc, #44]	; (11474 <z_thread_aligned_alloc+0x3c>)
   11446:	689b      	ldr	r3, [r3, #8]
   11448:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
   1144a:	b17c      	cbz	r4, 1146c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1144c:	1d2a      	adds	r2, r5, #4
   1144e:	d209      	bcs.n	11464 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   11450:	2000      	movs	r0, #0
   11452:	2100      	movs	r1, #0
   11454:	e9cd 0100 	strd	r0, r1, [sp]
   11458:	4620      	mov	r0, r4
   1145a:	f046 0104 	orr.w	r1, r6, #4
   1145e:	f001 fe40 	bl	130e2 <k_heap_aligned_alloc>
	if (mem == NULL) {
   11462:	b908      	cbnz	r0, 11468 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   11464:	2400      	movs	r4, #0
	}

	return ret;
   11466:	e001      	b.n	1146c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   11468:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1146a:	1d04      	adds	r4, r0, #4
}
   1146c:	4620      	mov	r0, r4
   1146e:	b002      	add	sp, #8
   11470:	bd70      	pop	{r4, r5, r6, pc}
   11472:	bf00      	nop
   11474:	20009858 	.word	0x20009858

00011478 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   11478:	4a02      	ldr	r2, [pc, #8]	; (11484 <boot_banner+0xc>)
   1147a:	4903      	ldr	r1, [pc, #12]	; (11488 <boot_banner+0x10>)
   1147c:	4803      	ldr	r0, [pc, #12]	; (1148c <boot_banner+0x14>)
   1147e:	f000 b8a6 	b.w	115ce <printk>
   11482:	bf00      	nop
   11484:	00013bae 	.word	0x00013bae
   11488:	0001485f 	.word	0x0001485f
   1148c:	0001486c 	.word	0x0001486c

00011490 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   11490:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   11492:	4c06      	ldr	r4, [pc, #24]	; (114ac <statics_init+0x1c>)
   11494:	4d06      	ldr	r5, [pc, #24]	; (114b0 <statics_init+0x20>)
   11496:	42ac      	cmp	r4, r5
   11498:	d301      	bcc.n	1149e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1149a:	2000      	movs	r0, #0
   1149c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1149e:	4620      	mov	r0, r4
   114a0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   114a4:	f001 fe15 	bl	130d2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   114a8:	3414      	adds	r4, #20
   114aa:	e7f4      	b.n	11496 <statics_init+0x6>
   114ac:	20008100 	.word	0x20008100
   114b0:	20008100 	.word	0x20008100

000114b4 <gpio_pin_configure_dt>:
{
   114b4:	4603      	mov	r3, r0
   114b6:	b470      	push	{r4, r5, r6}
				  spec->dt_flags | extra_flags);
   114b8:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   114ba:	6800      	ldr	r0, [r0, #0]
   114bc:	791d      	ldrb	r5, [r3, #4]
   114be:	430a      	orrs	r2, r1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   114c0:	2301      	movs	r3, #1
	struct gpio_driver_data *data =
   114c2:	6901      	ldr	r1, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   114c4:	fa03 f405 	lsl.w	r4, r3, r5
   114c8:	680b      	ldr	r3, [r1, #0]
	const struct gpio_driver_api *api =
   114ca:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   114cc:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   114d0:	bf14      	ite	ne
   114d2:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   114d4:	43a3      	biceq	r3, r4
   114d6:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
   114d8:	4629      	mov	r1, r5
   114da:	6833      	ldr	r3, [r6, #0]
}
   114dc:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   114de:	4718      	bx	r3

000114e0 <gpio_pin_get>:
{
   114e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   114e2:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   114e4:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
   114e6:	6883      	ldr	r3, [r0, #8]
   114e8:	a901      	add	r1, sp, #4
   114ea:	685b      	ldr	r3, [r3, #4]
   114ec:	4798      	blx	r3
	if (ret == 0) {
   114ee:	b948      	cbnz	r0, 11504 <gpio_pin_get+0x24>
		*value ^= data->invert;
   114f0:	9b01      	ldr	r3, [sp, #4]
   114f2:	682a      	ldr	r2, [r5, #0]
   114f4:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   114f6:	2301      	movs	r3, #1
   114f8:	fa03 f104 	lsl.w	r1, r3, r4
   114fc:	420a      	tst	r2, r1
   114fe:	bf14      	ite	ne
   11500:	4618      	movne	r0, r3
   11502:	2000      	moveq	r0, #0
}
   11504:	b003      	add	sp, #12
   11506:	bd30      	pop	{r4, r5, pc}

00011508 <z_log_msg_static_create.constprop.0>:
   11508:	2300      	movs	r3, #0
   1150a:	f7f8 bbe1 	b.w	9cd0 <z_impl_z_log_msg_static_create>

0001150e <cbpprintf_external>:
{
   1150e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11512:	4607      	mov	r7, r0
   11514:	460e      	mov	r6, r1
   11516:	4690      	mov	r8, r2
	if (buf == NULL) {
   11518:	461d      	mov	r5, r3
   1151a:	b30b      	cbz	r3, 11560 <cbpprintf_external+0x52>
	for (i = 0; i < s_nbr; i++) {
   1151c:	f04f 0900 	mov.w	r9, #0
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   11520:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   11522:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
   11524:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   11528:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   1152a:	441c      	add	r4, r3
   1152c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   11530:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   11532:	45d1      	cmp	r9, sl
   11534:	d308      	bcc.n	11548 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   11536:	4641      	mov	r1, r8
   11538:	4638      	mov	r0, r7
   1153a:	46b4      	mov	ip, r6
   1153c:	686a      	ldr	r2, [r5, #4]
   1153e:	f105 0308 	add.w	r3, r5, #8
}
   11542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   11546:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   11548:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1154c:	f109 0901 	add.w	r9, r9, #1
		s += strlen(s) + 1;
   11550:	4620      	mov	r0, r4
		*ps = s;
   11552:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   11556:	f000 fedc 	bl	12312 <strlen>
   1155a:	3001      	adds	r0, #1
   1155c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1155e:	e7e8      	b.n	11532 <cbpprintf_external+0x24>
}
   11560:	f06f 0015 	mvn.w	r0, #21
   11564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011568 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11568:	4603      	mov	r3, r0
   1156a:	b158      	cbz	r0, 11584 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1156c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1156e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11572:	2a01      	cmp	r2, #1
   11574:	d003      	beq.n	1157e <sys_notify_validate+0x16>
   11576:	2a03      	cmp	r2, #3
   11578:	d104      	bne.n	11584 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1157a:	6802      	ldr	r2, [r0, #0]
   1157c:	b112      	cbz	r2, 11584 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1157e:	2000      	movs	r0, #0
   11580:	6098      	str	r0, [r3, #8]
   11582:	4770      	bx	lr
		return -EINVAL;
   11584:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11588:	4770      	bx	lr

0001158a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1158a:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1158c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   1158e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11592:	2a03      	cmp	r2, #3
   11594:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   11598:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
   1159a:	bf14      	ite	ne
   1159c:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1159e:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   115a0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   115a2:	4770      	bx	lr

000115a4 <arch_printk_char_out>:
}
   115a4:	2000      	movs	r0, #0
   115a6:	4770      	bx	lr

000115a8 <str_out>:
{
   115a8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   115aa:	688a      	ldr	r2, [r1, #8]
   115ac:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   115ae:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   115b0:	b114      	cbz	r4, 115b8 <str_out+0x10>
   115b2:	684b      	ldr	r3, [r1, #4]
   115b4:	4293      	cmp	r3, r2
   115b6:	dc01      	bgt.n	115bc <str_out+0x14>
		ctx->count++;
   115b8:	608d      	str	r5, [r1, #8]
}
   115ba:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   115bc:	3b01      	subs	r3, #1
   115be:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   115c0:	bf08      	it	eq
   115c2:	2200      	moveq	r2, #0
   115c4:	608d      	str	r5, [r1, #8]
   115c6:	bf0c      	ite	eq
   115c8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   115ca:	54a0      	strbne	r0, [r4, r2]
   115cc:	e7f5      	b.n	115ba <str_out+0x12>

000115ce <printk>:
{
   115ce:	b40f      	push	{r0, r1, r2, r3}
   115d0:	b507      	push	{r0, r1, r2, lr}
   115d2:	a904      	add	r1, sp, #16
   115d4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   115d8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   115da:	f7f7 fb7b 	bl	8cd4 <vprintk>
}
   115de:	b003      	add	sp, #12
   115e0:	f85d eb04 	ldr.w	lr, [sp], #4
   115e4:	b004      	add	sp, #16
   115e6:	4770      	bx	lr

000115e8 <snprintk>:
{
   115e8:	b40c      	push	{r2, r3}
   115ea:	b507      	push	{r0, r1, r2, lr}
   115ec:	ab04      	add	r3, sp, #16
   115ee:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   115f2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   115f4:	f7f7 fb7c 	bl	8cf0 <vsnprintk>
}
   115f8:	b003      	add	sp, #12
   115fa:	f85d eb04 	ldr.w	lr, [sp], #4
   115fe:	b002      	add	sp, #8
   11600:	4770      	bx	lr

00011602 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11602:	2200      	movs	r2, #0
   11604:	b510      	push	{r4, lr}
   11606:	4603      	mov	r3, r0
	return list->head;
   11608:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1160a:	b158      	cbz	r0, 11624 <sys_slist_find_and_remove+0x22>
   1160c:	4288      	cmp	r0, r1
   1160e:	d10f      	bne.n	11630 <sys_slist_find_and_remove+0x2e>
	return node->next;
   11610:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   11612:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   11614:	b93a      	cbnz	r2, 11626 <sys_slist_find_and_remove+0x24>
   11616:	42a1      	cmp	r1, r4
	list->head = node;
   11618:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1161a:	d100      	bne.n	1161e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1161c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1161e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11620:	2001      	movs	r0, #1
	parent->next = child;
   11622:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11624:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   11626:	42a1      	cmp	r1, r4
	parent->next = child;
   11628:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1162a:	bf08      	it	eq
   1162c:	605a      	streq	r2, [r3, #4]
}
   1162e:	e7f6      	b.n	1161e <sys_slist_find_and_remove+0x1c>
	return node->next;
   11630:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11632:	6800      	ldr	r0, [r0, #0]
   11634:	e7e9      	b.n	1160a <sys_slist_find_and_remove+0x8>

00011636 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11636:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   11638:	f013 0307 	ands.w	r3, r3, #7
   1163c:	d105      	bne.n	1164a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1163e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   11640:	2b00      	cmp	r3, #0
   11642:	bf0c      	ite	eq
   11644:	2000      	moveq	r0, #0
   11646:	2003      	movne	r0, #3
   11648:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1164a:	2b02      	cmp	r3, #2
   1164c:	d105      	bne.n	1165a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1164e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   11650:	2b00      	cmp	r3, #0
   11652:	bf14      	ite	ne
   11654:	2000      	movne	r0, #0
   11656:	2004      	moveq	r0, #4
   11658:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1165a:	2b01      	cmp	r3, #1
   1165c:	d105      	bne.n	1166a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1165e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   11660:	2b00      	cmp	r3, #0
   11662:	bf0c      	ite	eq
   11664:	2000      	moveq	r0, #0
   11666:	2005      	movne	r0, #5
   11668:	4770      	bx	lr
	int evt = EVT_NOP;
   1166a:	2000      	movs	r0, #0
}
   1166c:	4770      	bx	lr

0001166e <notify_one>:
{
   1166e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11672:	460d      	mov	r5, r1
   11674:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11676:	4619      	mov	r1, r3
   11678:	1d28      	adds	r0, r5, #4
{
   1167a:	4690      	mov	r8, r2
   1167c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1167e:	f7ff ff84 	bl	1158a <sys_notify_finalize>
	if (cb) {
   11682:	4604      	mov	r4, r0
   11684:	b138      	cbz	r0, 11696 <notify_one+0x28>
		cb(mgr, cli, state, res);
   11686:	4633      	mov	r3, r6
   11688:	4642      	mov	r2, r8
   1168a:	4629      	mov	r1, r5
   1168c:	4638      	mov	r0, r7
   1168e:	46a4      	mov	ip, r4
}
   11690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   11694:	4760      	bx	ip
}
   11696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001169a <transition_complete>:
{
   1169a:	b410      	push	{r4}
	__asm__ volatile(
   1169c:	f04f 0420 	mov.w	r4, #32
   116a0:	f3ef 8211 	mrs	r2, BASEPRI
   116a4:	f384 8812 	msr	BASEPRI_MAX, r4
   116a8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   116ac:	6141      	str	r1, [r0, #20]
}
   116ae:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   116b0:	2101      	movs	r1, #1
   116b2:	f7f7 bb33 	b.w	8d1c <process_event>

000116b6 <validate_args>:
{
   116b6:	b510      	push	{r4, lr}
   116b8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   116ba:	b140      	cbz	r0, 116ce <validate_args+0x18>
   116bc:	b139      	cbz	r1, 116ce <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   116be:	1d08      	adds	r0, r1, #4
   116c0:	f7ff ff52 	bl	11568 <sys_notify_validate>
	if ((rv == 0)
   116c4:	b928      	cbnz	r0, 116d2 <validate_args+0x1c>
	    && ((cli->notify.flags
   116c6:	68a3      	ldr	r3, [r4, #8]
   116c8:	f033 0303 	bics.w	r3, r3, #3
   116cc:	d001      	beq.n	116d2 <validate_args+0x1c>
		rv = -EINVAL;
   116ce:	f06f 0015 	mvn.w	r0, #21
}
   116d2:	bd10      	pop	{r4, pc}

000116d4 <onoff_manager_init>:
{
   116d4:	b538      	push	{r3, r4, r5, lr}
   116d6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   116d8:	4605      	mov	r5, r0
   116da:	b158      	cbz	r0, 116f4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   116dc:	b151      	cbz	r1, 116f4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   116de:	680b      	ldr	r3, [r1, #0]
   116e0:	b143      	cbz	r3, 116f4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   116e2:	684b      	ldr	r3, [r1, #4]
   116e4:	b133      	cbz	r3, 116f4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   116e6:	221c      	movs	r2, #28
   116e8:	2100      	movs	r1, #0
   116ea:	f000 fe39 	bl	12360 <memset>
	return 0;
   116ee:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   116f0:	612c      	str	r4, [r5, #16]
}
   116f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   116f4:	f06f 0015 	mvn.w	r0, #21
   116f8:	e7fb      	b.n	116f2 <onoff_manager_init+0x1e>

000116fa <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   116fa:	b570      	push	{r4, r5, r6, lr}
   116fc:	4604      	mov	r4, r0
   116fe:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11700:	f7ff ffd9 	bl	116b6 <validate_args>

	if (rv < 0) {
   11704:	1e05      	subs	r5, r0, #0
   11706:	db31      	blt.n	1176c <onoff_request+0x72>
   11708:	f04f 0320 	mov.w	r3, #32
   1170c:	f3ef 8111 	mrs	r1, BASEPRI
   11710:	f383 8812 	msr	BASEPRI_MAX, r3
   11714:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11718:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1171c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1171e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11720:	42ab      	cmp	r3, r5
   11722:	f000 0207 	and.w	r2, r0, #7
   11726:	d02e      	beq.n	11786 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11728:	2a02      	cmp	r2, #2
   1172a:	d10e      	bne.n	1174a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1172c:	3301      	adds	r3, #1
   1172e:	8363      	strh	r3, [r4, #26]
	rv = state;
   11730:	4615      	mov	r5, r2
		notify = true;
   11732:	2301      	movs	r3, #1
	__asm__ volatile(
   11734:	f381 8811 	msr	BASEPRI, r1
   11738:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1173c:	b1b3      	cbz	r3, 1176c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1173e:	2300      	movs	r3, #0
   11740:	4631      	mov	r1, r6
   11742:	4620      	mov	r0, r4
   11744:	f7ff ff93 	bl	1166e <notify_one>
   11748:	e010      	b.n	1176c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1174a:	0783      	lsls	r3, r0, #30
   1174c:	d001      	beq.n	11752 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1174e:	2a06      	cmp	r2, #6
   11750:	d10e      	bne.n	11770 <onoff_request+0x76>
	parent->next = child;
   11752:	2300      	movs	r3, #0
   11754:	6033      	str	r3, [r6, #0]
	return list->tail;
   11756:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   11758:	b993      	cbnz	r3, 11780 <onoff_request+0x86>
	list->head = node;
   1175a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1175e:	4615      	mov	r5, r2
   11760:	b962      	cbnz	r2, 1177c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   11762:	460a      	mov	r2, r1
   11764:	4620      	mov	r0, r4
   11766:	2102      	movs	r1, #2
   11768:	f7f7 fad8 	bl	8d1c <process_event>
		}
	}

	return rv;
}
   1176c:	4628      	mov	r0, r5
   1176e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   11770:	2a05      	cmp	r2, #5
   11772:	bf0c      	ite	eq
   11774:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   11778:	f06f 0504 	mvnne.w	r5, #4
   1177c:	2300      	movs	r3, #0
   1177e:	e7d9      	b.n	11734 <onoff_request+0x3a>
	parent->next = child;
   11780:	601e      	str	r6, [r3, #0]
	list->tail = node;
   11782:	6066      	str	r6, [r4, #4]
}
   11784:	e7eb      	b.n	1175e <onoff_request+0x64>
		rv = -EAGAIN;
   11786:	f06f 050a 	mvn.w	r5, #10
   1178a:	e7f7      	b.n	1177c <onoff_request+0x82>

0001178c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1178c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1178e:	f04f 0320 	mov.w	r3, #32
   11792:	f3ef 8211 	mrs	r2, BASEPRI
   11796:	f383 8812 	msr	BASEPRI_MAX, r3
   1179a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1179e:	8b04      	ldrh	r4, [r0, #24]
   117a0:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   117a4:	2c02      	cmp	r4, #2
   117a6:	d00a      	beq.n	117be <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   117a8:	2c01      	cmp	r4, #1
   117aa:	bf0c      	ite	eq
   117ac:	f06f 0004 	mvneq.w	r0, #4
   117b0:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   117b4:	f382 8811 	msr	BASEPRI, r2
   117b8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   117bc:	e008      	b.n	117d0 <onoff_release+0x44>
	mgr->refs -= 1U;
   117be:	8b43      	ldrh	r3, [r0, #26]
   117c0:	3b01      	subs	r3, #1
   117c2:	b29b      	uxth	r3, r3
   117c4:	8343      	strh	r3, [r0, #26]
	if (stop) {
   117c6:	b923      	cbnz	r3, 117d2 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   117c8:	4621      	mov	r1, r4
   117ca:	f7f7 faa7 	bl	8d1c <process_event>
	int rv = state;
   117ce:	4620      	mov	r0, r4
}
   117d0:	bd10      	pop	{r4, pc}
	int rv = state;
   117d2:	4620      	mov	r0, r4
   117d4:	e7ee      	b.n	117b4 <onoff_release+0x28>

000117d6 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   117d6:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   117d8:	b1b0      	cbz	r0, 11808 <onoff_cancel+0x32>
   117da:	b1a9      	cbz	r1, 11808 <onoff_cancel+0x32>
	__asm__ volatile(
   117dc:	f04f 0220 	mov.w	r2, #32
   117e0:	f3ef 8511 	mrs	r5, BASEPRI
   117e4:	f382 8812 	msr	BASEPRI_MAX, r2
   117e8:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   117ec:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   117ee:	f7ff ff08 	bl	11602 <sys_slist_find_and_remove>
   117f2:	b130      	cbz	r0, 11802 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   117f4:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   117f8:	f385 8811 	msr	BASEPRI, r5
   117fc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   11800:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   11802:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11806:	e7f7      	b.n	117f8 <onoff_cancel+0x22>
		return -EINVAL;
   11808:	f06f 0015 	mvn.w	r0, #21
   1180c:	e7f8      	b.n	11800 <onoff_cancel+0x2a>

0001180e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1180e:	4604      	mov	r4, r0
   11810:	b508      	push	{r3, lr}
   11812:	4608      	mov	r0, r1
   11814:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11816:	461a      	mov	r2, r3
   11818:	47a0      	blx	r4
	return z_impl_z_current_get();
   1181a:	f7ff fb85 	bl	10f28 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1181e:	f7fa fa47 	bl	bcb0 <z_impl_k_thread_abort>

00011822 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11822:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   11826:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   11828:	0840      	lsrs	r0, r0, #1
   1182a:	4770      	bx	lr

0001182c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1182e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   11830:	f7ff fff7 	bl	11822 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11834:	fab0 f080 	clz	r0, r0
   11838:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1183c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   11840:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   11844:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   11846:	1d17      	adds	r7, r2, #4
{
   11848:	460c      	mov	r4, r1
   1184a:	3206      	adds	r2, #6
   1184c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1184e:	b956      	cbnz	r6, 11866 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   11850:	2101      	movs	r1, #1
   11852:	fa01 f000 	lsl.w	r0, r1, r0
   11856:	68d9      	ldr	r1, [r3, #12]
   11858:	4301      	orrs	r1, r0
   1185a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1185c:	f8cc 4010 	str.w	r4, [ip, #16]
   11860:	53dd      	strh	r5, [r3, r7]
   11862:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   11864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   11866:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   11868:	3104      	adds	r1, #4
   1186a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1186c:	53d8      	strh	r0, [r3, r7]
   1186e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11872:	529e      	strh	r6, [r3, r2]
   11874:	80c5      	strh	r5, [r0, #6]
   11876:	525d      	strh	r5, [r3, r1]
   11878:	e7f4      	b.n	11864 <free_list_add+0x38>

0001187a <free_list_remove_bidx>:
{
   1187a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1187c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   11880:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   11882:	4299      	cmp	r1, r3
   11884:	f102 0104 	add.w	r1, r2, #4
   11888:	d10a      	bne.n	118a0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1188a:	2301      	movs	r3, #1
   1188c:	fa03 f202 	lsl.w	r2, r3, r2
   11890:	68c3      	ldr	r3, [r0, #12]
   11892:	ea23 0302 	bic.w	r3, r3, r2
   11896:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11898:	2300      	movs	r3, #0
   1189a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1189e:	bd10      	pop	{r4, pc}
   118a0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   118a2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   118a6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   118aa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   118ae:	80cb      	strh	r3, [r1, #6]
   118b0:	8082      	strh	r2, [r0, #4]
}
   118b2:	e7f4      	b.n	1189e <free_list_remove_bidx+0x24>

000118b4 <free_list_remove>:
{
   118b4:	b508      	push	{r3, lr}
   118b6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   118b8:	f7ff ffb3 	bl	11822 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   118bc:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   118c0:	4618      	mov	r0, r3
}
   118c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   118c6:	f1c2 021f 	rsb	r2, r2, #31
   118ca:	f7ff bfd6 	b.w	1187a <free_list_remove_bidx>

000118ce <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   118ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   118d2:	fab1 f581 	clz	r5, r1
   118d6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   118da:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   118de:	693a      	ldr	r2, [r7, #16]
{
   118e0:	4603      	mov	r3, r0
   118e2:	460e      	mov	r6, r1
	if (b->next) {
   118e4:	b1c2      	cbz	r2, 11918 <alloc_chunk+0x4a>
   118e6:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   118ea:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   118ec:	4618      	mov	r0, r3
   118ee:	4621      	mov	r1, r4
   118f0:	f7ff ff97 	bl	11822 <chunk_size>
   118f4:	42b0      	cmp	r0, r6
   118f6:	d306      	bcc.n	11906 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   118f8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   118fa:	4618      	mov	r0, r3
   118fc:	f7ff ffbd 	bl	1187a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11900:	4620      	mov	r0, r4
   11902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   11906:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
   1190a:	88c0      	ldrh	r0, [r0, #6]
		} while (--i && b->next != first);
   1190c:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   11910:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   11912:	d001      	beq.n	11918 <alloc_chunk+0x4a>
   11914:	4282      	cmp	r2, r0
   11916:	d1e8      	bne.n	118ea <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   11918:	f04f 34ff 	mov.w	r4, #4294967295
   1191c:	f1c5 0220 	rsb	r2, r5, #32
   11920:	4094      	lsls	r4, r2
   11922:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   11924:	4014      	ands	r4, r2
   11926:	d0eb      	beq.n	11900 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   11928:	fa94 f2a4 	rbit	r2, r4
   1192c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   11930:	1d11      	adds	r1, r2, #4
   11932:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   11936:	4621      	mov	r1, r4
   11938:	e7df      	b.n	118fa <alloc_chunk+0x2c>

0001193a <merge_chunks>:
{
   1193a:	b538      	push	{r3, r4, r5, lr}
   1193c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1193e:	f7ff ff70 	bl	11822 <chunk_size>
{
   11942:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11944:	4604      	mov	r4, r0
   11946:	4611      	mov	r1, r2
   11948:	4618      	mov	r0, r3
   1194a:	f7ff ff6a 	bl	11822 <chunk_size>
   1194e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11950:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   11952:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11956:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   11958:	4618      	mov	r0, r3
   1195a:	f7ff ff62 	bl	11822 <chunk_size>
	void *cmem = &buf[c];
   1195e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   11960:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   11964:	bd38      	pop	{r3, r4, r5, pc}

00011966 <split_chunks>:
{
   11966:	b538      	push	{r3, r4, r5, lr}
   11968:	460c      	mov	r4, r1
   1196a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1196c:	f7ff ff59 	bl	11822 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   11970:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   11972:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   11974:	4405      	add	r5, r0
   11976:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1197a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1197c:	8060      	strh	r0, [r4, #2]
   1197e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11982:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   11984:	8044      	strh	r4, [r0, #2]
   11986:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1198a:	4618      	mov	r0, r3
   1198c:	4611      	mov	r1, r2
   1198e:	f7ff ff48 	bl	11822 <chunk_size>
	void *cmem = &buf[c];
   11992:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   11994:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   11998:	bd38      	pop	{r3, r4, r5, pc}

0001199a <free_chunk>:
{
   1199a:	b538      	push	{r3, r4, r5, lr}
   1199c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1199e:	f7ff ff40 	bl	11822 <chunk_size>
   119a2:	460c      	mov	r4, r1
   119a4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   119a6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   119aa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   119ac:	07da      	lsls	r2, r3, #31
   119ae:	d40a      	bmi.n	119c6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   119b0:	4628      	mov	r0, r5
   119b2:	f7ff ff7f 	bl	118b4 <free_list_remove>
	return c + chunk_size(h, c);
   119b6:	4621      	mov	r1, r4
   119b8:	4628      	mov	r0, r5
   119ba:	f7ff ff32 	bl	11822 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   119be:	1822      	adds	r2, r4, r0
   119c0:	4628      	mov	r0, r5
   119c2:	f7ff ffba 	bl	1193a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   119c6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   119ca:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   119cc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   119d0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   119d2:	07db      	lsls	r3, r3, #31
   119d4:	d40c      	bmi.n	119f0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   119d6:	4628      	mov	r0, r5
   119d8:	f7ff ff6c 	bl	118b4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   119dc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   119e0:	4622      	mov	r2, r4
   119e2:	1a61      	subs	r1, r4, r1
   119e4:	4628      	mov	r0, r5
   119e6:	f7ff ffa8 	bl	1193a <merge_chunks>
   119ea:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   119ee:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   119f0:	4621      	mov	r1, r4
   119f2:	4628      	mov	r0, r5
}
   119f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   119f8:	f7ff bf18 	b.w	1182c <free_list_add>

000119fc <sys_heap_free>:
	if (mem == NULL) {
   119fc:	b161      	cbz	r1, 11a18 <sys_heap_free+0x1c>
   119fe:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11a00:	3904      	subs	r1, #4
   11a02:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   11a04:	f021 0307 	bic.w	r3, r1, #7
   11a08:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11a0a:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   11a0c:	08c9      	lsrs	r1, r1, #3
   11a0e:	f022 0201 	bic.w	r2, r2, #1
   11a12:	805a      	strh	r2, [r3, #2]
   11a14:	f7ff bfc1 	b.w	1199a <free_chunk>
}
   11a18:	4770      	bx	lr

00011a1a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   11a1a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   11a1c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   11a1e:	b909      	cbnz	r1, 11a24 <sys_heap_alloc+0xa>
		return NULL;
   11a20:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   11a22:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   11a24:	68ab      	ldr	r3, [r5, #8]
   11a26:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   11a2a:	d9f9      	bls.n	11a20 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11a2c:	310b      	adds	r1, #11
   11a2e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   11a30:	4621      	mov	r1, r4
   11a32:	4628      	mov	r0, r5
   11a34:	f7ff ff4b 	bl	118ce <alloc_chunk>
	if (c == 0U) {
   11a38:	4606      	mov	r6, r0
   11a3a:	2800      	cmp	r0, #0
   11a3c:	d0f0      	beq.n	11a20 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   11a3e:	4601      	mov	r1, r0
   11a40:	4628      	mov	r0, r5
   11a42:	f7ff feee 	bl	11822 <chunk_size>
   11a46:	42a0      	cmp	r0, r4
   11a48:	d907      	bls.n	11a5a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   11a4a:	4628      	mov	r0, r5
   11a4c:	1932      	adds	r2, r6, r4
   11a4e:	f7ff ff8a 	bl	11966 <split_chunks>
		free_list_add(h, c + chunk_sz);
   11a52:	4611      	mov	r1, r2
   11a54:	4628      	mov	r0, r5
   11a56:	f7ff fee9 	bl	1182c <free_list_add>
	void *cmem = &buf[c];
   11a5a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   11a5e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11a60:	8853      	ldrh	r3, [r2, #2]
   11a62:	3004      	adds	r0, #4
   11a64:	f043 0301 	orr.w	r3, r3, #1
   11a68:	8053      	strh	r3, [r2, #2]
	return mem;
   11a6a:	e7da      	b.n	11a22 <sys_heap_alloc+0x8>

00011a6c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a70:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11a72:	424a      	negs	r2, r1
   11a74:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   11a78:	ea31 0202 	bics.w	r2, r1, r2
{
   11a7c:	4603      	mov	r3, r0
	if (align != rew) {
   11a7e:	d00a      	beq.n	11a96 <sys_heap_aligned_alloc+0x2a>
		return false;
   11a80:	2f04      	cmp	r7, #4
   11a82:	463a      	mov	r2, r7
   11a84:	bf28      	it	cs
   11a86:	2204      	movcs	r2, #4
   11a88:	46b9      	mov	r9, r7
		align -= rew;
   11a8a:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   11a8c:	b974      	cbnz	r4, 11aac <sys_heap_aligned_alloc+0x40>
		return NULL;
   11a8e:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   11a90:	4628      	mov	r0, r5
   11a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   11a96:	2904      	cmp	r1, #4
   11a98:	d804      	bhi.n	11aa4 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   11a9a:	4621      	mov	r1, r4
}
   11a9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   11aa0:	f7ff bfbb 	b.w	11a1a <sys_heap_alloc>
		rew = 0;
   11aa4:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   11aa8:	2204      	movs	r2, #4
   11aaa:	e7ef      	b.n	11a8c <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   11aac:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   11aae:	68b3      	ldr	r3, [r6, #8]
   11ab0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11ab4:	d9eb      	bls.n	11a8e <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11ab6:	f104 010b 	add.w	r1, r4, #11
   11aba:	4439      	add	r1, r7
   11abc:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11abe:	4630      	mov	r0, r6
   11ac0:	08c9      	lsrs	r1, r1, #3
   11ac2:	f7ff ff04 	bl	118ce <alloc_chunk>
	if (c0 == 0) {
   11ac6:	4680      	mov	r8, r0
   11ac8:	2800      	cmp	r0, #0
   11aca:	d0e0      	beq.n	11a8e <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11acc:	f109 0504 	add.w	r5, r9, #4
   11ad0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   11ad4:	1e7b      	subs	r3, r7, #1
   11ad6:	4435      	add	r5, r6
   11ad8:	441d      	add	r5, r3
   11ada:	427f      	negs	r7, r7
   11adc:	403d      	ands	r5, r7
   11ade:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11ae2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11ae4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11ae6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11ae8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11aea:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   11aee:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   11af0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11af4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11af8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11afc:	d208      	bcs.n	11b10 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   11afe:	4601      	mov	r1, r0
   11b00:	463a      	mov	r2, r7
   11b02:	4630      	mov	r0, r6
   11b04:	f7ff ff2f 	bl	11966 <split_chunks>
		free_list_add(h, c0);
   11b08:	4641      	mov	r1, r8
   11b0a:	4630      	mov	r0, r6
   11b0c:	f7ff fe8e 	bl	1182c <free_list_add>
	return c + chunk_size(h, c);
   11b10:	4639      	mov	r1, r7
   11b12:	4630      	mov	r0, r6
   11b14:	f7ff fe85 	bl	11822 <chunk_size>
   11b18:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11b1a:	4284      	cmp	r4, r0
   11b1c:	d207      	bcs.n	11b2e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   11b1e:	4630      	mov	r0, r6
   11b20:	4622      	mov	r2, r4
   11b22:	f7ff ff20 	bl	11966 <split_chunks>
		free_list_add(h, c_end);
   11b26:	4621      	mov	r1, r4
   11b28:	4630      	mov	r0, r6
   11b2a:	f7ff fe7f 	bl	1182c <free_list_add>
	void *cmem = &buf[c];
   11b2e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11b32:	8873      	ldrh	r3, [r6, #2]
   11b34:	f043 0301 	orr.w	r3, r3, #1
   11b38:	8073      	strh	r3, [r6, #2]
   11b3a:	e7a9      	b.n	11a90 <sys_heap_aligned_alloc+0x24>

00011b3c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   11b3c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11b3e:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11b40:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11b42:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11b46:	f021 0107 	bic.w	r1, r1, #7
{
   11b4a:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11b4c:	1acd      	subs	r5, r1, r3
   11b4e:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   11b50:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   11b52:	fab2 f082 	clz	r0, r2
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   11b56:	2600      	movs	r6, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11b58:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   11b5c:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11b5e:	3407      	adds	r4, #7
   11b60:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11b62:	f1c0 0020 	rsb	r0, r0, #32
   11b66:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   11b6a:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   11b6c:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   11b6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   11b72:	4284      	cmp	r4, r0
   11b74:	d118      	bne.n	11ba8 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11b76:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11b78:	f040 0001 	orr.w	r0, r0, #1
   11b7c:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11b7e:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11b80:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   11b82:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
   11b86:	801e      	strh	r6, [r3, #0]
   11b88:	8067      	strh	r7, [r4, #2]
   11b8a:	195c      	adds	r4, r3, r5
   11b8c:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   11b90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   11b94:	8066      	strh	r6, [r4, #2]
   11b96:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11b98:	8850      	ldrh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   11b9a:	bcf0      	pop	{r4, r5, r6, r7}
   11b9c:	f040 0001 	orr.w	r0, r0, #1
   11ba0:	8050      	strh	r0, [r2, #2]
	free_list_add(h, chunk0_size);
   11ba2:	4618      	mov	r0, r3
   11ba4:	f7ff be42 	b.w	1182c <free_list_add>
		h->buckets[i].next = 0;
   11ba8:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   11bac:	e7e1      	b.n	11b72 <sys_heap_init+0x36>

00011bae <encode_uint>:
{
   11bae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   11bb4:	78d3      	ldrb	r3, [r2, #3]
{
   11bb6:	4680      	mov	r8, r0
	switch (specifier) {
   11bb8:	2b6f      	cmp	r3, #111	; 0x6f
{
   11bba:	460f      	mov	r7, r1
   11bbc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   11bbe:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   11bc2:	d029      	beq.n	11c18 <encode_uint+0x6a>
   11bc4:	d824      	bhi.n	11c10 <encode_uint+0x62>
		return 16;
   11bc6:	2b58      	cmp	r3, #88	; 0x58
   11bc8:	bf14      	ite	ne
   11bca:	260a      	movne	r6, #10
   11bcc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   11bce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   11bd2:	4632      	mov	r2, r6
   11bd4:	2300      	movs	r3, #0
   11bd6:	4640      	mov	r0, r8
   11bd8:	4639      	mov	r1, r7
   11bda:	f7f6 fabb 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11bde:	2a09      	cmp	r2, #9
   11be0:	b2d4      	uxtb	r4, r2
   11be2:	d81e      	bhi.n	11c22 <encode_uint+0x74>
   11be4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   11be6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11be8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   11bea:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11bee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   11bf2:	d301      	bcc.n	11bf8 <encode_uint+0x4a>
   11bf4:	45d1      	cmp	r9, sl
   11bf6:	d811      	bhi.n	11c1c <encode_uint+0x6e>
	if (conv->flag_hash) {
   11bf8:	782b      	ldrb	r3, [r5, #0]
   11bfa:	069b      	lsls	r3, r3, #26
   11bfc:	d505      	bpl.n	11c0a <encode_uint+0x5c>
		if (radix == 8) {
   11bfe:	2e08      	cmp	r6, #8
   11c00:	d115      	bne.n	11c2e <encode_uint+0x80>
			conv->altform_0 = true;
   11c02:	78ab      	ldrb	r3, [r5, #2]
   11c04:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   11c08:	70ab      	strb	r3, [r5, #2]
}
   11c0a:	4648      	mov	r0, r9
   11c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   11c10:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   11c14:	2b70      	cmp	r3, #112	; 0x70
   11c16:	e7d7      	b.n	11bc8 <encode_uint+0x1a>
	switch (specifier) {
   11c18:	2608      	movs	r6, #8
   11c1a:	e7d8      	b.n	11bce <encode_uint+0x20>
		value /= radix;
   11c1c:	4680      	mov	r8, r0
   11c1e:	460f      	mov	r7, r1
   11c20:	e7d7      	b.n	11bd2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c22:	f1bb 0f19 	cmp.w	fp, #25
   11c26:	bf94      	ite	ls
   11c28:	3437      	addls	r4, #55	; 0x37
   11c2a:	3457      	addhi	r4, #87	; 0x57
   11c2c:	e7db      	b.n	11be6 <encode_uint+0x38>
		} else if (radix == 16) {
   11c2e:	2e10      	cmp	r6, #16
   11c30:	d1eb      	bne.n	11c0a <encode_uint+0x5c>
			conv->altform_0c = true;
   11c32:	78ab      	ldrb	r3, [r5, #2]
   11c34:	f043 0310 	orr.w	r3, r3, #16
   11c38:	e7e6      	b.n	11c08 <encode_uint+0x5a>

00011c3a <outs>:
{
   11c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c3e:	4607      	mov	r7, r0
   11c40:	4688      	mov	r8, r1
   11c42:	4615      	mov	r5, r2
   11c44:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   11c46:	4614      	mov	r4, r2
   11c48:	42b4      	cmp	r4, r6
   11c4a:	eba4 0005 	sub.w	r0, r4, r5
   11c4e:	d302      	bcc.n	11c56 <outs+0x1c>
   11c50:	b93e      	cbnz	r6, 11c62 <outs+0x28>
   11c52:	7823      	ldrb	r3, [r4, #0]
   11c54:	b12b      	cbz	r3, 11c62 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   11c56:	4641      	mov	r1, r8
   11c58:	f814 0b01 	ldrb.w	r0, [r4], #1
   11c5c:	47b8      	blx	r7
		if (rc < 0) {
   11c5e:	2800      	cmp	r0, #0
   11c60:	daf2      	bge.n	11c48 <outs+0xe>
}
   11c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011c66 <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   11c66:	4602      	mov	r2, r0
   11c68:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   11c6a:	68c0      	ldr	r0, [r0, #12]
   11c6c:	6814      	ldr	r4, [r2, #0]
   11c6e:	42a0      	cmp	r0, r4
   11c70:	d904      	bls.n	11c7c <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   11c72:	3801      	subs	r0, #1
   11c74:	1b00      	subs	r0, r0, r4
   11c76:	6008      	str	r0, [r1, #0]

		return false;
   11c78:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   11c7a:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   11c7c:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   11c7e:	b918      	cbnz	r0, 11c88 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   11c80:	3b01      	subs	r3, #1
   11c82:	1b1b      	subs	r3, r3, r4
   11c84:	600b      	str	r3, [r1, #0]
		return false;
   11c86:	e7f8      	b.n	11c7a <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   11c88:	1b1b      	subs	r3, r3, r4
	return true;
   11c8a:	2001      	movs	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   11c8c:	600b      	str	r3, [r1, #0]
	return true;
   11c8e:	e7f4      	b.n	11c7a <free_space+0x14>

00011c90 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   11c90:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   11c92:	a901      	add	r1, sp, #4
{
   11c94:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   11c96:	f7ff ffe6 	bl	11c66 <free_space>
   11c9a:	b120      	cbz	r0, 11ca6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   11c9c:	9b01      	ldr	r3, [sp, #4]
   11c9e:	68e2      	ldr	r2, [r4, #12]
   11ca0:	3b01      	subs	r3, #1
   11ca2:	4413      	add	r3, r2
   11ca4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   11ca6:	9801      	ldr	r0, [sp, #4]
   11ca8:	6a23      	ldr	r3, [r4, #32]
   11caa:	43c0      	mvns	r0, r0
}
   11cac:	4418      	add	r0, r3
   11cae:	b002      	add	sp, #8
   11cb0:	bd10      	pop	{r4, pc}

00011cb2 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   11cb2:	b510      	push	{r4, lr}
   11cb4:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   11cb6:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   11cb8:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   11cba:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   11cbc:	07d2      	lsls	r2, r2, #31
   11cbe:	d502      	bpl.n	11cc6 <idx_inc+0x14>
		return i & (buffer->size - 1);
   11cc0:	3b01      	subs	r3, #1
   11cc2:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   11cc4:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   11cc6:	4298      	cmp	r0, r3
   11cc8:	bf28      	it	cs
   11cca:	1ac0      	subcs	r0, r0, r3
   11ccc:	e7fa      	b.n	11cc4 <idx_inc+0x12>

00011cce <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   11cce:	b538      	push	{r3, r4, r5, lr}
   11cd0:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   11cd2:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   11cd4:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   11cd6:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   11cd8:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   11cdc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   11ce0:	6801      	ldr	r1, [r0, #0]
   11ce2:	462a      	mov	r2, r5
{
   11ce4:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   11ce6:	f7ff ffe4 	bl	11cb2 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   11cea:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   11cec:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   11cee:	462a      	mov	r2, r5
   11cf0:	4620      	mov	r0, r4
   11cf2:	f7ff ffde 	bl	11cb2 <idx_inc>
   11cf6:	6060      	str	r0, [r4, #4]
}
   11cf8:	bd38      	pop	{r3, r4, r5, pc}

00011cfa <max_utilization_update>:
{
   11cfa:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   11cfc:	6903      	ldr	r3, [r0, #16]
{
   11cfe:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   11d00:	075b      	lsls	r3, r3, #29
   11d02:	d506      	bpl.n	11d12 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   11d04:	6a45      	ldr	r5, [r0, #36]	; 0x24
   11d06:	f7ff ffc3 	bl	11c90 <get_usage>
   11d0a:	4285      	cmp	r5, r0
   11d0c:	d902      	bls.n	11d14 <max_utilization_update+0x1a>
   11d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11d10:	6260      	str	r0, [r4, #36]	; 0x24
}
   11d12:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   11d14:	4620      	mov	r0, r4
   11d16:	f7ff ffbb 	bl	11c90 <get_usage>
   11d1a:	e7f9      	b.n	11d10 <max_utilization_update+0x16>

00011d1c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   11d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d20:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   11d22:	2300      	movs	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   11d24:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   11d28:	f8d0 901c 	ldr.w	r9, [r0, #28]
	*user_packet = false;
   11d2c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   11d2e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   11d32:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   11d34:	f003 0303 	and.w	r3, r3, #3
   11d38:	2b02      	cmp	r3, #2
{
   11d3a:	468b      	mov	fp, r1
   11d3c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   11d3e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   11d42:	d103      	bne.n	11d4c <drop_item_locked+0x30>
		return item->skip.len;
   11d44:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   11d48:	08ad      	lsrs	r5, r5, #2
   11d4a:	d12e      	bne.n	11daa <drop_item_locked+0x8e>
   11d4c:	4630      	mov	r0, r6
   11d4e:	69a3      	ldr	r3, [r4, #24]
   11d50:	4798      	blx	r3
   11d52:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   11d54:	f1b8 0f00 	cmp.w	r8, #0
   11d58:	d036      	beq.n	11dc8 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   11d5a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   11d5e:	079b      	lsls	r3, r3, #30
   11d60:	d52f      	bpl.n	11dc2 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   11d62:	4620      	mov	r0, r4
   11d64:	f10b 0101 	add.w	r1, fp, #1
   11d68:	f7ff ffb1 	bl	11cce <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   11d6c:	6861      	ldr	r1, [r4, #4]
   11d6e:	462a      	mov	r2, r5
   11d70:	4620      	mov	r0, r4
   11d72:	f7ff ff9e 	bl	11cb2 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   11d76:	6821      	ldr	r1, [r4, #0]
   11d78:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   11d7a:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   11d7c:	4620      	mov	r0, r4
   11d7e:	f7ff ff98 	bl	11cb2 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   11d82:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   11d84:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   11d86:	68e1      	ldr	r1, [r4, #12]
   11d88:	4620      	mov	r0, r4
   11d8a:	f7ff ff92 	bl	11cb2 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   11d8e:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   11d90:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   11d94:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   11d98:	f002 0203 	and.w	r2, r2, #3
   11d9c:	2a02      	cmp	r2, #2
   11d9e:	d10c      	bne.n	11dba <drop_item_locked+0x9e>
		return item->skip.len;
   11da0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   11da4:	089b      	lsrs	r3, r3, #2
   11da6:	d008      	beq.n	11dba <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   11da8:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   11daa:	68e1      	ldr	r1, [r4, #12]
   11dac:	462a      	mov	r2, r5
   11dae:	4620      	mov	r0, r4
   11db0:	f7ff ff7f 	bl	11cb2 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   11db4:	e9c4 0002 	strd	r0, r0, [r4, #8]
   11db8:	e007      	b.n	11dca <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   11dba:	4630      	mov	r0, r6
   11dbc:	69a3      	ldr	r3, [r4, #24]
   11dbe:	4798      	blx	r3
   11dc0:	4405      	add	r5, r0
			*user_packet = true;
   11dc2:	2301      	movs	r3, #1
   11dc4:	703b      	strb	r3, [r7, #0]
   11dc6:	e7f0      	b.n	11daa <drop_item_locked+0x8e>
		item = NULL;
   11dc8:	4646      	mov	r6, r8
	}

	return item;
}
   11dca:	4630      	mov	r0, r6
   11dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011dd0 <mpsc_pbuf_init>:
{
   11dd0:	b538      	push	{r3, r4, r5, lr}
   11dd2:	460d      	mov	r5, r1
   11dd4:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   11dd6:	221c      	movs	r2, #28
   11dd8:	2100      	movs	r1, #0
   11dda:	f000 fac1 	bl	12360 <memset>
	buffer->get_wlen = cfg->get_wlen;
   11dde:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   11de0:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   11de2:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   11de4:	68ab      	ldr	r3, [r5, #8]
   11de6:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   11de8:	682b      	ldr	r3, [r5, #0]
	buffer->size = cfg->size;
   11dea:	6222      	str	r2, [r4, #32]
	buffer->buf = cfg->buf;
   11dec:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
   11dee:	2300      	movs	r3, #0
   11df0:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   11df2:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   11df4:	b122      	cbz	r2, 11e00 <mpsc_pbuf_init+0x30>
   11df6:	1e51      	subs	r1, r2, #1
   11df8:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   11dfa:	bf08      	it	eq
   11dfc:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   11e00:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   11e02:	2201      	movs	r2, #1
   11e04:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11e08:	2100      	movs	r1, #0
}
   11e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11e0e:	f000 bf67 	b.w	12ce0 <z_impl_k_sem_init>

00011e12 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   11e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e16:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   11e18:	6a03      	ldr	r3, [r0, #32]
{
   11e1a:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
   11e1c:	3b01      	subs	r3, #1
   11e1e:	428b      	cmp	r3, r1
{
   11e20:	460f      	mov	r7, r1
   11e22:	4690      	mov	r8, r2
   11e24:	b085      	sub	sp, #20
	if (wlen > (buffer->size - 1)) {
   11e26:	d367      	bcc.n	11ef8 <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
   11e28:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   11e2a:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   11e2c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
   11e30:	f04f 0320 	mov.w	r3, #32
   11e34:	f3ef 8611 	mrs	r6, BASEPRI
   11e38:	f383 8812 	msr	BASEPRI_MAX, r3
   11e3c:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   11e40:	a903      	add	r1, sp, #12
   11e42:	4620      	mov	r0, r4
   11e44:	f7ff ff0f 	bl	11c66 <free_space>
		if (free_wlen >= wlen) {
   11e48:	9903      	ldr	r1, [sp, #12]
   11e4a:	42b9      	cmp	r1, r7
   11e4c:	d324      	bcc.n	11e98 <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   11e4e:	6821      	ldr	r1, [r4, #0]
			item =
   11e50:	69e3      	ldr	r3, [r4, #28]
			buffer->tmp_wr_idx = idx_inc(buffer,
   11e52:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   11e54:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
			item =
   11e58:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			item->hdr.valid = 0;
   11e5c:	f022 0203 	bic.w	r2, r2, #3
   11e60:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   11e64:	463a      	mov	r2, r7
   11e66:	f7ff ff24 	bl	11cb2 <idx_inc>
		cont = false;
   11e6a:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   11e6c:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   11e6e:	f386 8811 	msr	BASEPRI, r6
   11e72:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   11e76:	2b00      	cmp	r3, #0
   11e78:	d040      	beq.n	11efc <mpsc_pbuf_alloc+0xea>
   11e7a:	2d00      	cmp	r5, #0
   11e7c:	d0d8      	beq.n	11e30 <mpsc_pbuf_alloc+0x1e>
   11e7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11e82:	2b00      	cmp	r3, #0
   11e84:	d0d4      	beq.n	11e30 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   11e86:	6963      	ldr	r3, [r4, #20]
   11e88:	b123      	cbz	r3, 11e94 <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
   11e8a:	4629      	mov	r1, r5
   11e8c:	4620      	mov	r0, r4
   11e8e:	4798      	blx	r3
			}
			dropped_item = NULL;
   11e90:	2500      	movs	r5, #0
   11e92:	e7cd      	b.n	11e30 <mpsc_pbuf_alloc+0x1e>
   11e94:	461d      	mov	r5, r3
   11e96:	e7cb      	b.n	11e30 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   11e98:	b128      	cbz	r0, 11ea6 <mpsc_pbuf_alloc+0x94>
   11e9a:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   11e9c:	4620      	mov	r0, r4
   11e9e:	f7ff ff16 	bl	11cce <add_skip_item>
			cont = true;
   11ea2:	9b01      	ldr	r3, [sp, #4]
   11ea4:	e7e3      	b.n	11e6e <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   11ea6:	ea58 0309 	orrs.w	r3, r8, r9
   11eaa:	d017      	beq.n	11edc <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
   11eac:	f000 fe7e 	bl	12bac <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   11eb0:	b9a0      	cbnz	r0, 11edc <mpsc_pbuf_alloc+0xca>
   11eb2:	f386 8811 	msr	BASEPRI, r6
   11eb6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   11eba:	4642      	mov	r2, r8
   11ebc:	464b      	mov	r3, r9
   11ebe:	4658      	mov	r0, fp
   11ec0:	f7fe fbe0 	bl	10684 <z_impl_k_sem_take>
	__asm__ volatile(
   11ec4:	f04f 0320 	mov.w	r3, #32
   11ec8:	f3ef 8611 	mrs	r6, BASEPRI
   11ecc:	f383 8812 	msr	BASEPRI_MAX, r3
   11ed0:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   11ed4:	fab0 f380 	clz	r3, r0
   11ed8:	095b      	lsrs	r3, r3, #5
   11eda:	e7c8      	b.n	11e6e <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   11edc:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   11ede:	f10d 030b 	add.w	r3, sp, #11
   11ee2:	4620      	mov	r0, r4
   11ee4:	9903      	ldr	r1, [sp, #12]
   11ee6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   11eea:	f7ff ff17 	bl	11d1c <drop_item_locked>
			cont = dropped_item != NULL;
   11eee:	1e03      	subs	r3, r0, #0
   11ef0:	4605      	mov	r5, r0
   11ef2:	bf18      	it	ne
   11ef4:	2301      	movne	r3, #1
   11ef6:	e7ba      	b.n	11e6e <mpsc_pbuf_alloc+0x5c>
		return NULL;
   11ef8:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   11efc:	4650      	mov	r0, sl
   11efe:	b005      	add	sp, #20
   11f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011f04 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   11f04:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   11f06:	6983      	ldr	r3, [r0, #24]
{
   11f08:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   11f0a:	4608      	mov	r0, r1
{
   11f0c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   11f0e:	4798      	blx	r3
   11f10:	4602      	mov	r2, r0
   11f12:	f04f 0320 	mov.w	r3, #32
   11f16:	f3ef 8611 	mrs	r6, BASEPRI
   11f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   11f1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   11f22:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   11f24:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   11f26:	f043 0301 	orr.w	r3, r3, #1
   11f2a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   11f2c:	6861      	ldr	r1, [r4, #4]
   11f2e:	f7ff fec0 	bl	11cb2 <idx_inc>
   11f32:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   11f34:	4620      	mov	r0, r4
   11f36:	f7ff fee0 	bl	11cfa <max_utilization_update>
	__asm__ volatile(
   11f3a:	f386 8811 	msr	BASEPRI, r6
   11f3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   11f42:	bd70      	pop	{r4, r5, r6, pc}

00011f44 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   11f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f48:	4604      	mov	r4, r0
	__asm__ volatile(
   11f4a:	f04f 0320 	mov.w	r3, #32
   11f4e:	f3ef 8611 	mrs	r6, BASEPRI
   11f52:	f383 8812 	msr	BASEPRI_MAX, r3
   11f56:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   11f5a:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   11f5e:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   11f60:	bf88      	it	hi
   11f62:	6a23      	ldrhi	r3, [r4, #32]
   11f64:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   11f66:	b1f3      	cbz	r3, 11fa6 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   11f68:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   11f6a:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		item = (union mpsc_pbuf_generic *)
   11f6e:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   11f72:	f012 0303 	ands.w	r3, r2, #3
   11f76:	d016      	beq.n	11fa6 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   11f78:	2b02      	cmp	r3, #2
   11f7a:	d103      	bne.n	11f84 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   11f7c:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   11f80:	08ad      	lsrs	r5, r5, #2
   11f82:	d115      	bne.n	11fb0 <mpsc_pbuf_claim+0x6c>
   11f84:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   11f86:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   11f88:	d50f      	bpl.n	11faa <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   11f8a:	f042 0202 	orr.w	r2, r2, #2
   11f8e:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   11f92:	4640      	mov	r0, r8
   11f94:	4798      	blx	r3
   11f96:	4639      	mov	r1, r7
   11f98:	4602      	mov	r2, r0
   11f9a:	4620      	mov	r0, r4
   11f9c:	f7ff fe89 	bl	11cb2 <idx_inc>
		cont = false;
   11fa0:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   11fa2:	60a0      	str	r0, [r4, #8]
   11fa4:	e011      	b.n	11fca <mpsc_pbuf_claim+0x86>
			item = NULL;
   11fa6:	4698      	mov	r8, r3
   11fa8:	e00f      	b.n	11fca <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   11faa:	4640      	mov	r0, r8
   11fac:	4798      	blx	r3
   11fae:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   11fb0:	68a1      	ldr	r1, [r4, #8]
   11fb2:	462a      	mov	r2, r5
   11fb4:	4620      	mov	r0, r4
   11fb6:	f7ff fe7c 	bl	11cb2 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   11fba:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   11fbc:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   11fbe:	462a      	mov	r2, r5
   11fc0:	4620      	mov	r0, r4
   11fc2:	f7ff fe76 	bl	11cb2 <idx_inc>
				cont = true;
   11fc6:	2301      	movs	r3, #1
				buffer->rd_idx =
   11fc8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11fca:	f386 8811 	msr	BASEPRI, r6
   11fce:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   11fd2:	2b00      	cmp	r3, #0
   11fd4:	d1b9      	bne.n	11f4a <mpsc_pbuf_claim+0x6>

	return item;
}
   11fd6:	4640      	mov	r0, r8
   11fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011fdc <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   11fdc:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   11fde:	6983      	ldr	r3, [r0, #24]
{
   11fe0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   11fe2:	4608      	mov	r0, r1
{
   11fe4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   11fe6:	4798      	blx	r3
   11fe8:	4602      	mov	r2, r0
	__asm__ volatile(
   11fea:	f04f 0320 	mov.w	r3, #32
   11fee:	f3ef 8611 	mrs	r6, BASEPRI
   11ff2:	f383 8812 	msr	BASEPRI_MAX, r3
   11ff6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   11ffa:	782b      	ldrb	r3, [r5, #0]
   11ffc:	f36f 0300 	bfc	r3, #0, #1
   12000:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12002:	6923      	ldr	r3, [r4, #16]
   12004:	079b      	lsls	r3, r3, #30
   12006:	d505      	bpl.n	12014 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   12008:	68e1      	ldr	r1, [r4, #12]
   1200a:	69e3      	ldr	r3, [r4, #28]
   1200c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12010:	429d      	cmp	r5, r3
   12012:	d112      	bne.n	1203a <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   12014:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   12016:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
   12018:	f36f 0341 	bfc	r3, #1, #1
   1201c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1201e:	68e1      	ldr	r1, [r4, #12]
   12020:	f7ff fe47 	bl	11cb2 <idx_inc>
   12024:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12026:	f386 8811 	msr	BASEPRI, r6
   1202a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1202e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   12032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12036:	f7fe bb05 	b.w	10644 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1203a:	682b      	ldr	r3, [r5, #0]
   1203c:	f360 039f 	bfi	r3, r0, #2, #30
   12040:	602b      	str	r3, [r5, #0]
   12042:	e7f0      	b.n	12026 <mpsc_pbuf_free+0x4a>

00012044 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   12044:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   12048:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1204a:	bf8a      	itet	hi
   1204c:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   1204e:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   12050:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   12052:	1e18      	subs	r0, r3, #0
   12054:	bf18      	it	ne
   12056:	2001      	movne	r0, #1
   12058:	4770      	bx	lr

0001205a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1205a:	4770      	bx	lr

0001205c <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1205c:	f04f 0320 	mov.w	r3, #32
   12060:	f3ef 8111 	mrs	r1, BASEPRI
   12064:	f383 8812 	msr	BASEPRI_MAX, r3
   12068:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   1206c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   12070:	2202      	movs	r2, #2
   12072:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   12076:	2201      	movs	r2, #1
   12078:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1207c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   12080:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   12084:	f381 8811 	msr	BASEPRI, r1
   12088:	f3bf 8f6f 	isb	sy
}
   1208c:	2000      	movs	r0, #0
   1208e:	4770      	bx	lr

00012090 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   12090:	2806      	cmp	r0, #6
   12092:	d108      	bne.n	120a6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   12094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   12098:	2201      	movs	r2, #1
   1209a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1209e:	f3bf 8f4f 	dsb	sy
        __WFE();
   120a2:	bf20      	wfe
    while (true)
   120a4:	e7fd      	b.n	120a2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   120a6:	4770      	bx	lr

000120a8 <pm_state_exit_post_ops>:
   120a8:	2300      	movs	r3, #0
   120aa:	f383 8811 	msr	BASEPRI, r3
   120ae:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   120b2:	4770      	bx	lr

000120b4 <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   120b4:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   120b6:	ab01      	add	r3, sp, #4
   120b8:	f000 fc33 	bl	12922 <tfm_platform_mem_read>

	switch (status) {
   120bc:	2802      	cmp	r0, #2
   120be:	d00a      	beq.n	120d6 <soc_secure_mem_read+0x22>
   120c0:	2803      	cmp	r0, #3
   120c2:	d00b      	beq.n	120dc <soc_secure_mem_read+0x28>
   120c4:	b968      	cbnz	r0, 120e2 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   120c6:	9801      	ldr	r0, [sp, #4]
   120c8:	3800      	subs	r0, #0
   120ca:	bf18      	it	ne
   120cc:	2001      	movne	r0, #1
   120ce:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   120d0:	b003      	add	sp, #12
   120d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   120d6:	f06f 0015 	mvn.w	r0, #21
   120da:	e7f9      	b.n	120d0 <soc_secure_mem_read+0x1c>
	switch (status) {
   120dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   120e0:	e7f6      	b.n	120d0 <soc_secure_mem_read+0x1c>
		return -EPERM;
   120e2:	f04f 30ff 	mov.w	r0, #4294967295
   120e6:	e7f3      	b.n	120d0 <soc_secure_mem_read+0x1c>

000120e8 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   120e8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   120ea:	075b      	lsls	r3, r3, #29
   120ec:	d40b      	bmi.n	12106 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	8840      	ldrh	r0, [r0, #2]
   120f2:	f3c3 2349 	ubfx	r3, r3, #9, #10
   120f6:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   120fa:	4418      	add	r0, r3
   120fc:	3017      	adds	r0, #23
   120fe:	f020 0007 	bic.w	r0, r0, #7
   12102:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   12104:	4770      	bx	lr
	return 0;
   12106:	2000      	movs	r0, #0
}
   12108:	4770      	bx	lr

0001210a <dummy_timestamp>:
}
   1210a:	2000      	movs	r0, #0
   1210c:	4770      	bx	lr

0001210e <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1210e:	f000 baf7 	b.w	12700 <sys_clock_cycle_get_32>

00012112 <notify_drop>:
	z_log_dropped(true);
   12112:	2001      	movs	r0, #1
   12114:	f7f7 bc44 	b.w	99a0 <z_log_dropped>

00012118 <z_log_get_tag>:
}
   12118:	2000      	movs	r0, #0
   1211a:	4770      	bx	lr

0001211c <z_cbprintf_cpy>:
{
   1211c:	b570      	push	{r4, r5, r6, lr}
   1211e:	4603      	mov	r3, r0
   12120:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   12122:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
   12126:	1a12      	subs	r2, r2, r0
   12128:	428a      	cmp	r2, r1
{
   1212a:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
   1212c:	d30a      	bcc.n	12144 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   1212e:	682e      	ldr	r6, [r5, #0]
   12130:	460a      	mov	r2, r1
   12132:	4430      	add	r0, r6
   12134:	4619      	mov	r1, r3
   12136:	f000 f908 	bl	1234a <memcpy>
	return len;
   1213a:	4620      	mov	r0, r4
	desc->off += len;
   1213c:	68ab      	ldr	r3, [r5, #8]
   1213e:	4423      	add	r3, r4
   12140:	60ab      	str	r3, [r5, #8]
}
   12142:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   12144:	f06f 001b 	mvn.w	r0, #27
   12148:	e7fb      	b.n	12142 <z_cbprintf_cpy+0x26>

0001214a <z_log_msg_finalize>:
{
   1214a:	b570      	push	{r4, r5, r6, lr}
   1214c:	460e      	mov	r6, r1
   1214e:	4615      	mov	r5, r2
   12150:	4619      	mov	r1, r3
	if (!msg) {
   12152:	4604      	mov	r4, r0
   12154:	b918      	cbnz	r0, 1215e <z_log_msg_finalize+0x14>
}
   12156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1215a:	f7f7 bc21 	b.w	99a0 <z_log_dropped>
	if (data) {
   1215e:	b143      	cbz	r3, 12172 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   12160:	f100 0310 	add.w	r3, r0, #16
   12164:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   12168:	4418      	add	r0, r3
   1216a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1216e:	f000 f8ec 	bl	1234a <memcpy>
	z_log_msg_commit(msg);
   12172:	4620      	mov	r0, r4
	msg->hdr.source = source;
   12174:	e9c4 5600 	strd	r5, r6, [r4]
}
   12178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1217c:	f7f7 bd3e 	b.w	9bfc <z_log_msg_commit>

00012180 <buffer_write>:
{
   12180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12182:	4606      	mov	r6, r0
   12184:	460d      	mov	r5, r1
   12186:	4614      	mov	r4, r2
   12188:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1218a:	4621      	mov	r1, r4
   1218c:	4628      	mov	r0, r5
   1218e:	463a      	mov	r2, r7
   12190:	47b0      	blx	r6
	} while (len != 0);
   12192:	1a24      	subs	r4, r4, r0
		buf += processed;
   12194:	4405      	add	r5, r0
	} while (len != 0);
   12196:	d1f8      	bne.n	1218a <buffer_write+0xa>
}
   12198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001219a <cbvprintf>:
{
   1219a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1219c:	2400      	movs	r4, #0
   1219e:	9400      	str	r4, [sp, #0]
   121a0:	f7f6 fe9c 	bl	8edc <z_cbvprintf_impl>
}
   121a4:	b002      	add	sp, #8
   121a6:	bd10      	pop	{r4, pc}

000121a8 <log_output_flush>:
		     output->control_block->offset,
   121a8:	6842      	ldr	r2, [r0, #4]
{
   121aa:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   121ac:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   121b0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   121b2:	6881      	ldr	r1, [r0, #8]
   121b4:	6800      	ldr	r0, [r0, #0]
   121b6:	f7ff ffe3 	bl	12180 <buffer_write>
	output->control_block->offset = 0;
   121ba:	2200      	movs	r2, #0
   121bc:	6863      	ldr	r3, [r4, #4]
   121be:	601a      	str	r2, [r3, #0]
}
   121c0:	bd10      	pop	{r4, pc}

000121c2 <out_func>:
{
   121c2:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   121c4:	684b      	ldr	r3, [r1, #4]
{
   121c6:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   121c8:	681a      	ldr	r2, [r3, #0]
   121ca:	68cb      	ldr	r3, [r1, #12]
{
   121cc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   121ce:	429a      	cmp	r2, r3
   121d0:	d102      	bne.n	121d8 <out_func+0x16>
		log_output_flush(out_ctx);
   121d2:	4608      	mov	r0, r1
   121d4:	f7ff ffe8 	bl	121a8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   121d8:	6863      	ldr	r3, [r4, #4]
   121da:	e8d3 2fef 	ldaex	r2, [r3]
   121de:	1c51      	adds	r1, r2, #1
   121e0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   121e4:	2800      	cmp	r0, #0
   121e6:	d1f8      	bne.n	121da <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   121e8:	68a3      	ldr	r3, [r4, #8]
}
   121ea:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   121ec:	549d      	strb	r5, [r3, r2]
}
   121ee:	bd38      	pop	{r3, r4, r5, pc}

000121f0 <cr_out_func>:
{
   121f0:	b538      	push	{r3, r4, r5, lr}
   121f2:	4605      	mov	r5, r0
   121f4:	460c      	mov	r4, r1
	out_func(c, ctx);
   121f6:	f7ff ffe4 	bl	121c2 <out_func>
	if (c == '\n') {
   121fa:	2d0a      	cmp	r5, #10
   121fc:	d103      	bne.n	12206 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   121fe:	4621      	mov	r1, r4
   12200:	200d      	movs	r0, #13
   12202:	f7ff ffde 	bl	121c2 <out_func>
}
   12206:	2000      	movs	r0, #0
   12208:	bd38      	pop	{r3, r4, r5, pc}

0001220a <usb_write>:
{
   1220a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1220e:	4606      	mov	r6, r0
   12210:	460f      	mov	r7, r1
   12212:	4690      	mov	r8, r2
   12214:	4699      	mov	r9, r3
   12216:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   12218:	464b      	mov	r3, r9
   1221a:	4642      	mov	r2, r8
   1221c:	4639      	mov	r1, r7
   1221e:	4630      	mov	r0, r6
   12220:	f7fa fe6e 	bl	cf00 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   12224:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   12228:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   1222a:	d103      	bne.n	12234 <usb_write+0x2a>
	z_impl_k_yield();
   1222c:	f7fe fdda 	bl	10de4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   12230:	3d01      	subs	r5, #1
   12232:	d1f1      	bne.n	12218 <usb_write+0xe>
}
   12234:	4620      	mov	r0, r4
   12236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001223a <usb_get_dev_data_by_cfg>:
	return list->head;
   1223a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1223c:	b138      	cbz	r0, 1224e <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   1223e:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12242:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
   12244:	685b      	ldr	r3, [r3, #4]
   12246:	428b      	cmp	r3, r1
   12248:	d001      	beq.n	1224e <usb_get_dev_data_by_cfg+0x14>
	return node->next;
   1224a:	6840      	ldr	r0, [r0, #4]
   1224c:	e7f6      	b.n	1223c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   1224e:	4770      	bx	lr

00012250 <usb_get_dev_data_by_iface>:
	return list->head;
   12250:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12252:	b148      	cbz	r0, 12268 <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   12254:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12258:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
   1225a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   1225c:	685b      	ldr	r3, [r3, #4]
   1225e:	789b      	ldrb	r3, [r3, #2]
   12260:	428b      	cmp	r3, r1
   12262:	d001      	beq.n	12268 <usb_get_dev_data_by_iface+0x18>
	return node->next;
   12264:	6840      	ldr	r0, [r0, #4]
   12266:	e7f4      	b.n	12252 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   12268:	4770      	bx	lr

0001226a <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   1226a:	b530      	push	{r4, r5, lr}
	return list->head;
   1226c:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1226e:	b188      	cbz	r0, 12294 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   12270:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12274:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
   12276:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   12278:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   1227a:	7f1d      	ldrb	r5, [r3, #28]
   1227c:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   1227e:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   12280:	b2dc      	uxtb	r4, r3
   12282:	42a5      	cmp	r5, r4
   12284:	d801      	bhi.n	1228a <usb_get_dev_data_by_ep+0x20>
	return node->next;
   12286:	6840      	ldr	r0, [r0, #4]
   12288:	e7f1      	b.n	1226e <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   1228a:	3301      	adds	r3, #1
   1228c:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   12290:	428c      	cmp	r4, r1
   12292:	d1f5      	bne.n	12280 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   12294:	bd30      	pop	{r4, r5, pc}

00012296 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   12296:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12298:	6800      	ldr	r0, [r0, #0]
   1229a:	f7f9 b811 	b.w	b2c0 <z_arm_fatal_error>

0001229e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1229e:	2100      	movs	r1, #0
   122a0:	2001      	movs	r0, #1
   122a2:	f7f9 b80d 	b.w	b2c0 <z_arm_fatal_error>

000122a6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   122a6:	b508      	push	{r3, lr}
	handler();
   122a8:	f7f9 f8b8 	bl	b41c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   122ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   122b0:	f7f9 b980 	b.w	b5b4 <z_arm_exc_exit>

000122b4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   122b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   122b6:	f383 880b 	msr	PSPLIM, r3
}
   122ba:	4770      	bx	lr

000122bc <z_log_msg_static_create.constprop.0>:
   122bc:	2300      	movs	r3, #0
   122be:	f7f7 bd07 	b.w	9cd0 <z_impl_z_log_msg_static_create>

000122c2 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   122c2:	4770      	bx	lr

000122c4 <z_arm_restore_fp_context>:
   122c4:	4770      	bx	lr

000122c6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   122c6:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   122ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   122ce:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   122d0:	bf08      	it	eq
   122d2:	f06f 0015 	mvneq.w	r0, #21
   122d6:	4770      	bx	lr

000122d8 <mpu_configure_region>:
{
   122d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	region_conf.base = new_region->start;
   122da:	680d      	ldr	r5, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   122dc:	684b      	ldr	r3, [r1, #4]
	p_attr->rbar = attr->rbar &
   122de:	890a      	ldrh	r2, [r1, #8]
   122e0:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
   122e2:	9500      	str	r5, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   122e4:	3b01      	subs	r3, #1
   122e6:	f025 051f 	bic.w	r5, r5, #31
	p_attr->rbar = attr->rbar &
   122ea:	f002 021f 	and.w	r2, r2, #31
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   122ee:	442b      	add	r3, r5
	p_attr->rbar = attr->rbar &
   122f0:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   122f4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   122f8:	2807      	cmp	r0, #7
	p_attr->rbar = attr->rbar &
   122fa:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   122fe:	9303      	str	r3, [sp, #12]
   12300:	d903      	bls.n	1230a <mpu_configure_region+0x32>
   12302:	f7f9 fd21 	bl	bd48 <region_allocate_and_init.part.0>
}
   12306:	b004      	add	sp, #16
   12308:	bd70      	pop	{r4, r5, r6, pc}
	region_init(index, region_conf);
   1230a:	4669      	mov	r1, sp
   1230c:	f7f9 fd02 	bl	bd14 <region_init>
	return region_allocate_and_init(index,
   12310:	e7f9      	b.n	12306 <mpu_configure_region+0x2e>

00012312 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12312:	4603      	mov	r3, r0
	size_t n = 0;
   12314:	2000      	movs	r0, #0

	while (*s != '\0') {
   12316:	5c1a      	ldrb	r2, [r3, r0]
   12318:	b902      	cbnz	r2, 1231c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1231a:	4770      	bx	lr
		n++;
   1231c:	3001      	adds	r0, #1
   1231e:	e7fa      	b.n	12316 <strlen+0x4>

00012320 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12320:	4603      	mov	r3, r0
	size_t n = 0;
   12322:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   12324:	5c1a      	ldrb	r2, [r3, r0]
   12326:	b10a      	cbz	r2, 1232c <strnlen+0xc>
   12328:	4288      	cmp	r0, r1
   1232a:	d100      	bne.n	1232e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1232c:	4770      	bx	lr
		n++;
   1232e:	3001      	adds	r0, #1
   12330:	e7f8      	b.n	12324 <strnlen+0x4>

00012332 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12332:	1e43      	subs	r3, r0, #1
   12334:	3901      	subs	r1, #1
   12336:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1233a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1233e:	4282      	cmp	r2, r0
   12340:	d101      	bne.n	12346 <strcmp+0x14>
   12342:	2a00      	cmp	r2, #0
   12344:	d1f7      	bne.n	12336 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   12346:	1a10      	subs	r0, r2, r0
   12348:	4770      	bx	lr

0001234a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1234a:	b510      	push	{r4, lr}
   1234c:	1e43      	subs	r3, r0, #1
   1234e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   12350:	4291      	cmp	r1, r2
   12352:	d100      	bne.n	12356 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   12354:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   12356:	f811 4b01 	ldrb.w	r4, [r1], #1
   1235a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1235e:	e7f7      	b.n	12350 <memcpy+0x6>

00012360 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   12360:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   12362:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   12364:	4402      	add	r2, r0
   12366:	4293      	cmp	r3, r2
   12368:	d100      	bne.n	1236c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1236a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1236c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12370:	e7f9      	b.n	12366 <memset+0x6>

00012372 <_stdout_hook_default>:
}
   12372:	f04f 30ff 	mov.w	r0, #4294967295
   12376:	4770      	bx	lr

00012378 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   12378:	7081      	strb	r1, [r0, #2]
}
   1237a:	4770      	bx	lr

0001237c <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
   1237c:	2000      	movs	r0, #0
   1237e:	4770      	bx	lr

00012380 <z_log_msg_static_create.constprop.0>:
   12380:	2300      	movs	r3, #0
   12382:	f7f7 bca5 	b.w	9cd0 <z_impl_z_log_msg_static_create>

00012386 <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
   12386:	6903      	ldr	r3, [r0, #16]
   12388:	6842      	ldr	r2, [r0, #4]
   1238a:	685b      	ldr	r3, [r3, #4]
   1238c:	6852      	ldr	r2, [r2, #4]
}
   1238e:	2000      	movs	r0, #0
	dst[0] = val;
   12390:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
   12392:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12396:	7453      	strb	r3, [r2, #17]
   12398:	4770      	bx	lr

0001239a <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   1239a:	6903      	ldr	r3, [r0, #16]
{
   1239c:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1239e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   123a2:	2300      	movs	r3, #0
   123a4:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   123a6:	7f83      	ldrb	r3, [r0, #30]
{
   123a8:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   123aa:	b113      	cbz	r3, 123b2 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   123ac:	7a40      	ldrb	r0, [r0, #9]
   123ae:	f000 fbc3 	bl	12b38 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   123b2:	2301      	movs	r3, #1
   123b4:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   123b6:	2300      	movs	r3, #0
   123b8:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   123ba:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   123bc:	77a3      	strb	r3, [r4, #30]
}
   123be:	bd10      	pop	{r4, pc}

000123c0 <z_log_msg_static_create.constprop.0>:
   123c0:	2300      	movs	r3, #0
   123c2:	f7f7 bc85 	b.w	9cd0 <z_impl_z_log_msg_static_create>

000123c6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   123c6:	f7fe b855 	b.w	10474 <z_impl_k_mutex_lock>

000123ca <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   123ca:	f7fe b8cb 	b.w	10564 <z_impl_k_mutex_unlock>

000123ce <usb_dc_ep_read>:
{
   123ce:	b570      	push	{r4, r5, r6, lr}
   123d0:	4604      	mov	r4, r0
   123d2:	460e      	mov	r6, r1
   123d4:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   123d6:	f7fa fe31 	bl	d03c <usb_dc_ep_read_wait>
	if (ret) {
   123da:	b930      	cbnz	r0, 123ea <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   123dc:	b906      	cbnz	r6, 123e0 <usb_dc_ep_read+0x12>
   123de:	b125      	cbz	r5, 123ea <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   123e0:	4620      	mov	r0, r4
}
   123e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   123e6:	f7fa be8f 	b.w	d108 <usb_dc_ep_read_continue>
}
   123ea:	bd70      	pop	{r4, r5, r6, pc}

000123ec <usb_dc_wakeup_request>:
{
   123ec:	b508      	push	{r3, lr}
	bool res = nrfx_usbd_wakeup_req();
   123ee:	f7fd f857 	bl	f4a0 <nrfx_usbd_wakeup_req>
		return -EAGAIN;
   123f2:	2800      	cmp	r0, #0
}
   123f4:	bf0c      	ite	eq
   123f6:	f06f 000a 	mvneq.w	r0, #10
   123fa:	2000      	movne	r0, #0
   123fc:	bd08      	pop	{r3, pc}

000123fe <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   123fe:	220c      	movs	r2, #12
   12400:	6903      	ldr	r3, [r0, #16]
   12402:	b2c9      	uxtb	r1, r1
   12404:	fb01 3302 	mla	r3, r1, r2, r3
   12408:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   1240a:	f000 0007 	and.w	r0, r0, #7
   1240e:	4770      	bx	lr

00012410 <set_on_state>:
	__asm__ volatile(
   12410:	f04f 0320 	mov.w	r3, #32
   12414:	f3ef 8211 	mrs	r2, BASEPRI
   12418:	f383 8812 	msr	BASEPRI_MAX, r3
   1241c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   12420:	6803      	ldr	r3, [r0, #0]
   12422:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12426:	f043 0302 	orr.w	r3, r3, #2
   1242a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1242c:	f382 8811 	msr	BASEPRI, r2
   12430:	f3bf 8f6f 	isb	sy
}
   12434:	4770      	bx	lr

00012436 <stop>:
{
   12436:	4603      	mov	r3, r0
   12438:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1243a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1243c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1243e:	f04f 0420 	mov.w	r4, #32
   12442:	f3ef 8611 	mrs	r6, BASEPRI
   12446:	f384 8812 	msr	BASEPRI_MAX, r4
   1244a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1244e:	250c      	movs	r5, #12
   12450:	fb05 0401 	mla	r4, r5, r1, r0
   12454:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   12456:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1245a:	d001      	beq.n	12460 <stop+0x2a>
   1245c:	42a2      	cmp	r2, r4
   1245e:	d111      	bne.n	12484 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   12460:	2201      	movs	r2, #1
   12462:	fb05 0001 	mla	r0, r5, r1, r0
   12466:	6782      	str	r2, [r0, #120]	; 0x78
	int err = 0;
   12468:	2000      	movs	r0, #0
	__asm__ volatile(
   1246a:	f386 8811 	msr	BASEPRI, r6
   1246e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   12472:	b930      	cbnz	r0, 12482 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   12474:	220c      	movs	r2, #12
   12476:	685b      	ldr	r3, [r3, #4]
   12478:	fb02 3101 	mla	r1, r2, r1, r3
   1247c:	684b      	ldr	r3, [r1, #4]
   1247e:	4798      	blx	r3
	return 0;
   12480:	2000      	movs	r0, #0
}
   12482:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   12484:	f04f 30ff 	mov.w	r0, #4294967295
   12488:	e7ef      	b.n	1246a <stop+0x34>

0001248a <api_stop>:
	return stop(dev, subsys, CTX_API);
   1248a:	2280      	movs	r2, #128	; 0x80
   1248c:	f7ff bfd3 	b.w	12436 <stop>

00012490 <async_start>:
{
   12490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12492:	9f06      	ldr	r7, [sp, #24]
   12494:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   12496:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   12498:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1249a:	f04f 0020 	mov.w	r0, #32
   1249e:	f3ef 8c11 	mrs	ip, BASEPRI
   124a2:	f380 8812 	msr	BASEPRI_MAX, r0
   124a6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   124aa:	260c      	movs	r6, #12
   124ac:	fb06 4601 	mla	r6, r6, r1, r4
   124b0:	6fb0      	ldr	r0, [r6, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   124b2:	f000 0e07 	and.w	lr, r0, #7
   124b6:	f1be 0f01 	cmp.w	lr, #1
   124ba:	d110      	bne.n	124de <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   124bc:	67b7      	str	r7, [r6, #120]	; 0x78
	int err = 0;
   124be:	2600      	movs	r6, #0
	__asm__ volatile(
   124c0:	f38c 8811 	msr	BASEPRI, ip
   124c4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   124c8:	b93e      	cbnz	r6, 124da <async_start+0x4a>
	subdata->cb = cb;
   124ca:	200c      	movs	r0, #12
   124cc:	4341      	muls	r1, r0
   124ce:	440c      	add	r4, r1
	subdata->user_data = user_data;
   124d0:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   124d4:	686b      	ldr	r3, [r5, #4]
   124d6:	585b      	ldr	r3, [r3, r1]
   124d8:	4798      	blx	r3
}
   124da:	4630      	mov	r0, r6
   124dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   124de:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   124e2:	4287      	cmp	r7, r0
   124e4:	bf14      	ite	ne
   124e6:	f04f 36ff 	movne.w	r6, #4294967295
   124ea:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   124ee:	e7e7      	b.n	124c0 <async_start+0x30>

000124f0 <api_start>:
{
   124f0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   124f2:	2480      	movs	r4, #128	; 0x80
   124f4:	9400      	str	r4, [sp, #0]
   124f6:	f7ff ffcb 	bl	12490 <async_start>
}
   124fa:	b002      	add	sp, #8
   124fc:	bd10      	pop	{r4, pc}

000124fe <onoff_started_callback>:
{
   124fe:	b410      	push	{r4}
	notify(mgr, 0);
   12500:	241c      	movs	r4, #28
	return &data->mgr[type];
   12502:	6900      	ldr	r0, [r0, #16]
   12504:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   12506:	fb03 0004 	mla	r0, r3, r4, r0
   1250a:	2100      	movs	r1, #0
}
   1250c:	bc10      	pop	{r4}
	notify(mgr, 0);
   1250e:	4710      	bx	r2

00012510 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   12510:	2003      	movs	r0, #3
   12512:	f7fc b8c1 	b.w	e698 <nrfx_clock_start>

00012516 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   12516:	2002      	movs	r0, #2
   12518:	f7fc b8be 	b.w	e698 <nrfx_clock_start>

0001251c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1251c:	2000      	movs	r0, #0
   1251e:	f7fc b8bb 	b.w	e698 <nrfx_clock_start>

00012522 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   12522:	2003      	movs	r0, #3
   12524:	f000 ba1a 	b.w	1295c <nrfx_clock_stop>

00012528 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   12528:	2002      	movs	r0, #2
   1252a:	f000 ba17 	b.w	1295c <nrfx_clock_stop>

0001252e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1252e:	2000      	movs	r0, #0
   12530:	f000 ba14 	b.w	1295c <nrfx_clock_stop>

00012534 <blocking_start_callback>:
{
   12534:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12536:	f7fe b885 	b.w	10644 <z_impl_k_sem_give>

0001253a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1253a:	6843      	ldr	r3, [r0, #4]
}
   1253c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1253e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   12540:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   12542:	600b      	str	r3, [r1, #0]
}
   12544:	4770      	bx	lr

00012546 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12546:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   12548:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1254c:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1254e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   12552:	6098      	str	r0, [r3, #8]
}
   12554:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   12556:	60d9      	str	r1, [r3, #12]
   12558:	4770      	bx	lr

0001255a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1255a:	6843      	ldr	r3, [r0, #4]
}
   1255c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1255e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   12560:	6099      	str	r1, [r3, #8]
}
   12562:	4770      	bx	lr

00012564 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12564:	6843      	ldr	r3, [r0, #4]
}
   12566:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12568:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1256a:	60d9      	str	r1, [r3, #12]
}
   1256c:	4770      	bx	lr

0001256e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1256e:	6843      	ldr	r3, [r0, #4]
   12570:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12572:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   12574:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   12578:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1257a:	6090      	str	r0, [r2, #8]
}
   1257c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1257e:	60d3      	str	r3, [r2, #12]
   12580:	4770      	bx	lr

00012582 <gpio_nrfx_manage_callback>:
	return port->data;
   12582:	6903      	ldr	r3, [r0, #16]
{
   12584:	b530      	push	{r4, r5, lr}
	return list->head;
   12586:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12588:	b158      	cbz	r0, 125a2 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1258a:	2400      	movs	r4, #0
   1258c:	4281      	cmp	r1, r0
   1258e:	d112      	bne.n	125b6 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   12590:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   12592:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   12594:	b954      	cbnz	r4, 125ac <gpio_nrfx_manage_callback+0x2a>
   12596:	428d      	cmp	r5, r1
	list->head = node;
   12598:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1259a:	d100      	bne.n	1259e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1259c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1259e:	2000      	movs	r0, #0
   125a0:	6008      	str	r0, [r1, #0]
	if (set) {
   125a2:	b96a      	cbnz	r2, 125c0 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   125a4:	2000      	movs	r0, #0
}
   125a6:	bd30      	pop	{r4, r5, pc}
   125a8:	4628      	mov	r0, r5
   125aa:	e7ef      	b.n	1258c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   125ac:	428d      	cmp	r5, r1
	parent->next = child;
   125ae:	6020      	str	r0, [r4, #0]
	list->tail = node;
   125b0:	bf08      	it	eq
   125b2:	609c      	streq	r4, [r3, #8]
}
   125b4:	e7f3      	b.n	1259e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   125b6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   125b8:	4604      	mov	r4, r0
   125ba:	2d00      	cmp	r5, #0
   125bc:	d1f4      	bne.n	125a8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   125be:	b13a      	cbz	r2, 125d0 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   125c0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   125c2:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   125c4:	600a      	str	r2, [r1, #0]
	list->head = node;
   125c6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   125c8:	2800      	cmp	r0, #0
   125ca:	d1eb      	bne.n	125a4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   125cc:	6099      	str	r1, [r3, #8]
}
   125ce:	e7ea      	b.n	125a6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   125d0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   125d4:	e7e7      	b.n	125a6 <gpio_nrfx_manage_callback+0x24>

000125d6 <uarte_nrfx_config_get>:
{
   125d6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   125d8:	6902      	ldr	r2, [r0, #16]
   125da:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   125de:	e883 0003 	stmia.w	r3, {r0, r1}
}
   125e2:	2000      	movs	r0, #0
   125e4:	4770      	bx	lr

000125e6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   125e6:	6843      	ldr	r3, [r0, #4]
   125e8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   125ea:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   125ee:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   125f2:	4770      	bx	lr

000125f4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   125f4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   125f6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   125f8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   125fe:	b150      	cbz	r0, 12616 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12600:	2000      	movs	r0, #0
	*c = *data->rx_data;
   12602:	6952      	ldr	r2, [r2, #20]
   12604:	7812      	ldrb	r2, [r2, #0]
   12606:	700a      	strb	r2, [r1, #0]
   12608:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1260c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12610:	2201      	movs	r2, #1
   12612:	601a      	str	r2, [r3, #0]
	return 0;
   12614:	4770      	bx	lr
		return -1;
   12616:	f04f 30ff 	mov.w	r0, #4294967295
}
   1261a:	4770      	bx	lr

0001261c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1261c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1261e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12620:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12624:	b940      	cbnz	r0, 12638 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12626:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12628:	079b      	lsls	r3, r3, #30
   1262a:	d406      	bmi.n	1263a <is_tx_ready.isra.0+0x1e>
   1262c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   12630:	3800      	subs	r0, #0
   12632:	bf18      	it	ne
   12634:	2001      	movne	r0, #1
   12636:	4770      	bx	lr
   12638:	2001      	movs	r0, #1
}
   1263a:	4770      	bx	lr

0001263c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1263c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1263e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   12640:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   12644:	05c9      	lsls	r1, r1, #23
   12646:	d518      	bpl.n	1267a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12648:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1264c:	b1a9      	cbz	r1, 1267a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1264e:	f04f 0020 	mov.w	r0, #32
   12652:	f3ef 8111 	mrs	r1, BASEPRI
   12656:	f380 8812 	msr	BASEPRI_MAX, r0
   1265a:	f3bf 8f6f 	isb	sy
   1265e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   12662:	b130      	cbz	r0, 12672 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12664:	2000      	movs	r0, #0
   12666:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1266a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1266e:	2001      	movs	r0, #1
   12670:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   12672:	f381 8811 	msr	BASEPRI, r1
   12676:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1267a:	6852      	ldr	r2, [r2, #4]
   1267c:	06d2      	lsls	r2, r2, #27
   1267e:	d515      	bpl.n	126ac <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   12680:	f04f 0120 	mov.w	r1, #32
   12684:	f3ef 8211 	mrs	r2, BASEPRI
   12688:	f381 8812 	msr	BASEPRI_MAX, r1
   1268c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12690:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12694:	b111      	cbz	r1, 1269c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12696:	2100      	movs	r1, #0
   12698:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1269c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   126a0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   126a4:	f382 8811 	msr	BASEPRI, r2
   126a8:	f3bf 8f6f 	isb	sy
}
   126ac:	4770      	bx	lr

000126ae <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   126ae:	4608      	mov	r0, r1
   126b0:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   126b2:	4611      	mov	r1, r2
   126b4:	f7fb fea6 	bl	e404 <psa_generate_random>
	int err = EINVAL;
   126b8:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   126ba:	bf18      	it	ne
   126bc:	2016      	movne	r0, #22
   126be:	bd08      	pop	{r3, pc}

000126c0 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   126c0:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   126c2:	f000 f92c 	bl	1291e <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   126c6:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   126c8:	bf18      	it	ne
   126ca:	f06f 0015 	mvnne.w	r0, #21
   126ce:	bd08      	pop	{r3, pc}

000126d0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   126d0:	4770      	bx	lr

000126d2 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   126d2:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   126d4:	f100 0350 	add.w	r3, r0, #80	; 0x50
   126d8:	009b      	lsls	r3, r3, #2
   126da:	b29b      	uxth	r3, r3
   126dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   126e0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   126e4:	601a      	str	r2, [r3, #0]
   126e6:	681b      	ldr	r3, [r3, #0]
}
   126e8:	4770      	bx	lr

000126ea <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   126ea:	b130      	cbz	r0, 126fa <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   126ec:	3010      	adds	r0, #16
   126ee:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   126f0:	b2c0      	uxtb	r0, r0
   126f2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   126f6:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   126fa:	4770      	bx	lr

000126fc <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   126fc:	f7fb bafc 	b.w	dcf8 <compare_set>

00012700 <sys_clock_cycle_get_32>:
{
   12700:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   12702:	f7fb fad7 	bl	dcb4 <z_nrf_rtc_timer_read>
}
   12706:	bd08      	pop	{r3, pc}

00012708 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   12708:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1270a:	6843      	ldr	r3, [r0, #4]
   1270c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1270e:	7a03      	ldrb	r3, [r0, #8]
   12710:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   12714:	3b01      	subs	r3, #1
   12716:	00db      	lsls	r3, r3, #3
   12718:	6845      	ldr	r5, [r0, #4]
   1271a:	6814      	ldr	r4, [r2, #0]
   1271c:	441d      	add	r5, r3
   1271e:	42ac      	cmp	r4, r5
   12720:	d902      	bls.n	12728 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   12722:	f06f 0001 	mvn.w	r0, #1
}
   12726:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   12728:	7965      	ldrb	r5, [r4, #5]
   1272a:	428d      	cmp	r5, r1
   1272c:	d002      	beq.n	12734 <pinctrl_lookup_state+0x2c>
		(*state)++;
   1272e:	3408      	adds	r4, #8
   12730:	6014      	str	r4, [r2, #0]
   12732:	e7f1      	b.n	12718 <pinctrl_lookup_state+0x10>
			return 0;
   12734:	2000      	movs	r0, #0
   12736:	e7f6      	b.n	12726 <pinctrl_lookup_state+0x1e>

00012738 <nrf_gpio_pin_write>:
    if (value == 0)
   12738:	b909      	cbnz	r1, 1273e <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   1273a:	f7fb bcab 	b.w	e094 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   1273e:	f7fb bcdf 	b.w	e100 <nrf_gpio_pin_set>

00012742 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12746:	4616      	mov	r6, r2
   12748:	4605      	mov	r5, r0
   1274a:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1274e:	42af      	cmp	r7, r5
   12750:	d102      	bne.n	12758 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   12752:	2000      	movs	r0, #0
}
   12754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12758:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   1275a:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1275c:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   12760:	2b22      	cmp	r3, #34	; 0x22
   12762:	f200 8097 	bhi.w	12894 <pinctrl_configure_pins+0x152>
   12766:	e8df f003 	tbb	[pc, r3]
   1276a:	1e12      	.short	0x1e12
   1276c:	41302b26 	.word	0x41302b26
   12770:	9595952b 	.word	0x9595952b
   12774:	95554b95 	.word	0x95554b95
   12778:	95959595 	.word	0x95959595
   1277c:	95959595 	.word	0x95959595
   12780:	706b665a 	.word	0x706b665a
   12784:	75959595 	.word	0x75959595
   12788:	8b86817c 	.word	0x8b86817c
   1278c:	90          	.byte	0x90
   1278d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   1278e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12792:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   12796:	6828      	ldr	r0, [r5, #0]
   12798:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1279c:	f7fb fcb0 	bl	e100 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   127a0:	4643      	mov	r3, r8
   127a2:	2201      	movs	r2, #1
   127a4:	e01c      	b.n	127e0 <pinctrl_configure_pins+0x9e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   127a6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   127aa:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   127ae:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   127b0:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   127b2:	2100      	movs	r1, #0
   127b4:	e015      	b.n	127e2 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   127b6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   127ba:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   127be:	e7ea      	b.n	12796 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   127c0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   127c4:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   127c8:	e7f1      	b.n	127ae <pinctrl_configure_pins+0x6c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   127ca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   127ce:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   127d2:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   127d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   127d8:	f7fb fc5c 	bl	e094 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   127dc:	4643      	mov	r3, r8
   127de:	2200      	movs	r2, #0
   127e0:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   127e2:	6828      	ldr	r0, [r5, #0]
   127e4:	f7fb fc66 	bl	e0b4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   127e8:	3504      	adds	r5, #4
   127ea:	e7b0      	b.n	1274e <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   127ec:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   127f0:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   127f4:	6828      	ldr	r0, [r5, #0]
   127f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   127fa:	f7fb fc4b 	bl	e094 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   127fe:	e7cf      	b.n	127a0 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   12800:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12804:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
   12808:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1280c:	bf14      	ite	ne
   1280e:	4643      	movne	r3, r8
   12810:	2306      	moveq	r3, #6
   12812:	e7cd      	b.n	127b0 <pinctrl_configure_pins+0x6e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   12814:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12818:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
   1281c:	e7f4      	b.n	12808 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   1281e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12822:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12826:	6828      	ldr	r0, [r5, #0]
   12828:	f3c0 3140 	ubfx	r1, r0, #13, #1
   1282c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12830:	f7ff ff82 	bl	12738 <nrf_gpio_pin_write>
   12834:	e7b4      	b.n	127a0 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   12836:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   1283a:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1283e:	e7f2      	b.n	12826 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   12840:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12844:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12848:	e7ed      	b.n	12826 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   1284a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   1284e:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   12852:	e7e8      	b.n	12826 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   12854:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12858:	f8c6 4524 	str.w	r4, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1285c:	4643      	mov	r3, r8
   1285e:	2201      	movs	r2, #1
   12860:	e7a7      	b.n	127b2 <pinctrl_configure_pins+0x70>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   12862:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12866:	f8c6 4528 	str.w	r4, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1286a:	e7f7      	b.n	1285c <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   1286c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12870:	f8c6 4530 	str.w	r4, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12874:	e7f2      	b.n	1285c <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   12876:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   1287a:	f8c6 4534 	str.w	r4, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1287e:	e7ed      	b.n	1285c <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   12880:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   12884:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12888:	e7e8      	b.n	1285c <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   1288a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   1288e:	f8c6 453c 	str.w	r4, [r6, #1340]	; 0x53c
   12892:	e7e3      	b.n	1285c <pinctrl_configure_pins+0x11a>
		switch (NRF_GET_FUN(pins[i])) {
   12894:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12898:	e75c      	b.n	12754 <pinctrl_configure_pins+0x12>

0001289a <mbox_nrf_register_callback>:
{
   1289a:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1289c:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1289e:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   128a0:	bf9b      	ittet	ls
   128a2:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   128a6:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
		return -EINVAL;
   128aa:	f06f 0015 	mvnhi.w	r0, #21
	return 0;
   128ae:	2000      	movls	r0, #0
	data->user_data[channel] = user_data;
   128b0:	bf98      	it	ls
   128b2:	6423      	strls	r3, [r4, #64]	; 0x40
}
   128b4:	bd10      	pop	{r4, pc}

000128b6 <mbox_nrf_mtu_get>:
}
   128b6:	2000      	movs	r0, #0
   128b8:	4770      	bx	lr

000128ba <mbox_nrf_max_channels_get>:
}
   128ba:	2010      	movs	r0, #16
   128bc:	4770      	bx	lr

000128be <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   128be:	2000      	movs	r0, #0
   128c0:	4770      	bx	lr

000128c2 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   128c2:	2300      	movs	r3, #0
{
   128c4:	b570      	push	{r4, r5, r6, lr}
   128c6:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   128c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   128cc:	ab03      	add	r3, sp, #12
   128ce:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   128d0:	2304      	movs	r3, #4
{
   128d2:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   128d4:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   128d6:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   128d8:	b169      	cbz	r1, 128f6 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   128da:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   128dc:	680b      	ldr	r3, [r1, #0]
   128de:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   128e0:	684b      	ldr	r3, [r1, #4]
   128e2:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   128e4:	2101      	movs	r1, #1
   128e6:	2041      	movs	r0, #65	; 0x41
   128e8:	f7fb fdca 	bl	e480 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   128ec:	1e05      	subs	r5, r0, #0
   128ee:	dc04      	bgt.n	128fa <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   128f0:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   128f2:	b008      	add	sp, #32
   128f4:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   128f6:	2601      	movs	r6, #1
   128f8:	e7f4      	b.n	128e4 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   128fa:	1e23      	subs	r3, r4, #0
   128fc:	bf18      	it	ne
   128fe:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   12900:	2100      	movs	r1, #0
   12902:	e9cd 4300 	strd	r4, r3, [sp]
   12906:	aa04      	add	r2, sp, #16
   12908:	4633      	mov	r3, r6
   1290a:	f7fb fd9d 	bl	e448 <psa_call>
   1290e:	4604      	mov	r4, r0
    psa_close(handle);
   12910:	4628      	mov	r0, r5
   12912:	f7fb fdc3 	bl	e49c <psa_close>
    if (status < PSA_SUCCESS) {
   12916:	2c00      	cmp	r4, #0
   12918:	dbea      	blt.n	128f0 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   1291a:	4620      	mov	r0, r4
   1291c:	e7e9      	b.n	128f2 <tfm_platform_ioctl+0x30>

0001291e <psa_crypto_init>:
}
   1291e:	2000      	movs	r0, #0
   12920:	4770      	bx	lr

00012922 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   12922:	b510      	push	{r4, lr}
   12924:	b088      	sub	sp, #32
   12926:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   12928:	ab05      	add	r3, sp, #20
   1292a:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   1292c:	230c      	movs	r3, #12
   1292e:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   12930:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   12932:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   12936:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   1293a:	eb0d 0103 	add.w	r1, sp, r3
   1293e:	aa03      	add	r2, sp, #12
   12940:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   12942:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   12946:	f7ff ffbc 	bl	128c2 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   1294a:	9b00      	ldr	r3, [sp, #0]
   1294c:	6023      	str	r3, [r4, #0]

	return ret;
}
   1294e:	b008      	add	sp, #32
   12950:	bd10      	pop	{r4, pc}

00012952 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   12952:	f7fb bdb1 	b.w	e4b8 <SystemCoreClockUpdate>

00012956 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   12956:	4700      	bx	r0

00012958 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   12958:	f000 bb5c 	b.w	13014 <z_impl_k_busy_wait>

0001295c <nrfx_clock_stop>:
    clock_stop(domain);
   1295c:	f7fb bdfc 	b.w	e558 <clock_stop>

00012960 <nrf_gpio_reconfigure>:
{
   12960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12962:	4617      	mov	r7, r2
   12964:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   12968:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1296a:	a801      	add	r0, sp, #4
{
   1296c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1296e:	f7fb ff5b 	bl	e828 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12972:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12974:	2f00      	cmp	r7, #0
   12976:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1297a:	bf14      	ite	ne
   1297c:	2302      	movne	r3, #2
   1297e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12980:	2900      	cmp	r1, #0
   12982:	bf18      	it	ne
   12984:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   12988:	2d00      	cmp	r5, #0
   1298a:	bf14      	ite	ne
   1298c:	f04f 0c0c 	movne.w	ip, #12
   12990:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   12994:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12996:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1299a:	bf14      	ite	ne
   1299c:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   129a0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   129a4:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   129a6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   129aa:	bf14      	ite	ne
   129ac:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   129b0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   129b4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   129b8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   129bc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   129c0:	b101      	cbz	r1, 129c4 <nrf_gpio_reconfigure+0x64>
   129c2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   129c4:	b10f      	cbz	r7, 129ca <nrf_gpio_reconfigure+0x6a>
   129c6:	783f      	ldrb	r7, [r7, #0]
   129c8:	007f      	lsls	r7, r7, #1
   129ca:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   129cc:	b10d      	cbz	r5, 129d2 <nrf_gpio_reconfigure+0x72>
   129ce:	782d      	ldrb	r5, [r5, #0]
   129d0:	00ad      	lsls	r5, r5, #2
   129d2:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   129d4:	b10c      	cbz	r4, 129da <nrf_gpio_reconfigure+0x7a>
   129d6:	7822      	ldrb	r2, [r4, #0]
   129d8:	0214      	lsls	r4, r2, #8
   129da:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   129dc:	b10e      	cbz	r6, 129e2 <nrf_gpio_reconfigure+0x82>
   129de:	7836      	ldrb	r6, [r6, #0]
   129e0:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   129e2:	432c      	orrs	r4, r5
   129e4:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   129e6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   129ea:	b003      	add	sp, #12
   129ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000129ee <nrf_gpio_cfg_sense_set>:
{
   129ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   129f0:	f10d 030f 	add.w	r3, sp, #15
   129f4:	9301      	str	r3, [sp, #4]
   129f6:	2300      	movs	r3, #0
{
   129f8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   129fc:	461a      	mov	r2, r3
   129fe:	4619      	mov	r1, r3
   12a00:	9300      	str	r3, [sp, #0]
   12a02:	f7ff ffad 	bl	12960 <nrf_gpio_reconfigure>
}
   12a06:	b005      	add	sp, #20
   12a08:	f85d fb04 	ldr.w	pc, [sp], #4

00012a0c <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   12a0c:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   12a0e:	f7fc faf9 	bl	f004 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   12a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   12a16:	f7fb be9d 	b.w	e754 <nrfx_clock_irq_handler>

00012a1a <nrfx_usbd_consumer>:
{
   12a1a:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   12a1c:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   12a1e:	680d      	ldr	r5, [r1, #0]
   12a20:	42a3      	cmp	r3, r4
        p_next->size = 0;
   12a22:	bf8f      	iteee	hi
   12a24:	2100      	movhi	r1, #0
        p_next->p_data = p_transfer->p_data;
   12a26:	e9c0 5300 	strdls	r5, r3, [r0]
        size -= data_size;
   12a2a:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   12a2c:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   12a2e:	bf8e      	itee	hi
   12a30:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   12a34:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   12a36:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   12a38:	429a      	cmp	r2, r3
   12a3a:	d103      	bne.n	12a44 <nrfx_usbd_consumer+0x2a>
   12a3c:	1e20      	subs	r0, r4, #0
   12a3e:	bf18      	it	ne
   12a40:	2001      	movne	r0, #1
}
   12a42:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   12a44:	2000      	movs	r0, #0
   12a46:	e7fc      	b.n	12a42 <nrfx_usbd_consumer+0x28>

00012a48 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   12a48:	684b      	ldr	r3, [r1, #4]
{
   12a4a:	b510      	push	{r4, lr}
   12a4c:	429a      	cmp	r2, r3
   12a4e:	bf28      	it	cs
   12a50:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
   12a52:	680c      	ldr	r4, [r1, #0]
    p_next->size = tx_size;
   12a54:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   12a58:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   12a5a:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   12a5c:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   12a5e:	441a      	add	r2, r3
}
   12a60:	3800      	subs	r0, #0
   12a62:	bf18      	it	ne
   12a64:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
   12a66:	600a      	str	r2, [r1, #0]
}
   12a68:	bd10      	pop	{r4, pc}

00012a6a <nrfx_usbd_feeder_ram_zlp>:
{
   12a6a:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   12a6c:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   12a6e:	680b      	ldr	r3, [r1, #0]
   12a70:	42a2      	cmp	r2, r4
   12a72:	bf28      	it	cs
   12a74:	4622      	movcs	r2, r4
   12a76:	2a00      	cmp	r2, #0
   12a78:	bf14      	ite	ne
   12a7a:	461d      	movne	r5, r3
   12a7c:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   12a7e:	eba4 0402 	sub.w	r4, r4, r2
    p_next->size = tx_size;
   12a82:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->p_data.addr += tx_size;
   12a86:	441a      	add	r2, r3
}
   12a88:	bf14      	ite	ne
   12a8a:	2001      	movne	r0, #1
   12a8c:	2000      	moveq	r0, #0
    p_transfer->size -= tx_size;
   12a8e:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   12a90:	600a      	str	r2, [r1, #0]
}
   12a92:	bd30      	pop	{r4, r5, pc}

00012a94 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   12a94:	f010 0f80 	tst.w	r0, #128	; 0x80
   12a98:	bf14      	ite	ne
   12a9a:	2300      	movne	r3, #0
   12a9c:	2310      	moveq	r3, #16
   12a9e:	f000 000f 	and.w	r0, r0, #15
}
   12aa2:	4418      	add	r0, r3
   12aa4:	4770      	bx	lr

00012aa6 <ev_started_handler>:
}
   12aa6:	4770      	bx	lr

00012aa8 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   12aa8:	2087      	movs	r0, #135	; 0x87
   12aaa:	f7fc bbbd 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012aae <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   12aae:	2086      	movs	r0, #134	; 0x86
   12ab0:	f7fc bbba 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012ab4 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   12ab4:	2085      	movs	r0, #133	; 0x85
   12ab6:	f7fc bbb7 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012aba <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   12aba:	2084      	movs	r0, #132	; 0x84
   12abc:	f7fc bbb4 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012ac0 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   12ac0:	2083      	movs	r0, #131	; 0x83
   12ac2:	f7fc bbb1 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012ac6 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   12ac6:	2082      	movs	r0, #130	; 0x82
   12ac8:	f7fc bbae 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012acc <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   12acc:	2081      	movs	r0, #129	; 0x81
   12ace:	f7fc bbab 	b.w	f228 <nrf_usbd_epin_dma_handler>

00012ad2 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   12ad2:	f7fc bbc5 	b.w	f260 <nrf_usbd_ep0in_dma_handler>

00012ad6 <nrfx_usbd_ep_max_packet_size_set>:
{
   12ad6:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   12ad8:	f7fc facc 	bl	f074 <ep_state_access>
    p_state->max_packet_size = size;
   12adc:	8181      	strh	r1, [r0, #12]
}
   12ade:	bd08      	pop	{r3, pc}

00012ae0 <nrfx_usbd_ep_status_get>:
{
   12ae0:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   12ae2:	f7fc fac7 	bl	f074 <ep_state_access>
	__asm__ volatile(
   12ae6:	f04f 0220 	mov.w	r2, #32
   12aea:	f3ef 8311 	mrs	r3, BASEPRI
   12aee:	f382 8812 	msr	BASEPRI_MAX, r2
   12af2:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   12af6:	6882      	ldr	r2, [r0, #8]
   12af8:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   12afa:	6802      	ldr	r2, [r0, #0]
   12afc:	b92a      	cbnz	r2, 12b0a <nrfx_usbd_ep_status_get+0x2a>
   12afe:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   12b00:	f383 8811 	msr	BASEPRI, r3
   12b04:	f3bf 8f6f 	isb	sy
}
   12b08:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   12b0a:	2004      	movs	r0, #4
   12b0c:	e7f8      	b.n	12b00 <nrfx_usbd_ep_status_get+0x20>

00012b0e <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   12b0e:	2007      	movs	r0, #7
   12b10:	f7fc be96 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b14 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   12b14:	2006      	movs	r0, #6
   12b16:	f7fc be93 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b1a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   12b1a:	2005      	movs	r0, #5
   12b1c:	f7fc be90 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b20 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   12b20:	2004      	movs	r0, #4
   12b22:	f7fc be8d 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b26 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   12b26:	2003      	movs	r0, #3
   12b28:	f7fc be8a 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b2c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   12b2c:	2002      	movs	r0, #2
   12b2e:	f7fc be87 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b32 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   12b32:	2001      	movs	r0, #1
   12b34:	f7fc be84 	b.w	f840 <nrf_usbd_epout_dma_handler>

00012b38 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   12b38:	f7fc bf7e 	b.w	fa38 <usbd_ep_abort>

00012b3c <z_device_state_init>:
}
   12b3c:	4770      	bx	lr

00012b3e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   12b3e:	b138      	cbz	r0, 12b50 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   12b40:	68c3      	ldr	r3, [r0, #12]
   12b42:	8818      	ldrh	r0, [r3, #0]
   12b44:	f3c0 0008 	ubfx	r0, r0, #0, #9
   12b48:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   12b4c:	4258      	negs	r0, r3
   12b4e:	4158      	adcs	r0, r3
}
   12b50:	4770      	bx	lr

00012b52 <z_early_memset>:
	(void) memset(dst, c, n);
   12b52:	f7ff bc05 	b.w	12360 <memset>

00012b56 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   12b56:	f7ff bbf8 	b.w	1234a <memcpy>

00012b5a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   12b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b5c:	4604      	mov	r4, r0
   12b5e:	460d      	mov	r5, r1
	__asm__ volatile(
   12b60:	f04f 0320 	mov.w	r3, #32
   12b64:	f3ef 8611 	mrs	r6, BASEPRI
   12b68:	f383 8812 	msr	BASEPRI_MAX, r3
   12b6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   12b70:	6947      	ldr	r7, [r0, #20]
   12b72:	b977      	cbnz	r7, 12b92 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   12b74:	f000 f9c3 	bl	12efe <z_unpend_first_thread>

		if (pending_thread != NULL) {
   12b78:	b158      	cbz	r0, 12b92 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   12b7a:	682a      	ldr	r2, [r5, #0]
   12b7c:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   12b7e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   12b80:	f000 f94c 	bl	12e1c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   12b84:	4631      	mov	r1, r6
   12b86:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   12b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   12b8e:	f7fd bf1f 	b.w	109d0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   12b92:	682b      	ldr	r3, [r5, #0]
   12b94:	6962      	ldr	r2, [r4, #20]
   12b96:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   12b98:	682b      	ldr	r3, [r5, #0]
   12b9a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   12b9c:	69a3      	ldr	r3, [r4, #24]
   12b9e:	3b01      	subs	r3, #1
   12ba0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   12ba2:	f386 8811 	msr	BASEPRI, r6
   12ba6:	f3bf 8f6f 	isb	sy
}
   12baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012bac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12bac:	f3ef 8005 	mrs	r0, IPSR
}
   12bb0:	3800      	subs	r0, #0
   12bb2:	bf18      	it	ne
   12bb4:	2001      	movne	r0, #1
   12bb6:	4770      	bx	lr

00012bb8 <z_impl_k_thread_name_set>:
}
   12bb8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   12bbc:	4770      	bx	lr

00012bbe <k_thread_name_get>:
}
   12bbe:	2000      	movs	r0, #0
   12bc0:	4770      	bx	lr

00012bc2 <z_impl_k_thread_start>:
	z_sched_start(thread);
   12bc2:	f7fd bffd 	b.w	10bc0 <z_sched_start>

00012bc6 <z_pm_save_idle_exit>:
{
   12bc6:	b508      	push	{r3, lr}
	pm_system_resume();
   12bc8:	f7f8 fa5e 	bl	b088 <pm_system_resume>
}
   12bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   12bd0:	f7ff bd7e 	b.w	126d0 <sys_clock_idle_exit>

00012bd4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   12bd4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12bd8:	428b      	cmp	r3, r1
   12bda:	d001      	beq.n	12be0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   12bdc:	f7fe b860 	b.w	10ca0 <z_set_prio>
}
   12be0:	2000      	movs	r0, #0
   12be2:	4770      	bx	lr

00012be4 <z_impl_k_mutex_init>:
{
   12be4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   12be6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   12be8:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   12bec:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   12bf0:	4770      	bx	lr

00012bf2 <queue_insert>:
{
   12bf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12bf6:	4699      	mov	r9, r3
   12bf8:	4604      	mov	r4, r0
   12bfa:	460d      	mov	r5, r1
   12bfc:	4690      	mov	r8, r2
   12bfe:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12c02:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   12c06:	f04f 0220 	mov.w	r2, #32
   12c0a:	f3ef 8611 	mrs	r6, BASEPRI
   12c0e:	f382 8812 	msr	BASEPRI_MAX, r2
   12c12:	f3bf 8f6f 	isb	sy
	if (is_append) {
   12c16:	b103      	cbz	r3, 12c1a <queue_insert+0x28>
	return list->tail;
   12c18:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   12c1a:	4638      	mov	r0, r7
   12c1c:	f000 f96f 	bl	12efe <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   12c20:	b158      	cbz	r0, 12c3a <queue_insert+0x48>
   12c22:	2400      	movs	r4, #0
   12c24:	f8c0 8014 	str.w	r8, [r0, #20]
   12c28:	6784      	str	r4, [r0, #120]	; 0x78
	z_ready_thread(thread);
   12c2a:	f000 f8f7 	bl	12e1c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   12c2e:	4638      	mov	r0, r7
   12c30:	4631      	mov	r1, r6
   12c32:	f7fd fecd 	bl	109d0 <z_reschedule>
	return 0;
   12c36:	2000      	movs	r0, #0
   12c38:	e00c      	b.n	12c54 <queue_insert+0x62>
	if (alloc) {
   12c3a:	f1b9 0f00 	cmp.w	r9, #0
   12c3e:	d01c      	beq.n	12c7a <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   12c40:	2108      	movs	r1, #8
   12c42:	f7fe fbf9 	bl	11438 <z_thread_aligned_alloc>
		if (anode == NULL) {
   12c46:	b938      	cbnz	r0, 12c58 <queue_insert+0x66>
	__asm__ volatile(
   12c48:	f386 8811 	msr	BASEPRI, r6
   12c4c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   12c50:	f06f 000b 	mvn.w	r0, #11
}
   12c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   12c58:	2301      	movs	r3, #1
		anode->data = data;
   12c5a:	f8c0 8004 	str.w	r8, [r0, #4]
   12c5e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12c60:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12c62:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   12c66:	b965      	cbnz	r5, 12c82 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   12c68:	6823      	ldr	r3, [r4, #0]
   12c6a:	4313      	orrs	r3, r2
   12c6c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   12c6e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   12c70:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   12c72:	2b00      	cmp	r3, #0
   12c74:	d1db      	bne.n	12c2e <queue_insert+0x3c>
	list->tail = node;
   12c76:	6060      	str	r0, [r4, #4]
}
   12c78:	e7d9      	b.n	12c2e <queue_insert+0x3c>
}
   12c7a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   12c7c:	f8c8 9000 	str.w	r9, [r8]
}
   12c80:	e7ee      	b.n	12c60 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12c82:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   12c84:	f033 0303 	bics.w	r3, r3, #3
   12c88:	d10b      	bne.n	12ca2 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   12c8a:	6002      	str	r2, [r0, #0]
	return list->tail;
   12c8c:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   12c8e:	b912      	cbnz	r2, 12c96 <queue_insert+0xa4>
	list->head = node;
   12c90:	e9c4 0000 	strd	r0, r0, [r4]
}
   12c94:	e7cb      	b.n	12c2e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12c96:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12c98:	f003 0303 	and.w	r3, r3, #3
   12c9c:	4303      	orrs	r3, r0
   12c9e:	6013      	str	r3, [r2, #0]
   12ca0:	e7e9      	b.n	12c76 <queue_insert+0x84>
   12ca2:	4313      	orrs	r3, r2
   12ca4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12ca6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12ca8:	f003 0303 	and.w	r3, r3, #3
   12cac:	4318      	orrs	r0, r3
   12cae:	6028      	str	r0, [r5, #0]
}
   12cb0:	e7bd      	b.n	12c2e <queue_insert+0x3c>

00012cb2 <z_queue_node_peek>:
{
   12cb2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   12cb4:	4604      	mov	r4, r0
   12cb6:	b130      	cbz	r0, 12cc6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12cb8:	6802      	ldr	r2, [r0, #0]
   12cba:	0793      	lsls	r3, r2, #30
   12cbc:	d003      	beq.n	12cc6 <z_queue_node_peek+0x14>
		ret = anode->data;
   12cbe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   12cc0:	b109      	cbz	r1, 12cc6 <z_queue_node_peek+0x14>
			k_free(anode);
   12cc2:	f000 f9ff 	bl	130c4 <k_free>
}
   12cc6:	4620      	mov	r0, r4
   12cc8:	bd10      	pop	{r4, pc}

00012cca <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   12cca:	2301      	movs	r3, #1
{
   12ccc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   12cce:	9300      	str	r3, [sp, #0]
   12cd0:	2300      	movs	r3, #0
{
   12cd2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   12cd4:	4619      	mov	r1, r3
   12cd6:	f7ff ff8c 	bl	12bf2 <queue_insert>
}
   12cda:	b003      	add	sp, #12
   12cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00012ce0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   12ce0:	b13a      	cbz	r2, 12cf2 <z_impl_k_sem_init+0x12>
   12ce2:	428a      	cmp	r2, r1
   12ce4:	d305      	bcc.n	12cf2 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   12ce6:	e9c0 1202 	strd	r1, r2, [r0, #8]
   12cea:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   12cee:	2000      	movs	r0, #0
   12cf0:	4770      	bx	lr
		return -EINVAL;
   12cf2:	f06f 0015 	mvn.w	r0, #21
}
   12cf6:	4770      	bx	lr

00012cf8 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   12cf8:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   12cfa:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   12cfc:	408b      	lsls	r3, r1
   12cfe:	ea22 0303 	bic.w	r3, r2, r3
   12d02:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   12d04:	fa22 f001 	lsr.w	r0, r2, r1
}
   12d08:	f000 0001 	and.w	r0, r0, #1
   12d0c:	4770      	bx	lr

00012d0e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   12d0e:	b120      	cbz	r0, 12d1a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   12d10:	2200      	movs	r2, #0
   12d12:	3088      	adds	r0, #136	; 0x88
   12d14:	4611      	mov	r1, r2
   12d16:	f000 b91a 	b.w	12f4e <z_sched_wake>
}
   12d1a:	4770      	bx	lr

00012d1c <k_work_init>:
{
   12d1c:	b538      	push	{r3, r4, r5, lr}
   12d1e:	4604      	mov	r4, r0
   12d20:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12d22:	2210      	movs	r2, #16
   12d24:	2100      	movs	r1, #0
   12d26:	f7ff fb1b 	bl	12360 <memset>
   12d2a:	6065      	str	r5, [r4, #4]
}
   12d2c:	bd38      	pop	{r3, r4, r5, pc}

00012d2e <z_work_submit_to_queue>:
{
   12d2e:	b513      	push	{r0, r1, r4, lr}
   12d30:	9001      	str	r0, [sp, #4]
   12d32:	4608      	mov	r0, r1
	__asm__ volatile(
   12d34:	f04f 0320 	mov.w	r3, #32
   12d38:	f3ef 8411 	mrs	r4, BASEPRI
   12d3c:	f383 8812 	msr	BASEPRI_MAX, r3
   12d40:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   12d44:	a901      	add	r1, sp, #4
   12d46:	f7fd fd75 	bl	10834 <submit_to_queue_locked>
	__asm__ volatile(
   12d4a:	f384 8811 	msr	BASEPRI, r4
   12d4e:	f3bf 8f6f 	isb	sy
}
   12d52:	b002      	add	sp, #8
   12d54:	bd10      	pop	{r4, pc}

00012d56 <k_work_submit_to_queue>:
{
   12d56:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   12d58:	f7ff ffe9 	bl	12d2e <z_work_submit_to_queue>
	if (ret > 0) {
   12d5c:	1e04      	subs	r4, r0, #0
   12d5e:	dd09      	ble.n	12d74 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   12d60:	f04f 0320 	mov.w	r3, #32
   12d64:	f3ef 8011 	mrs	r0, BASEPRI
   12d68:	f383 8812 	msr	BASEPRI_MAX, r3
   12d6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   12d70:	f000 f838 	bl	12de4 <z_reschedule_irqlock>
}
   12d74:	4620      	mov	r0, r4
   12d76:	bd10      	pop	{r4, pc}

00012d78 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   12d78:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12d7c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12d7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12d80:	2300      	movs	r3, #0
	node->prev = NULL;
   12d82:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   12d86:	4770      	bx	lr

00012d88 <unpend_thread_no_timeout>:
{
   12d88:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   12d8a:	f7ff fff5 	bl	12d78 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   12d8e:	7b43      	ldrb	r3, [r0, #13]
   12d90:	f023 0302 	bic.w	r3, r3, #2
   12d94:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   12d96:	2300      	movs	r3, #0
   12d98:	6083      	str	r3, [r0, #8]
}
   12d9a:	bd08      	pop	{r3, pc}

00012d9c <z_unpend_thread_no_timeout>:
{
   12d9c:	b508      	push	{r3, lr}
   12d9e:	f04f 0320 	mov.w	r3, #32
   12da2:	f3ef 8111 	mrs	r1, BASEPRI
   12da6:	f383 8812 	msr	BASEPRI_MAX, r3
   12daa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   12dae:	f7ff ffeb 	bl	12d88 <unpend_thread_no_timeout>
	__asm__ volatile(
   12db2:	f381 8811 	msr	BASEPRI, r1
   12db6:	f3bf 8f6f 	isb	sy
}
   12dba:	bd08      	pop	{r3, pc}

00012dbc <z_unpend_thread>:
{
   12dbc:	b510      	push	{r4, lr}
	__asm__ volatile(
   12dbe:	f04f 0320 	mov.w	r3, #32
   12dc2:	f3ef 8411 	mrs	r4, BASEPRI
   12dc6:	f383 8812 	msr	BASEPRI_MAX, r3
   12dca:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   12dce:	f7ff ffdb 	bl	12d88 <unpend_thread_no_timeout>
	__asm__ volatile(
   12dd2:	f384 8811 	msr	BASEPRI, r4
   12dd6:	f3bf 8f6f 	isb	sy
}
   12dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12dde:	3018      	adds	r0, #24
   12de0:	f000 b8d2 	b.w	12f88 <z_abort_timeout>

00012de4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   12de4:	4603      	mov	r3, r0
   12de6:	b920      	cbnz	r0, 12df2 <z_reschedule_irqlock+0xe>
   12de8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   12dec:	b90a      	cbnz	r2, 12df2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   12dee:	f7f8 bb35 	b.w	b45c <arch_swap>
   12df2:	f383 8811 	msr	BASEPRI, r3
   12df6:	f3bf 8f6f 	isb	sy
}
   12dfa:	4770      	bx	lr

00012dfc <z_reschedule_unlocked>:
	__asm__ volatile(
   12dfc:	f04f 0320 	mov.w	r3, #32
   12e00:	f3ef 8011 	mrs	r0, BASEPRI
   12e04:	f383 8812 	msr	BASEPRI_MAX, r3
   12e08:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   12e0c:	f7ff bfea 	b.w	12de4 <z_reschedule_irqlock>

00012e10 <z_priq_dumb_best>:
{
   12e10:	4603      	mov	r3, r0
	return list->head == list;
   12e12:	6800      	ldr	r0, [r0, #0]
}
   12e14:	4283      	cmp	r3, r0
   12e16:	bf08      	it	eq
   12e18:	2000      	moveq	r0, #0
   12e1a:	4770      	bx	lr

00012e1c <z_ready_thread>:
{
   12e1c:	b510      	push	{r4, lr}
   12e1e:	f04f 0320 	mov.w	r3, #32
   12e22:	f3ef 8411 	mrs	r4, BASEPRI
   12e26:	f383 8812 	msr	BASEPRI_MAX, r3
   12e2a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   12e2e:	f7fd fe91 	bl	10b54 <ready_thread>
	__asm__ volatile(
   12e32:	f384 8811 	msr	BASEPRI, r4
   12e36:	f3bf 8f6f 	isb	sy
}
   12e3a:	bd10      	pop	{r4, pc}

00012e3c <z_thread_timeout>:
{
   12e3c:	4601      	mov	r1, r0
   12e3e:	b510      	push	{r4, lr}
	__asm__ volatile(
   12e40:	f04f 0320 	mov.w	r3, #32
   12e44:	f3ef 8411 	mrs	r4, BASEPRI
   12e48:	f383 8812 	msr	BASEPRI_MAX, r3
   12e4c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   12e50:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   12e54:	f013 0f28 	tst.w	r3, #40	; 0x28
   12e58:	d10d      	bne.n	12e76 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   12e5a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   12e5e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   12e60:	b10b      	cbz	r3, 12e66 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   12e62:	f7ff ff91 	bl	12d88 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   12e66:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   12e6a:	f023 0314 	bic.w	r3, r3, #20
   12e6e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   12e72:	f7fd fe6f 	bl	10b54 <ready_thread>
	__asm__ volatile(
   12e76:	f384 8811 	msr	BASEPRI, r4
   12e7a:	f3bf 8f6f 	isb	sy
}
   12e7e:	bd10      	pop	{r4, pc}

00012e80 <add_to_waitq_locked>:
{
   12e80:	b538      	push	{r3, r4, r5, lr}
   12e82:	4604      	mov	r4, r0
   12e84:	460d      	mov	r5, r1
	unready_thread(thread);
   12e86:	f7fd feb9 	bl	10bfc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   12e8a:	7b63      	ldrb	r3, [r4, #13]
   12e8c:	f043 0302 	orr.w	r3, r3, #2
   12e90:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   12e92:	b195      	cbz	r5, 12eba <add_to_waitq_locked+0x3a>
   12e94:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   12e96:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12e98:	429d      	cmp	r5, r3
   12e9a:	d015      	beq.n	12ec8 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12e9c:	b1a3      	cbz	r3, 12ec8 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   12e9e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   12ea2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   12ea6:	4291      	cmp	r1, r2
   12ea8:	d008      	beq.n	12ebc <add_to_waitq_locked+0x3c>
		return b2 - b1;
   12eaa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   12eac:	2a00      	cmp	r2, #0
   12eae:	dd05      	ble.n	12ebc <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   12eb0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12eb2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   12eb6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12eb8:	605c      	str	r4, [r3, #4]
}
   12eba:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   12ebc:	686a      	ldr	r2, [r5, #4]
   12ebe:	4293      	cmp	r3, r2
   12ec0:	d002      	beq.n	12ec8 <add_to_waitq_locked+0x48>
   12ec2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d1ec      	bne.n	12ea2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   12ec8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   12eca:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   12ece:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12ed0:	606c      	str	r4, [r5, #4]
}
   12ed2:	e7f2      	b.n	12eba <add_to_waitq_locked+0x3a>

00012ed4 <z_unpend1_no_timeout>:
{
   12ed4:	b510      	push	{r4, lr}
	__asm__ volatile(
   12ed6:	f04f 0320 	mov.w	r3, #32
   12eda:	f3ef 8411 	mrs	r4, BASEPRI
   12ede:	f383 8812 	msr	BASEPRI_MAX, r3
   12ee2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   12ee6:	f7ff ff93 	bl	12e10 <z_priq_dumb_best>
		if (thread != NULL) {
   12eea:	4601      	mov	r1, r0
   12eec:	b108      	cbz	r0, 12ef2 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   12eee:	f7ff ff4b 	bl	12d88 <unpend_thread_no_timeout>
	__asm__ volatile(
   12ef2:	f384 8811 	msr	BASEPRI, r4
   12ef6:	f3bf 8f6f 	isb	sy
}
   12efa:	4608      	mov	r0, r1
   12efc:	bd10      	pop	{r4, pc}

00012efe <z_unpend_first_thread>:
{
   12efe:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12f00:	f04f 0320 	mov.w	r3, #32
   12f04:	f3ef 8511 	mrs	r5, BASEPRI
   12f08:	f383 8812 	msr	BASEPRI_MAX, r3
   12f0c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   12f10:	f7ff ff7e 	bl	12e10 <z_priq_dumb_best>
		if (thread != NULL) {
   12f14:	4604      	mov	r4, r0
   12f16:	b120      	cbz	r0, 12f22 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   12f18:	f7ff ff36 	bl	12d88 <unpend_thread_no_timeout>
   12f1c:	3018      	adds	r0, #24
   12f1e:	f000 f833 	bl	12f88 <z_abort_timeout>
	__asm__ volatile(
   12f22:	f385 8811 	msr	BASEPRI, r5
   12f26:	f3bf 8f6f 	isb	sy
}
   12f2a:	4620      	mov	r0, r4
   12f2c:	bd38      	pop	{r3, r4, r5, pc}

00012f2e <z_unpend_all>:
{
   12f2e:	b538      	push	{r3, r4, r5, lr}
   12f30:	4605      	mov	r5, r0
	int need_sched = 0;
   12f32:	2000      	movs	r0, #0
	return list->head == list;
   12f34:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12f36:	42a5      	cmp	r5, r4
   12f38:	d000      	beq.n	12f3c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   12f3a:	b904      	cbnz	r4, 12f3e <z_unpend_all+0x10>
}
   12f3c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   12f3e:	4620      	mov	r0, r4
   12f40:	f7ff ff3c 	bl	12dbc <z_unpend_thread>
		z_ready_thread(thread);
   12f44:	4620      	mov	r0, r4
   12f46:	f7ff ff69 	bl	12e1c <z_ready_thread>
		need_sched = 1;
   12f4a:	2001      	movs	r0, #1
   12f4c:	e7f2      	b.n	12f34 <z_unpend_all+0x6>

00012f4e <z_sched_wake>:
{
   12f4e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12f50:	f04f 0320 	mov.w	r3, #32
   12f54:	f3ef 8511 	mrs	r5, BASEPRI
   12f58:	f383 8812 	msr	BASEPRI_MAX, r3
   12f5c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   12f60:	f7ff ff56 	bl	12e10 <z_priq_dumb_best>
		if (thread != NULL) {
   12f64:	4604      	mov	r4, r0
   12f66:	b150      	cbz	r0, 12f7e <z_sched_wake+0x30>
   12f68:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
   12f6a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   12f6c:	f7ff ff0c 	bl	12d88 <unpend_thread_no_timeout>
   12f70:	3018      	adds	r0, #24
   12f72:	f000 f809 	bl	12f88 <z_abort_timeout>
			ready_thread(thread);
   12f76:	4620      	mov	r0, r4
   12f78:	f7fd fdec 	bl	10b54 <ready_thread>
			ret = true;
   12f7c:	2001      	movs	r0, #1
	__asm__ volatile(
   12f7e:	f385 8811 	msr	BASEPRI, r5
   12f82:	f3bf 8f6f 	isb	sy
}
   12f86:	bd38      	pop	{r3, r4, r5, pc}

00012f88 <z_abort_timeout>:
{
   12f88:	b510      	push	{r4, lr}
	__asm__ volatile(
   12f8a:	f04f 0220 	mov.w	r2, #32
   12f8e:	f3ef 8411 	mrs	r4, BASEPRI
   12f92:	f382 8812 	msr	BASEPRI_MAX, r2
   12f96:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   12f9a:	6803      	ldr	r3, [r0, #0]
   12f9c:	b13b      	cbz	r3, 12fae <z_abort_timeout+0x26>
			remove_timeout(to);
   12f9e:	f7fe f885 	bl	110ac <remove_timeout>
			ret = 0;
   12fa2:	2000      	movs	r0, #0
	__asm__ volatile(
   12fa4:	f384 8811 	msr	BASEPRI, r4
   12fa8:	f3bf 8f6f 	isb	sy
}
   12fac:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   12fae:	f06f 0015 	mvn.w	r0, #21
   12fb2:	e7f7      	b.n	12fa4 <z_abort_timeout+0x1c>

00012fb4 <z_get_next_timeout_expiry>:
{
   12fb4:	b510      	push	{r4, lr}
	__asm__ volatile(
   12fb6:	f04f 0320 	mov.w	r3, #32
   12fba:	f3ef 8411 	mrs	r4, BASEPRI
   12fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   12fc2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   12fc6:	f7fe f84b 	bl	11060 <next_timeout>
	__asm__ volatile(
   12fca:	f384 8811 	msr	BASEPRI, r4
   12fce:	f3bf 8f6f 	isb	sy
}
   12fd2:	bd10      	pop	{r4, pc}

00012fd4 <z_set_timeout_expiry>:
{
   12fd4:	b570      	push	{r4, r5, r6, lr}
   12fd6:	4604      	mov	r4, r0
   12fd8:	460d      	mov	r5, r1
	__asm__ volatile(
   12fda:	f04f 0320 	mov.w	r3, #32
   12fde:	f3ef 8611 	mrs	r6, BASEPRI
   12fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   12fe6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   12fea:	f7fe f839 	bl	11060 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   12fee:	2801      	cmp	r0, #1
   12ff0:	dd05      	ble.n	12ffe <z_set_timeout_expiry+0x2a>
   12ff2:	42a0      	cmp	r0, r4
   12ff4:	db03      	blt.n	12ffe <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   12ff6:	4629      	mov	r1, r5
   12ff8:	4620      	mov	r0, r4
   12ffa:	f7fb f811 	bl	e020 <sys_clock_set_timeout>
	__asm__ volatile(
   12ffe:	f386 8811 	msr	BASEPRI, r6
   13002:	f3bf 8f6f 	isb	sy
}
   13006:	bd70      	pop	{r4, r5, r6, pc}

00013008 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   13008:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1300a:	f7fe f93f 	bl	1128c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1300e:	bd08      	pop	{r3, pc}

00013010 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   13010:	f7fe b93c 	b.w	1128c <sys_clock_tick_get>

00013014 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   13014:	b108      	cbz	r0, 1301a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   13016:	f7f6 bb27 	b.w	9668 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1301a:	4770      	bx	lr

0001301c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1301c:	f1b1 3fff 	cmp.w	r1, #4294967295
   13020:	bf08      	it	eq
   13022:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   13026:	b538      	push	{r3, r4, r5, lr}
   13028:	4605      	mov	r5, r0
   1302a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1302c:	d01d      	beq.n	1306a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1302e:	ea51 0300 	orrs.w	r3, r1, r0
   13032:	d103      	bne.n	1303c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   13034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   13038:	f7fe b928 	b.w	1128c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1303c:	f06f 0301 	mvn.w	r3, #1
   13040:	1a18      	subs	r0, r3, r0
   13042:	f04f 33ff 	mov.w	r3, #4294967295
   13046:	eb63 0101 	sbc.w	r1, r3, r1
   1304a:	2900      	cmp	r1, #0
   1304c:	da0c      	bge.n	13068 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1304e:	f7fe f91d 	bl	1128c <sys_clock_tick_get>
   13052:	2d01      	cmp	r5, #1
   13054:	4622      	mov	r2, r4
   13056:	f174 0400 	sbcs.w	r4, r4, #0
   1305a:	462b      	mov	r3, r5
   1305c:	bfbc      	itt	lt
   1305e:	2301      	movlt	r3, #1
   13060:	2200      	movlt	r2, #0
   13062:	1818      	adds	r0, r3, r0
   13064:	eb41 0102 	adc.w	r1, r1, r2
}
   13068:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1306a:	f04f 30ff 	mov.w	r0, #4294967295
   1306e:	4601      	mov	r1, r0
   13070:	e7fa      	b.n	13068 <sys_clock_timeout_end_calc+0x4c>

00013072 <k_timer_init>:
	timer->status = 0U;
   13072:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   13074:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   13078:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1307c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   13080:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   13084:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   13086:	6343      	str	r3, [r0, #52]	; 0x34
}
   13088:	4770      	bx	lr

0001308a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1308a:	b510      	push	{r4, lr}
   1308c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1308e:	f7ff ff7b 	bl	12f88 <z_abort_timeout>

	if (inactive) {
   13092:	b9b0      	cbnz	r0, 130c2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   13094:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13096:	b10b      	cbz	r3, 1309c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   13098:	4620      	mov	r0, r4
   1309a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1309c:	f104 0018 	add.w	r0, r4, #24
   130a0:	f7ff ff18 	bl	12ed4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   130a4:	b168      	cbz	r0, 130c2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   130a6:	f7ff feb9 	bl	12e1c <z_ready_thread>
	__asm__ volatile(
   130aa:	f04f 0320 	mov.w	r3, #32
   130ae:	f3ef 8011 	mrs	r0, BASEPRI
   130b2:	f383 8812 	msr	BASEPRI_MAX, r3
   130b6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   130ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   130be:	f7ff be91 	b.w	12de4 <z_reschedule_irqlock>
   130c2:	bd10      	pop	{r4, pc}

000130c4 <k_free>:
	if (ptr != NULL) {
   130c4:	b120      	cbz	r0, 130d0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   130c6:	1f01      	subs	r1, r0, #4
   130c8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   130cc:	f000 b84a 	b.w	13164 <k_heap_free>
}
   130d0:	4770      	bx	lr

000130d2 <k_heap_init>:
{
   130d2:	b410      	push	{r4}
   130d4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   130d8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   130dc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   130de:	f7fe bd2d 	b.w	11b3c <sys_heap_init>

000130e2 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   130e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e6:	b085      	sub	sp, #20
   130e8:	4606      	mov	r6, r0
   130ea:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   130ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   130f0:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   130f2:	f7ff ff93 	bl	1301c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   130f6:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   130fa:	4605      	mov	r5, r0
   130fc:	460f      	mov	r7, r1
   130fe:	f04f 0320 	mov.w	r3, #32
   13102:	f3ef 8411 	mrs	r4, BASEPRI
   13106:	f383 8812 	msr	BASEPRI_MAX, r3
   1310a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1310e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   13112:	464a      	mov	r2, r9
   13114:	4641      	mov	r1, r8
   13116:	4630      	mov	r0, r6
   13118:	f7fe fca8 	bl	11a6c <sys_heap_aligned_alloc>
   1311c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1311e:	f7fe f8b5 	bl	1128c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   13122:	9b03      	ldr	r3, [sp, #12]
   13124:	b13b      	cbz	r3, 13136 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   13126:	f384 8811 	msr	BASEPRI, r4
   1312a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1312e:	4618      	mov	r0, r3
   13130:	b005      	add	sp, #20
   13132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   13136:	1a28      	subs	r0, r5, r0
   13138:	eb67 0101 	sbc.w	r1, r7, r1
   1313c:	2801      	cmp	r0, #1
   1313e:	f171 0200 	sbcs.w	r2, r1, #0
   13142:	dbf0      	blt.n	13126 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   13144:	e9cd 0100 	strd	r0, r1, [sp]
   13148:	465a      	mov	r2, fp
   1314a:	4621      	mov	r1, r4
   1314c:	4650      	mov	r0, sl
   1314e:	f7fd fd93 	bl	10c78 <z_pend_curr>
	__asm__ volatile(
   13152:	f04f 0320 	mov.w	r3, #32
   13156:	f3ef 8411 	mrs	r4, BASEPRI
   1315a:	f383 8812 	msr	BASEPRI_MAX, r3
   1315e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   13162:	e7d6      	b.n	13112 <k_heap_aligned_alloc+0x30>

00013164 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   13164:	b538      	push	{r3, r4, r5, lr}
   13166:	4604      	mov	r4, r0
   13168:	f04f 0320 	mov.w	r3, #32
   1316c:	f3ef 8511 	mrs	r5, BASEPRI
   13170:	f383 8812 	msr	BASEPRI_MAX, r3
   13174:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   13178:	f7fe fc40 	bl	119fc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1317c:	f104 000c 	add.w	r0, r4, #12
   13180:	f7ff fed5 	bl	12f2e <z_unpend_all>
   13184:	b130      	cbz	r0, 13194 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   13186:	4629      	mov	r1, r5
   13188:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1318c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   13190:	f7fd bc1e 	b.w	109d0 <z_reschedule>
	__asm__ volatile(
   13194:	f385 8811 	msr	BASEPRI, r5
   13198:	f3bf 8f6f 	isb	sy
}
   1319c:	bd38      	pop	{r3, r4, r5, pc}

0001319e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1319e:	4770      	bx	lr
